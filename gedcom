#!/usr/bin/env perl

# gedcom - produce data from a gedcom file

# Author Nigel Horne: njh@bandsman.co.uk
# Copyright (C) 2015-2017, Nigel Horne

# Usage is subject to licence terms.
# The licence terms of this software are as follows:
# Personal single user, single computer use: GPL2
# All other users (including Commercial, Charity, Educational, Government)
#	must apply in writing for a licence for use from Nigel Horne at the
#	above e-mail.

# FIXME: -a Goes through the entire file once for each day without remembering
#	anything
# TODO: add option to print in generations order rather than date order.
# TODO: make the colourisation of warnings optional
# TODO: write a post-processor to sort errors by type

use strict;
use warnings;
use autodie qw(:all);
# use diagnostics;
# use warnings::unused;

use Gedcom;
use Genealogy::Gedcom::Date 2.01;
use Date::Parse;	# For strptime
use Getopt::Std;
use Geo::Coder::List 0.15;
use Geo::Coder::Free 0.03;
use Geo::Coder::OSM;
use Geo::Coder::XYZ;
use Geo::Coder::CA;
use Geo::Coder::Postcodes;
use Term::ANSIColor;
use Lingua::EN::NameCase;
use Lingua::EN::NameParse;
use Lingua::EN::Numbers::Ordinate;
use Lingua::EN::ABC;
use Lingua::EN::Inflect;
# use Lingua::EN::AddressParse;
use Geo::StreetAddress::US;
use Locale::US;
use DateTime::Duration;
use DateTime::Format::Natural;
use Text::Wrap;
use LWP::Simple;
use LWP::UserAgent::Throttled;
use LWP::ConnCache;
use URI;
use URI::Find::Schemeless;
use Sort::Key::DateTime;
use Text::Names;
use Text::Names::GB;
use Memoize;
use Data::Fetch;
use Text::Soundex;
use List::Util;

no lib '.';

my %opts;
getopts('aAbB:cCdDfGh:Hm:lLp:stwWvy:', \%opts);
die "Usage: $0 [ -a ] [ -A ] [ -b ] [ -B book.pdf ] [ -c ] [ -C ] [ -d ] [ -D ] [ -f ] [ -G ] [ -h home-person-name ] [ -H [ -L ] [ -m month ] [ -y year ] ] [ -l ] [ -p person-to-print ] [ -s ] [ -t ] [ -w [ -W ] ] filename [ filename2 ] \n" unless($ARGV[0]);

my $me;
my @myancestors;
my @mydescendents;
my %warned;
my %printed;
my %places;

my $ged = Gedcom->new(gedcom_file => $ARGV[0], read_only => 1);
my $ged2;
if($ARGV[1]) {
	$ged2 = Gedcom->new(gedcom_file => $ARGV[1], read_only => 1);
}

my $nameparser = Lingua::EN::NameParse->new(extended_titles => 1, initials => 1);

if($opts{h}) {
	my @rc = $ged->get_individual($opts{h});
	if(scalar(@rc) == 0) {
		die "$0: Can't find '$opts{h}' in $ARGV[0]";
	} elsif(scalar(@rc) == 1) {
		$me = $rc[0];
	} else {
		my $i = 0;
		print join("\n", map { $i++; "$i: " . $_->as_string({ include_years => 1, middle_names => 1 }) } @rc),
			"\nMore than one $opts{h} found - choose a line number: ";
		$i = <STDIN>;
		chomp $i;
		$me = $rc[$i - 1];
		die "Incorrect line number" unless($me);
	}
}

if($opts{'f'}) {
	$opts{'w'} = 1;
}

die '-w option needs -d option' if($opts{'w'} && !$opts{'d'});

my $browser;
my $us;
if($opts{'w'} || $opts{'B'}) {
	$browser = LWP::UserAgent::Throttled->new(keep_alive => 1);
	$browser->env_proxy(1);
	$browser->conn_cache->total_capacity(undef);

	# Cache calls to openstreetmap etc.
	require File::Spec;
	File::Spec->import();

	require HTTP::Cache::Transparent;
	HTTP::Cache::Transparent->import();

	if($opts{'B'}) {
		require File::Temp;
		File::Temp->import();

		require Image::Resize;
		Image::Resize->import();

		require String::ProgressBar;
		String::ProgressBar->import();
	}

	my $cachedir = File::Spec->catfile(File::Spec->tmpdir(), 'cache', 'http-cache-transparent');

	HTTP::Cache::Transparent::init({
		BasePath => $cachedir,
		Verbose => $opts{'v'} ? 1 : 0,
		NoUpdate => 60 * 60 * 24,
		MaxAge => 30 * 24
	}) || die "$0: $cachedir: $!";

	if($opts{'w'}) {
		require WWW::Scrape::FindaGrave;
		WWW::Scrape::FindaGrave->import();

		# if(!$ged->validate() && $opts{'f'}) {
			# die "$ARGV[0] is not a valid gedcom file";
		# }

		require Locale::US;
		Locale::US->import();

		$us = Locale::US->new();
	}
}

my %all_dates;	# Maps dates to the hashref from Genealogy::Gedcom::Date

my $date_parser = Genealogy::Gedcom::Date->new();
my $dfn = DateTime::Format::Natural->new();

my $geocoder = Geo::Coder::List->new()
	->push({ regex => qr/(Canada|USA|United States)$/, geocoder => Geo::Coder::CA->new() })
	->push({ regex => qr/^[\w\s\-]+?,[\w\s]+,[\w\s]+?$/, geocoder => Geo::Coder::Free->new() })
	->push({ regex => qr/^\w+,\s*\w+,\s*(UK|United Kingdom|England)$/i, geocoder => Geo::Coder::Postcodes->new() })
	->push(Geo::Coder::OSM->new())
	->push(Geo::Coder::XYZ->new());

if($browser) {
	$browser->throttle({
		'nominatim.openstreetmap.org' => 1,
		'geocode.xyz' => 1,
		'geocoder.ca' => 1,
		'www.findagrave.com' => 1,
		'api.postcodes.io' => 1,
	});
	$browser->ssl_opts(verify_hostname => 0);	# prevent "Can't connect to geocode.xyz:443 (certificate verify failed)"
	$geocoder->ua($browser);
}

my $oneday = DateTime::Duration->new(days => 1);
my $tenmonths = DateTime::Duration->new(months => 10);
my $sixteenyears = DateTime::Duration->new(years => 16);
my $fetcher;
my $pdf;
my $pdfpage;
my @tmpfiles;
my $pr;

my @everyone;
unless($opts{'p'}) {
	@everyone = $ged->individuals();
}

if($opts{'c'} && !$opts{'d'}) {
	die '-c only makes sense with the -d option';
}
if($opts{'m'} && !$opts{'H'}) {
	die '-m only makes sense with the -H option';
}
if($opts{'y'} && !$opts{'H'}) {
	die '-y only makes sense with the -H option';
}
if($opts{'L'} && !$opts{'H'}) {
	die '-L only makes sense with the -H option';
}
if($opts{'W'} && !$opts{'w'}) {
	die '-W only makes sense with the -w option';
}
if($opts{'A'} && $opts{'G'}) {
	die '-A doesn\'t make sense with the -G option';
}

if($opts{'B'}) {
	require PDF::API2;
	PDF::API2->import();

	$pdf = PDF::API2->new(-file => $opts{'B'});
	if(defined($ENV{'LANG'}) &&($ENV{'LANG'} =~ /^en_US/)) {
		$pdf->mediabox('Letter');
		$Text::Wrap::columns = 110;
	} else {
		$pdf->mediabox('A4');
		$Text::Wrap::columns = 100;
	}
	$opts{'A'} = 1 unless($opts{'G'});
} elsif($opts{'s'}) {
	die '-s only makes sense with the -B option';
}

if($opts{'A'} || $opts{'G'}) {
	$opts{'a'} = 1;
}

memoize('Gedcom::Individual::as_string');
memoize('stepsabove');
memoize('normalize_name');	# Speeds up sort with -B a lot

my $dot;
	if($opts{'G'}) {
	if(-x '/usr/bin/dot') {
		$dot = '/usr/bin/dot';
	} elsif(-x '/usr/local/bin/dot') {
		$dot = '/usr/local/bin/dot';
	} elsif(-x '/sw/bin/dot') {
		$dot = '/sw/bin/dot';
	}

	if(!defined($dot)) {
		if($opts{'f'}) {
			die 'Graphviz not found, no family trees';
		}
		if($opts{'w'}) {
			red_warning(warning => 'Graphviz not found, no family trees');
		}
	} else {
		require Image::Magick::Thumbnail;
		Image::Magick::Thumbnail->import();
		print "Using $dot\n" if($opts{'v'});
	}
}

if($opts{'H'}) {
	die '-H only makes sense with the -d option' unless($opts{'d'});
	die '-a doesn\'t make sense with the -H option' if($opts{'a'});
	die '-h doesn\'t make sense with the -H option' if($opts{'h'});
	die '-p doesn\'t make sense with the -H option' if($opts{'p'});
	die '-H doesn\'t support citations' if($opts{'c'});

	require HTML::Table;

	my $dtl = DateTime::Locale->load($ENV{'LANG'});

	my @dow = @{$dtl->day_format_wide()};
	if($dtl->first_day_of_week() eq 7) {
		# e.g. US
		unshift @dow, pop @dow;
	}
	my $table = HTML::Table->new(-border => 1, -padding => 5, -head => \@dow);
	print '<html><head><title>Gedcom Calendar</title></head><body><font size="2">',
		'<style>table { empty-cells: show; }</style>';

	foreach my $day(0..6) {
		# $table->setCell(1, $day + 1, $days[$day]);
		$table->setColWidth($day, '14.29%');
		$table->setColVAlign($day, 'top');
	}

	my $month;
	if($opts{'m'}) {
		$month = $opts{'m'};
		if(($month =~ /\D/) || ($month < 1) || ($month > 12)) {
			die "$0: invalid month number $month";
		}
		$month--;
	} else {
		$month = (localtime)[4]; # 0..11
	}

	my $dt = DateTime->today();
	my $year;
	if($opts{'y'}) {
		$year = $opts{'y'};
		if($year !~ /\d{3,4}/) {
			die "$0: invalid year number $month";
		}
	} else {
		$year = $dt->year();
	}

	$dt = DateTime->last_day_of_month(month => $month + 1, year => $year);
	$dt->subtract(months => 1);
	$dt->add(days => 1);
	my $column = $dt->day_of_week();
	if($dtl->first_day_of_week() eq 7) {
		$column++;
		if($column == 8) {
			$column = 1;
		}
	}

	foreach my $column(1..7) {
		$table->setCell(2, $column, '&nbsp;');
	}

	my $row = 2;
	while($dt->month() == $month + 1) {
		$table->setCellVAlign($row, $column, 'top');
		$table->setCell($row, $column, '<font size="1">' . $dt->day() . '</font>');
		$dt->add(days => 1);
		if($dt->day() == 1) {
			last;
		}
		if($column == 7) {
			$row++;
			foreach my $column(1..7) {
				$table->setCell($row, $column, '&nbsp;');
			}
			$column = 1;
		} else {
			$column++;
		}
	}

	print "<center><h2>", @{$dtl->month_format_wide()}[$month], " $year</h2></center>";

	foreach my $day(1..28) {
		generate(day => $day, month => $month, year => $year, everyone => \@everyone, table => $table, dtl => $dtl);
	}
	if($month == 1) {
		# February
		if(($year % 100) == 0) {
			if(($year % 400) == 0) {
				generate(day => 29, month => $month, everyone => \@everyone);
			}
		} elsif(($year % 4) == 0) {
			generate(day => 29, month => $month, everyone => \@everyone);
		}
	} else {
		generate(day => 29, month => $month, year => $year, everyone => \@everyone, table => $table, dtl => $dtl);
		generate(day => 30, month => $month, year => $year, everyone => \@everyone, table => $table, dtl => $dtl);
		if(($month == 0) || ($month == 2) || ($month == 4) || ($month == 6) || ($month == 7) || ($month == 9) || ($month == 11)) {
			generate(day => 31, month => $month, year => $year, everyone => \@everyone, table => $table, dtl => $dtl);
		}
	}
	print '<center>';
	$table->print();
	print '</center></font></body></html>';
} elsif($opts{a}) {
	die '-b and -a should not be given together' if($opts{'b'});
	die '-D and -a should not be given together' if($opts{'D'});
	die '-p and -a should not be given together' if($opts{'p'});

	if($opts{'A'} || $opts{'G'}) {
		if($opts{'B'}) {
			if($opts{'h'}) {
				my $page = $pdf->page();

				my $font = $pdf->corefont('Times-New-Roman-Bold');

				my $text = $page->text();
				$text->textstart();
				$text->font($font, 28);
				$text->translate(300, 600);
				my $surname;
				if($opts{'s'}) {
					if($opts{'h'} =~ /\s*([A-Z]+?)$/i) {
						$surname = $1;
					} else {
						$surname = $opts{'h'};
					}
					$text->text_center("The Surname Book of $surname");
				} else {
					$text->text_center('The Family Tree of');
					$text->translate(300, 525);
					$text->text_center(normalize_name($opts{'h'}));
				}
				my %args;
				if(defined($ENV{'TZ'}) && ($ENV{'TZ'} !~ /^\//)) {
					$args{'time_tone'} = $ENV{'TZ'};
				} else {
					$args{'time_zone'} = DateTime::TimeZone->new(name => 'local');
				}
				my $dt = DateTime->today(%args);
				my $dtl = DateTime::Locale->load($ENV{'LANG'});
				if($opts{'s'}) {
					$text->translate(300, 525);
				} else {
					$text->translate(300, 450);
				}
				$text->text_center('Compiled on ' .
					$dt->day() . ' ' .
					@{$dtl->month_format_wide()}[$dt->month - 1] . ' ' .
					$dt->year()
				);
				if($opts{'s'} && !$opts{'G'}) {
					$text->translate(300, 450);
					if(is_alive(person => $me)) {
						$text->text_center('for ' . normalize_name($opts{'h'}));
					} else {
						my $n = normalize_name($me->as_string(include_years => 1));
						$n =~ s/\sC(\d)/ c$1/;
						$text->text_center("for $n");
					}
				}
				$text->font($font, 12);
				$text->translate(220, 40);
				$text->text('Produced by gedcom - https://github.com/nigelhorne/gedcom');
				$text->textend();

				# my $gfx = $page->gfx();
				# my $image = $pdf->image_png('/Users/njh/src/njh/ged2site/dynamic-site/images/printer.png');
				# $gfx->image($image, 100, 100);
				# $image->height(32);
				# $image->width(32);

				@everyone = ($me);
				@everyone = ancestors($me, \@everyone);
				@everyone = descendents($me, \@everyone);
				my @siblings = $me->siblings();
				foreach my $sibling(@siblings) {
					@everyone = descendents($sibling, \@everyone);
				}
				@everyone = (@everyone, @siblings);

				if($surname) {
					my $nara = soundex_nara($surname);
					# @everyone = grep { $_->as_string() =~ /.*$surname$/i } @everyone;
					@everyone = grep { ($_->as_string() =~ /$surname$/i) || ($_->surname() && (soundex_nara($_->surname()) eq $nara)) } @everyone;
				}
			} elsif($opts{'s'}) {
				die '-s and -h must be given together';
			}
		}
		$fetcher = Data::Fetch->new();

		$pr = String::ProgressBar->new(max => scalar(@everyone), length => 60);

		if($opts{'G'}) {
			# Put a family tree on page 2
			my $tmp = File::Temp->new();
			my $filename = $tmp->filename();
			my $png = '/tmp/njh.png';	# FIXME
			if(open(my $fout, '|-', "$dot -Tpng -o$png -Tcmapx -o$filename")) {
			# if(open(my $fout, '|-', '/usr/bin/tee foo')) {
				print $fout 'digraph family {',
					'rotate = 90 subgraph main { rank="0"; ';
				print_graphviz({ person => $me, fout => $fout, format => 'dynamic' });
				print_graphviz_generation({ person => $me, fout => $fout, format => 'dynamic', rank => 0 });
				print $fout '}}';
				close $fout;

				my $image;
				my $resize = Image::Resize->new($png);
				my $width = $resize->width();
				my $height = $resize->height();
				my $gd;
				if($height > 715) {
					my $newwidth = $width * (715 / $height);
					my $newheight;
					if($newwidth > 550) {
						$newheight = $height * (550 / $width);
						$gd = $resize->resize(550, $newheight);
					} else {
						$gd = $resize->resize($newwidth, 715);
					}
				} elsif($width > 550) {
					my $newheight = $height * (550 / $width);
					$gd = $resize->resize(550, $newheight);
				}
				if($gd) {
					$image = $pdf->image_gd($gd, -lossless => 1);
					unlink $png;
				} else {
					$image = $pdf->image_png($png);
					push @tmpfiles, $png;
				}
				$pdfpage = PDFPage->new();
				my $x = 300 - ($image->width() / 2);
				my $y = $pdfpage->y() - $image->height();
				$pdfpage->page()->gfx()->image($image, $x, $y);
				$pdfpage->y($y);
				$pdfpage = PDFPage->new();
			}

			# FIXME: This sorting only works when all people are descendents of $me, there are no
			# ancestors involved
			@everyone = sort {
				(stepsabove($a, $me, 0) == stepsabove($b, $me, 0)) ?
					$a->as_sort_key() cmp $b->as_sort_key() :
					stepsabove($a, $me, 0) <=> stepsabove($b, $me, 0);
			} @everyone;

		} else {
			@everyone = Sort::Key::keysort { $_->as_sort_key() } @everyone;
		}

		generate(everyone => \@everyone);

		if($opts{'B'}) {
			$pdf->save();
			unlink @tmpfiles;
		}
	} else {
		foreach my $month(0..11) {
			foreach my $day(1..28) {
				generate(day => $day, month => $month, everyone => \@everyone);
			}
			if($month == 1) {
				my $year = DateTime->today()->year();
				next if($year % 4);
				if(($year % 100) == 0) {
					next unless($year % 400);
				}
				generate(day => 29, month => $month, everyone => \@everyone);
				next;
			}
			generate(day => 29, month => $month, everyone => \@everyone);
			generate(day => 30, month => $month, everyone => \@everyone);
			if(($month == 0) || ($month == 2) || ($month == 4) || ($month == 6) || ($month == 7) || ($month == 9) || ($month == 11)) {
				generate(day => 31, month => $month, everyone => \@everyone);
			}
		}
		generate(day => -1, month => -1, everyone => \@everyone);
	}
} elsif($opts{'b'}) {
	die '-b and -d should not be given together' if($opts{'d'});
	die '-b and -a should not be given together' if($opts{'a'});
	my($day, $month) = (localtime)[3,4];
	if($opts{'D'}) {
		print "Today's birthdays:\n";
	}
	generate(day => $day, month => $month, onlybirthdays => 1, onlydeaths => 0, everyone => \@everyone);
	if($opts{'D'}) {
		print "Today's anniversaries of deaths:\n";
		generate(day => $day, month => $month, onlybirthdays => 0, onlydeaths => 1, everyone => \@everyone);
	}
} elsif($opts{'D'}) {
	die '-D and -d should not be given together' if($opts{'d'});
	die '-D and -a should not be given together' if($opts{'a'});
	my($day, $month) = (localtime)[3,4];
	generate(day => $day, month => $month, onlybirthdays => 0, onlydeaths => 1, everyone => \@everyone);
} elsif($opts{'p'}) {
	die '-p and -D should not be given together' if($opts{'D'});
	die '-p and -b should not be given together' if($opts{'b'});

	my @people = $ged->get_individual($opts{p});
	if(@people) {
		my($day, $month) = (localtime)[3,4];

		foreach my $person(@people) {
			print_person(person => $person, day => $day, month => $month);
		}
	} else {
		die "$0: Can't find '$opts{p}' in $ARGV[0]";
	}
} elsif(!$opts{'t'}) {
	my($day, $month) = (localtime)[3,4];
	generate(day => $day, month => $month, everyone => \@everyone);
} else {
	my %args = ();
	if(defined($ENV{'TZ'})) {
		$args{'time_tone'} = $ENV{'TZ'};
	} else {
		$args{'time_zone'} = DateTime::TimeZone->new(name => 'local');
	}
	my $dt = DateTime->now(%args)->add(days => 1);
	generate(day => $dt->day(), month => $dt->month() - 1, everyone => \@everyone);
}

sub generate {
	my %params = (ref($_[0]) eq 'HASH') ? %{$_[0]} : @_;

	my $surname_initial;
	if($opts{'B'}) {
		$params{'font'} = $pdf->corefont('Times-New-Roman');
	}
	my $index = 1;
	my $generation = 0;

	foreach my $person(@{$params{'everyone'}}) {
	# foreach my $person(sort { $a->get_value('last name') cmp $b->get_value('last name') } $ged->individuals()) {
		if($me && ($person eq $me) && !$opts{'a'}) {
			$index++;
			next;
		}

		if(!$printed{$person->{'xref'}}) {
			if($opts{'B'}) {
				$| = 1;
				$pr->update($index++);
				$pr->write();
				$| = 0;
				if($opts{'G'}) {
					if(stepsabove($person, $me, 0) != $generation) {
						# FIXME:  only do this if the generation contains dead people of the -l flag is given
						$pdfpage = PDFPage->new();
						$generation = stepsabove($person, $me, 0);

						my $font = $pdf->corefont('Times-New-Roman-Bold');
						my $text = $pdfpage->page()->text();
						$text->textstart();
						$text->font($font, 18);

						$text->translate(300, $pdfpage->newline());

						my $t;

						if($generation >= 5) {
							$t = ($generation - 2) . ' times great-grandchildren';
						} elsif($generation == 1) {
							$t = 'Children';
						} elsif($generation == 2) {
							$t = 'Grandchildren';
						} elsif($generation == 3) {
							$t = 'Great-grandchilden';
						} elsif($generation == 4) {
							$t = 'Great-great-grandchildren';
						} else {
							# May have found a spouse with the same name, so it shouldn't be included
							next unless($person->father() || $person->mother());
							die $person->as_string(), '/', $me->as_string(), "; -G ($generation): Doesn't yet support ancestors";
						}
						$text->text_center($t);

						$text->font($params{'font'}, 12);
					}
				} else {
					my $surname = $person->surname() || '?';
					my $initial = substr $surname, 0, 1;
					if((!defined($surname_initial)) || ($initial ne $surname_initial)) {
						$pdfpage = PDFPage->new();
						$surname_initial = $initial;
					}
				}
			}

			$params{'person'} = $person;
			print_person(\%params);

			if($opts{'v'}) {
				my $log = $geocoder->log();
				$geocoder->flush();
				foreach my $l(@{$log}) {
					if($l->{geocoder}) {
						if($l->{error}) {
							print $l->{location}, ': ',  $l->{timetaken}, 's with ',  $l->{geocoder}, '(', $l->{error}, ")\n";
						} else {
							print $l->{location}, ': ',  $l->{timetaken}, 's with ',  $l->{geocoder}, "\n";
						}
					} else {
						print $l->{location}, ": cached\n";
					}
				}
			}
		}
	}

	if($opts{'B'}) {
		print "\n";
	}
}

sub print_person
{
	my %params = (ref($_[0]) eq 'HASH') ? %{$_[0]} : @_;

	# Gather the information on this person
	my $person = $params{'person'};

	$fetcher = Data::Fetch->new();	# Throw away old values from the cache

	my $dob = get_value({ person => $person, value => 'birth date' });

	# ACOM starts approximate dates with "Abt." instead of "ABT".
	if(defined($dob)) {
		$dob =~ s/[\.\-]/ /g;
		$dob =~ s/\s{2,}/ /g;
		$dob =~ s/\(.+$//;	# some people put information in brackets after the date
		if($dob =~ /^About[:\s](.+)/i) {
			$dob = "ABT$1";
		} elsif($dob =~ /^Bet\s[a-z]{3}.+([a-z]{3}\s+.*)/i) {	# Bet Jun-Jul 1860
			$dob = "ABT $1";
		} elsif($dob =~ /^(.+)\s*\?/i) {
			$dob = "ABT$1";
		}
		if(($dob !~ /^[\d\sA-Z\/]+$/i) && ($dob !~ /^Abt\./)) {
			if($dob =~ /(\d{4})\s*(.+)/) {
				$dob = "ABT$1";
				if(place({ peron => $person, place => $2 })) {
					if($opts{'f'}) {
						die $person->as_string(), ": Unexpected text ($2) after the date $1 - should be in the location record";
					}
					red_warning({ person => $person, warning => "Unexpected text ($2) after the date $1 - should be in the location record" });
				} else {
					if($opts{'f'}) {
						die $person->as_string(), ": Unexpected text ($2) after the date $1 - should be in the note field";
					}
					red_warning({ person => $person, warning => "Unexpected text ($2) after the date $1 - should be in the note field" });
				}
			} elsif($dob !~ /\d{1,2}$/) {	# Dates can begin with a letter in the US
				if($opts{'f'}) {
					die $person->as_string(), ": Invalid character in date of birth $dob";
				}
				red_warning({ person => $person, warning => "Invalid character in date of birth $dob" });
				$dob = undef;
			}
		}
	}

	my $onlybirthdays = $params{'onlybirthdays'};
	my $onlydeaths = $params{'onlydeaths'};

	die "BUG: onlydeaths and onlybirths given" if($onlydeaths && $onlybirthdays);

	return if($onlybirthdays && !defined($dob));

	my $dod = get_value({ person => $person, value => 'death date' });

	return if($onlydeaths && !defined($dod));

	my $yod;	# Year of death
	if($dod && ($dod =~ /.*?(\d{3,4})/)) {
		$yod = $1;
	}

	my $yob;	# Year of birth
	if($dob && ($dob =~ /.*?(\d{3,4})/)) {
		$yob = $1;
	} elsif($dob) {
		if($dob eq 'UNKNOWN') {
			$dob = undef;
		} elsif($opts{'w'} && !$warned{$person}) {
			if($opts{'f'}) {
				die $person->name(), ": invalid date of birth $dob\n";
			}
			warn $person->name(), ": invalid date of birth $dob\n";
			$warned{$person} = 1;
		}
	}

	unless($dob || $dod || $opts{'a'} || $opts{'p'}) {
		return;
	}

	if((!defined($opts{l})) && (!defined($yod)) && defined($yob) && ($yob > 1900)) {
		# Assuming living if we don't have a date of death and
		# they were born after 1900
		return;
	}

	print 'Checking ', $person->as_string({ include_years => 1 }), "\n" if($opts{'v'});

	my $print = 0;
	my $aob;
	my $aod;
	my $day = $params{'day'};
	my $month = $params{'month'};

	if($day) {
		if($dob && ($dob !~ /^\d{3,4}$/)) {
			my @btime = strptime("$dob 12:00");
			if(defined($btime[3]) && ($btime[3] == $day) && ($btime[4] == $month) && $btime[5]) {
				$print = 1;
				if(!$opts{a}) {
					$aob = (localtime)[5] - $btime[5];
					if($aob <= 0) {
						$aob += 1900;
					}
				}
			}
		}
		return if($onlybirthdays && !defined($aob));

		if($dod && ($dod !~ /^\d{3,4}$/)) {
			my @dtime = strptime("$dod 12:00");
			if(defined($dtime[3]) && ($dtime[3] == $day) && ($dtime[4] == $month) && $dtime[5]) {
				$print = 1;
				if(!$opts{a}) {
					$aod = (localtime)[5] - $dtime[5];
					if($aod <= 0) {
						$aod += 1900;
					}
				}
			}
		}
		return if($onlydeaths && !defined($aod));

		return unless($print || ($day == -1) || $opts{'p'});
	}

	if($opts{'w'} && !$person->validate_semantics()) {
		if($opts{'f'}) {
			die $person->as_string, ': failed consistency check';
		}
		red_warning({ person => $person, warning => 'failed consistency check' });
	}

	my @siblings = $person->siblings();
	my $mother = $person->mother();
	my $father = $person->father();
	my @spouses = $person->spouse();

	# TODO: Properly chart which spouse a child comes from
	my $family;
	foreach my $f($person->fams()) {
		if($f->number_of_children()) {
			$family = $f;
			last;
		}
	}

	if($opts{'w'} && (!$family) && (scalar(@siblings) == 0) && (!$mother) && (!$father) && (scalar(@spouses) == 0)) {
		if($opts{'f'}) {
			die $person->as_string() . ': not connected to the tree';
		}
		red_warning({ person => $person, warning => 'not connected to the tree' });
	}

	my $year = $params{'year'} || (localtime)[5];
	$year += 1900 if($year < 1900);

	if($opts{'H'}) {
		my $start_of_month = DateTime->new(month => $month + 1, day => 1, year => $year);
		my $dt = DateTime->new(month => $month + 1, day => $day, year => $year);

		my $row = $dt->weekday_of_month();
		my $first_day_of_month = $start_of_month->day_of_week();
		if(($first_day_of_month < 7) && ($dt->day_of_week() < $first_day_of_month)) {
			$row++;
		}
		$row++;
		my $column = $dt->day_of_week();
		my $dtl = $params{'dtl'};

		if($dtl->first_day_of_week() eq 7) {
			$column++;
			if($column == 8) {
				$column = 1;
				$row++ unless($first_day_of_month == 7);
			}
		}
		die "BUG: row cannot be 8 or greater" if($row >= 8);

		my $table = $params{'table'};

		# print STDERR "$row, $column\n";
		my $str = $table->getCell($row, $column);
		if(index($str, $person->as_string()) != -1) {
			$printed{$person->{'xref'}} = 1;
			return;
		}
		$str .= '<br>';
		if($opts{'L'}) {
			$str .= '<a href="/' . make_filename_from_person(person => $person) . '">' .
				$person->as_string() .
				'</a>';
		} else {
			$str .= $person->as_string();
		}
		if($aob) {
			if(my $d = date_to_datetime(date => get_value({ person => $person, value => 'birth date' }))) {
				$str .= ' b' . $d->strftime('%Y');
			} else {
				red_warning({ person => $person, warning => "Can't parse date of birth '$dob'" });
			}
		}
		if($aod) {
			if(my $d = date_to_datetime(date => get_value({ person => $person, value => 'death date' }))) {
				$str .= ' d' . $d->strftime('%Y');
			} else {
				red_warning({ person => $person, warning => "Can't parse date of death '$dod'" });
			}
		}

		$table->setCell($row, $column, $str);
		$printed{$person->{'xref'}} = 1;
		return;
	}
	my $person2;
	if($ged2) {
		$person2 = $ged2->get_individual($person->as_string());
		if($opts{'w'}) {
			if(!defined($person2)) {
				if($opts{'f'}) {
					die $person->as_string() . ": not found in $ARGV[1]";
				}
				red_warning({
					person => $person,
					warning => "not found in $ARGV[1]"
				})
			}
		}
	}

	my $args = {
		include_years => 1,
		middle_names => 1,
		title => 1,
		print_unknown => 1,
	};
	if(!($opts{'A'} || $opts{'G'})) {
		$args->{'nee'} = 1;
	}
	my $text;
	if($opts{'B'}) {
		if($pdfpage->pagefull() || ($pdfpage->linesleft() <= 7)) {
			$pdfpage = PDFPage->new();
		} else {
			$pdfpage->newline();
		}
		$text = $pdfpage->page()->text();
		$text->textstart();
		$text->font($params{'font'}, 18);

		$text->translate(20, $pdfpage->newline());
		$text->text($person->as_string($args));

		$text->font($params{'font'}, 12);
	} else {
		print $person->as_string($args), "\n";
	}

	my $name = $person->name();
	$name =~ s/\///g;
	$nameparser->parse($name);
	my %name_components = $nameparser->components();
	my $firstname = $name_components{'given_name_1'};
	my $lastname = $name_components{'surname_1'};

	if($firstname && ($firstname =~ /\d/)) {
		if($opts{'f'}) {
			die $person->as_string(), ': First name contains a digit';
		}
		red_warning({ person => $person, warning => 'First name contains a digit' });
	}
	if($lastname && ($lastname =~ /\d/)) {
		if($opts{'f'}) {
			die $person->as_string(), ': Last name contains a digit';
		}
		red_warning({ person => $person, warning => 'Last name contains a digit' });
	}

	my ($birth_dt, $marriage_dt, $death_dt);
	my $birth = $person->get_record('birth');
	my $dateofbirth = get_value({ person => $person, value => 'birth date' });
	if((!$dateofbirth) && $birth) {
		$dateofbirth = $birth->date();
	}
	my $placeofbirth = get_value({ person => $person, value => 'birth place' });
	if((!$placeofbirth) && $birth) {
		$placeofbirth = $birth->place();
	}

	my $death = $person->get_record('death');
	my $dateofdeath = get_value({ person => $person, value => 'death date' });
	if((!$dateofdeath) && $death) {
		$dateofdeath = $death->date();
	}
	my $placeofdeath = get_value({ person => $person, value => 'death place' });
	if((!$placeofdeath) && $death) {
		$placeofdeath = $death->place();
	}

	my %citations;
	my $citationcount = 0;
	my @birthcitations;
	my @deathcitations;
	if($opts{'c'}) {
		if($birth) {
			if($opts{'w'}) {
				foreach my $s($birth->source()) {
					if(!defined(get_source({ gedcom => $ged, person => $person, source => $s }))) {
						if($opts{'f'}) {
							die $person->as_string(), ': Citation is missing a source';
						}
						red_warning({ person => $person, warning => 'Citation is missing a source' });
					}
				}
			}
			my @s = sort { (get_source({ gedcom => $ged, person => $person, source => $a }) && get_source({ gedcom => $ged, person => $person, source => $b })) ? get_source({ gedcom => $ged, person => $person, source => $a })->title() cmp get_source({ gedcom => $ged, person => $person, source => $b })->title() : 0 } $birth->source();
			if(scalar(@s)) {
				my $previous;
				foreach my $src(@s) {
					$src = get_source({ gedcom => $ged, person => $person, source => $src}) unless ref($src);
					if(defined($src) && (my $title = $src->title())) {
						if($previous && ($title eq $previous)) {
							next;
						}
						$previous = $title;
						push @birthcitations, ++$citationcount;
						$citations{$citationcount} = $src;
					}
				}
			} elsif($opts{'w'}) {
				if($dateofbirth) {
					red_warning({ person => $person, warning => "Birth date ($dateofbirth) has no citations" });
				} else {
					red_warning({ person => $person, warning => "Birth place ($placeofbirth) has no citations" });
				}
			}
		}
		if($death) {
			my @s = $death->source();
			if(scalar(@s)) {
				foreach my $src(@s) {
					$src = $ged->get_source($src) unless ref($src);
					my $seen;
					foreach my $bc(@birthcitations) {
						if($src eq $citations{$bc}) {
							push @deathcitations, $bc;
							$seen++;
							last;
						}
					}
					if(!$seen) {
						push @deathcitations, ++$citationcount;
						$citations{$citationcount} = $src;
					}
				}
			} elsif($opts{'w'}) {
				if($dateofdeath) {
					red_warning({ person => $person, warning => "Death date ($dateofdeath) has no citations" });
				} else {
					red_warning({ person => $person, warning => "Death place ($placeofdeath) has no citations" });
				}
			}
		}
	}

	my @events = $person->event();

	my $marriage = $person->get_record('marriage') || $person->get_record('fams marriage');
	if((!defined($marriage)) && scalar(@spouses)) {
		$marriage = $spouses[0]->get_record('marriage');
		if((!defined($marriage)) && scalar(@spouses)) {
			if(scalar(@events) == 1) {
				my $event = $person->event();
				if(!ref($event)) {
					my $e = $person->tag_record('EVEN');
					if(ref($e) eq 'Gedcom::Record') {
						$event = $e;
					}
				}
				if(ref($event) eq 'Gedcom::Record') {
					my $type = $event->type();
					if($type eq 'Custom Marriage') {
						# FindMyPast
						$marriage = $event;
					}
				}
			} else {
				foreach my $event(@events) {
					if(ref($event) eq 'Gedcom::Record') {
						my $type = $event->type();
						if($type eq 'Custom Marriage') {
							# FindMyPast
							$marriage = $event;
							last;
						}
					}
				}
			}
		}
	}

	$birth_dt = date_to_datetime(date => $dateofbirth);

	my $dateofmarriage = get_value({ person => $person, value => 'marriage date' });
	if((!$dateofmarriage) && $marriage) {
		$dateofmarriage = $marriage->date();
	}
	$marriage_dt = date_to_datetime(date => $dateofmarriage);

	if($birth_dt && $marriage_dt && $opts{'w'} && ($marriage_dt < ($birth_dt + $sixteenyears))) {
		if($opts{'f'}) {
			die $person->as_string(),
				': married when less than 16 years old';
		}
		red_warning({
			person => $person,
			warning => 'married when less than 16 years old'
		});
	}

	$death_dt = date_to_datetime(date => $dateofdeath);

	if($opts{'d'} || $opts{'B'}) {
		# $fetcher->prime(object => $person, message => 'sex')->prime(object => $person, message => 'pronoun');

		my $baptism = $person->get_record('baptism');
		my $dateofbaptism = get_value({ person => $person, value => 'baptism date' });
		if((!$dateofbaptism) && $baptism) {
			$dateofbaptism = $baptism->date();
		}
		my $placeofbaptism = get_value({ person => $person, value => 'baptism place' });
		if((!$placeofbaptism) && $baptism) {
			$placeofbaptism = $baptism->place();
		}

		my $placeofmarriage = get_value({ person => $person, value => 'marriage place' });
		if((!$placeofmarriage) && $marriage) {
			$placeofmarriage = $marriage->place();
		}

		my $burial = $person->get_record('burial');
		my $dateofburial = get_value({ person => $person, value => 'burial date' });
		if((!$dateofburial) && $burial) {
			$dateofburial = $burial->date();
		}
		my $placeofburial = get_value({ person => $person, value => 'burial place' });
		if((!$placeofburial) && $burial) {
			$placeofburial = $burial->place();
		}

		my $marriagecitation;
		my @burialcitations;
		if($opts{'c'}) {
			if($marriage) {
				if(my $src = $marriage->source()) {
					$src = $ged->get_source($src) unless ref($src);
					# FIXME:  Only looks for matches in the first citations
					if(!defined($src)) {
						if($opts{'w'}) {
							my $src = $marriage->source();
							if($opts{'f'}) {
								die $person->as_string(), ": marriage citation can't find source $src";
							}
							red_warning({ person => $person, warning => "marriage citation can't find source $src" });
						}
					} elsif($birthcitations[0] && ($citations{$birthcitations[0]} eq $src)) {
						$marriagecitation = $birthcitations[0];
					} elsif($deathcitations[0] && ($citations{$deathcitations[0]} eq $src)) {
						$marriagecitation = $deathcitations[0];
					} else {
						$marriagecitation = ++$citationcount;
						$citations{$marriagecitation} = $src;
					}
				} elsif($opts{'w'}) {
					if($dateofmarriage) {
						red_warning({ person => $person, warning => "Marriage date ($dateofmarriage) has no citations" });
					} else {
						red_warning({ person => $person, warning => "Marriage place ($placeofmarriage) has no citations" });
					}
				}
			}
			if($burial) {
				my @s = $burial->source();
				if(scalar(@s)) {
					foreach my $src(@s) {
						$src = $ged->get_source($src) unless ref($src);
						if(!defined($src)) {
							if($opts{'w'}) {
								my $src = $burial->source();
								if($opts{'f'}) {
									die $person->as_string(), ": burial citation can't find source $src";
								}
								red_warning({ person => $person, warning => "burial citation can't find source $src" });
							}
							next;
						}
						my $seen;
						foreach my $dc(@deathcitations) {
							if($src eq $citations{$dc}) {
								push @burialcitations, $dc;
								$seen++;
								last;
							}
						}
						if(!$seen) {
							if($marriagecitation && ($citations{$marriagecitation} eq $src)) {
								push @burialcitations, $marriagecitation;
							} else {
								push @burialcitations, ++$citationcount;
								$citations{$citationcount} = $src;
							}
						}
					}
				} elsif($opts{'w'}) {
					if($dateofburial) {
						red_warning({ person => $person, warning => "Burial date ($dateofburial) has no citations" });
					} else {
						red_warning({ person => $person, warning => "Burial place ($placeofburial) has no citations" });
					}
				}
			}
		}

		my $pronoun = $fetcher->get(object => $person, message => 'pronoun');
		my $sex = $fetcher->get(object => $person, message => 'sex');

		if($opts{'w'} && $firstname) {
			# FIXME: This throws up a number of false positives
			my $guess;
			if($placeofbirth && ($placeofbirth =~ /, USA$/)) {
				$guess = Text::Names::guessGender($firstname);
			} else {
				$guess = Text::Names::GB::guessGender($firstname);
			}
			if($sex && $guess && ($sex ne $guess)) {
				my $error = 1;
				if(my $middle_name = $name_components{'middle_name'}) {
					if($placeofbirth && ($placeofbirth =~ /, USA$/)) {
						$guess = Text::Names::guessGender($middle_name);
					} else {
						$guess = Text::Names::GB::guessGender($middle_name);
					}
					if($guess && ($sex eq $guess)) {
						$error = 0;
					}
				}
				if($error) {
					if($opts{'f'}) {
						die $person->name(), ': Check the gender of the record';
					}
					red_warning({ person => $person, warning => 'Check the gender of the record' });
				}
			}
		}
		my @occupations = $person->get_value('occupation');

		my @children;
		foreach my $f($person->fams()) {
			@children = (@children, $f->children());
		}
		my $numberofchildren = scalar(@children);

		if($opts{'w'} && $numberofchildren) {
			foreach my $child(@children) {
				if($child eq $person) {
					if($opts{'f'}) {
						die $person->as_string(), ': person is own parent';
					} else {
						red_warning({ person => $person, warning => 'person is own parent' });
					}
				}
			}
		}

		my $relationship;
		my $spouserelationship;
		my $spouse;
		my %places_printed;

		if($dateofbirth && $opts{'w'} && scalar(@siblings)) {
			foreach my $sibling(@siblings) {
				my $siblingbirth = get_value({ person => $sibling, value => 'birth date' });
				if($siblingbirth && ($siblingbirth eq $dateofbirth) &&
				  (($sibling->name() eq $person->name()) || Text::Names::samePerson($sibling->name(), $person->name()))) {
					if($opts{'f'}) {
						die $person->name(), ': Possible duplicate person';
					}
					red_warning({ person => $sibling, warning => 'possible duplicate person' });
				}
			}
		}

		if($me && ($person ne $me) && !$opts{'G'}) {
			$relationship = $me->relationship($person);
			if((!$relationship) && scalar(@spouses)) {
				if($person->spouse() eq $me) {
					$relationship = ($sex eq 'F') ? 'wife' : 'husband';
				} else {
					foreach my $s(@spouses) {
						$spouserelationship = $me->relationship($s);
						if($spouserelationship) {
							$spouse = $s;
							last;
						}
					}
				}
			}
		}

		while($occupations[0] && (lc($occupations[0]) =~ /^scho(ol|lar)/i)) {
			shift @occupations;
		}
		while(scalar(@occupations) > 1) {
			if(($occupations[0] =~ /labou?rer/i) && ($occupations[1] =~ /labou?rer/i)) {
				shift @occupations;
			} else {
				last;
			}
		}

		my $same_occupation_as_father;
		my $printed_comma = 0;

		my $bio = "\t";

		if($occupations[0]) {
			if($father && $father->occupation() && ($occupations[0] eq $father->occupation())) {
				$same_occupation_as_father = $occupations[0];
				@occupations = ();
			} else {
				$bio .= 'A';
				if($occupations[0] =~ /^works on (.+)/i) {
					$occupations[0] = "$1 worker";
				}
				if($occupations[0] =~ /^[aeiou]/i) {
					$bio .= 'n';
				}
				$bio .= ' ';
				if($occupations[1]) {
					# my $alloccupations = join(', ', @occupations);
					# substr($alloccupations, rindex($alloccupations, ', '), 2, ' and ');
					# print lc($alloccupations);
					$bio .= lc(Lingua::EN::Inflect::WORDLIST(@occupations, {final_sep => ''}));
				} else {
					$bio .= lc($occupations[0]);
				}
				if(!($father || $mother || $spouserelationship)) {
					$bio .= ', ';
					$printed_comma = 1;
				}
			}
		} elsif(scalar(@occupations)) {
			if($opts{'w'}) {
				if($opts{'f'}) {
					die $person->as_string, ': occupation is empty';
				}
				red_warning({
					person => $person,
					warning => 'occupation is empty'
				});
			}
			shift @occupations;
		}
		my $print_sibling_count = 0;
		if($father || $mother) {
			if(scalar(@occupations)) {
				$bio .= ' and the ';
			} else {
				$bio .= "The ";
			}

			if($birth_dt) {
				if(scalar(@siblings)) {
					# If possible, sort siblings by date of birth
					my $all_siblings_have_dob = 1;
					foreach my $sibling(@siblings) {
						if(my $dob = get_value({ person => $sibling, value => 'birth date' })) {
							if(($dob !~ /^\d/) || ($dob =~ /[a-z]$/i) ||
							   ($dob =~ /[\/\-]/) || !date_parser_cached(date => $dob)) {
								$all_siblings_have_dob = 0;
								last;
							}
							my $d;
							eval {
								$d = $date_parser->parse(date => $dob);
							};
							if($d) {
								$d = @{$d}[0];
							}
							if($@ || !defined($d)) {
								if($opts{'f'}) {
									die $sibling->as_string(),
										" has an invalid date of birth: $dob";
								}
								if($opts{'w'}) {
									red_warning({
										person => $sibling,
										warning => "has an invalid date of birth: $dob"
									});
								}
								$all_siblings_have_dob = 0;
								last;
							}
						} else {
							$all_siblings_have_dob = 0;
							last;
						}
					}
					if($all_siblings_have_dob) {
						@siblings = Sort::Key::DateTime::dtkeysort { $dfn->parse_datetime(@{$date_parser->parse(date => get_value({ person => $_, value => 'birth date' }))}[0]->{'canonical'}) } @siblings;
					}
					my $count = 1;
					$print_sibling_count = 1;
					foreach my $sibling(@siblings) {
						if(my $dob = get_value({ person => $sibling, value => 'birth date' })) {
							if(($dob =~ /^\d/) && ($dob !~ /[a-z]$/i)) {
								my $d;
								eval {
									$d = $date_parser->parse(date => $dob);
								};
								if($d) {
									$d = @{$d}[0];
								}
								if($d) {
									$d = $dfn->parse_datetime($d->{'canonical'});
									if($opts{'w'} &&
									  ($d < $birth_dt) &&
									  ($d < ($birth_dt - $oneday)) &&
									  ($d > ($birth_dt - $tenmonths))) {
										if($opts{'f'}) {
											die $sibling->as_string(),
												' was born less than 10 months before ',
												$person->as_string();
										}
										red_warning({
											person => $sibling,
											warning => 'Born less than 10 months before ' . $person->as_string()
										});
									}
									$count++ if($d && ($d < $birth_dt));
								} else {
									$all_siblings_have_dob = 0;
									last;
								}
							} else {
								$all_siblings_have_dob = 0;
								last;
							}
						} else {
							$all_siblings_have_dob = 0;
							last;
						}
					}
					if($all_siblings_have_dob) {
						if(scalar(@siblings) && ($count == (scalar(@siblings) + 1))) {
							$bio .= ((scalar(@siblings) > 1) ? 'eldest' : 'older');
						} elsif(scalar(@siblings) && ($count == 1)) {
							$bio .= ((scalar(@siblings) > 1) ? 'youngest' : 'younger');
						} else {
							$bio .= ordinate($count);
						}
						$bio .= ' of ' . (scalar(@siblings) + 1) . ' children';
					} else {
						$bio .= 'child';
					}
				} else {
					# print ' only child of';
					$bio .= 'child';
				}
			} else {
				$bio .= 'child';
			}

			$bio .= ' of';

			if($father) {
				$bio .= ' ' . $father->as_string();
				if(!$same_occupation_as_father) {
					my @occupations = $father->get_value('occupation');
					while($occupations[0] && (lc($occupations[0]) =~ /^scho(ol|lar)/i)) {
						shift @occupations;
					}
					# TODO: print all occupations
					if($occupations[0]) {
						$bio .= ' (a';
						if($occupations[0] =~ /^[aeiou]/i) {
							$bio .= 'n';
						}
						$bio .= ' ';
						if(defined($ENV{'LANG'})) {
							if($ENV{'LANG'} =~ /^en_US/) {
								$bio .= Lingua::EN::ABC::b2a(lc($occupations[0]));
							} elsif($ENV{'LANG'} =~ /^en_GB/) {
								$bio .= Lingua::EN::ABC::a2b(lc($occupations[0]));
							}
						} else {
							$bio .= lc($occupations[0]);
						}
						$bio .= ')';
					}
				}
				if($mother) {
					$bio .= ' and';
				} else {
					$bio .= ', ';
					$printed_comma = 1;
				}
			}
			if($mother) {
				if(my $m = $mother->as_string(give_maidenname => 0)) {
					$bio .=  " $m";
				}
				my @occupations = $mother->get_value('occupation');
				# TODO: print all occupations
				if($occupations[0]) {
					$bio .= ' (a';
					if($occupations[0] =~ /^[aeiou]/i) {
						$bio .= 'n';
					}
					$bio .= ' ' . lc($occupations[0]) . ')';
				}
				if($opts{'w'}) {
					my $mdod = get_value({ person => $mother, value => 'death date' });
					if($mdod && $birth_dt) {
						if(my $dt = date_to_datetime(date => $mdod)) {
							if($birth_dt > $dt) {
								if($opts{'f'}) {
									die $person->name(), ': Born after mother died';
								}
								red_warning({ person => $person, warning => 'Born after mother died' });
							}
						}
					}
				}
			}
			if(($aob || $dateofbirth || $dateofbaptism || $placeofbirth || $placeofbaptism || scalar(@spouses) || $relationship) && ($occupations[0])) {
				$bio .= ', ';
				$printed_comma = 1;
			}
		}

		my $haveprintedspousename;
		if($relationship) {
			if($father || $mother || $occupations[0]) {
				if($aob || $aod || $dateofbirth || $dateofbaptism || $placeofbirth || $placeofbaptism || scalar(@spouses)) {
					$bio .= ', ' unless($printed_comma);
				} elsif(is_alive(person => $person)) {
					$bio .= $person->as_string() . ' is ';
				} else {
					$bio .= $person->as_string() . ' was ';
				}
				$bio .= 'your';
			} else {
				$bio .= 'Your';
			}
			$bio .= " $relationship";
		} elsif($spouserelationship) {
			if($father || $mother || $occupations[0]) {
				$bio .= ', ' unless($printed_comma);
				if($firstname) {
					$bio .= $firstname;
				} else {
					$bio .= $pronoun;
				}
				$bio .= ', the ';
			} else {
				$bio .= $person->as_string();
				if($aob || $aod || $dateofbirth || $dateofbaptism || $placeofbirth || $placeofbaptism || $dateofmarriage) {
					$bio .= ', the ';
				} elsif(is_alive(person => $person)) {
					$bio .= ' is the ';
				} else {
					$bio .= ' was the ';
				}
			}
			if($sex eq 'F') {
				$bio .= 'wife';
			} else {
				$bio .= 'husband';
			}
			$bio .= " of your $spouserelationship " .
				$spouse->as_string({ middle_names => 1, title => 1 });
			if($aob || $aod || $dateofbirth || $dateofbaptism || $placeofbirth || $placeofbaptism || $dateofmarriage) {
				$bio .= ',';
			}
			$haveprintedspousename = 1;
		} elsif(($mother || $father) && ($dateofbirth || $dateofbaptism || $placeofbirth || $placeofbaptism || $dateofmarriage) && !$printed_comma) {
			$bio .= ', ';
		}

		if(!$spouserelationship) {
			if($aob || $dateofbirth || $dateofbaptism || $placeofbirth || $placeofbaptism || scalar(@spouses)) {
				if($relationship) {
					$bio .= ' ';
				}
				if($firstname) {
					$bio .= $firstname;
				} else {
					$bio .= $pronoun;
				}
			}
		}

		if(my $aka = $person->as_string({ use_aka => 1 })) {
			$bio .= " (also known as $aka)";
		}

		my $end_of_sentence = 0;
		if($aob && $aod) {
			if($aob == $aod) {
				$bio .= " was born and died $aod years ago ";
			} else {
				$bio .= " was born $aob years and died $aod years ago ";
			}
			$bio .= ($opts{'t'} ? 'tomorrow' : 'today');
			$bio .= "[$_]" foreach(@birthcitations);
			$bio .= "[$_]" foreach(@deathcitations);
			$bio .= '. ';
			$end_of_sentence = 1;
		} elsif($aob) {
			$bio .= " was born $aob " . (($aob == 1) ? 'year' : 'years') . ' ago ' .
				($opts{'t'} ? 'tomorrow' : 'today');
			if($placeofbirth) {
				my $p = place({ person => $person, record => $birth, places_printed => \%places_printed });
				$bio .= $p;
				$places_printed{$p} = 1;
			}
			$bio .= "[$_]" foreach(@birthcitations);
			$bio .= '. ';
			$end_of_sentence = 1;
		} elsif($aod) {
			$bio .= " died $aod " . (($aod == 1) ? 'year' : 'years') . ' ago ' .
				($opts{'t'} ? 'tomorrow' : 'today');
			if($placeofdeath) {
				$bio .= place({ person => $person, record => $death, places_printed => \%places_printed });
			}
			$bio .= "[$_]" foreach(sort @deathcitations);
			if($death && (my $notes = notes({ person => $person, record => $death, paragraph => 0 }))) {
				$notes =~ s/\.$//;
				$notes = lcfirst($notes);
				$bio .= " ($notes)";
			}
			$bio .= '. ';
			$end_of_sentence = 1;
		}

		my @residences = $person->residence();

		if((!$aob) && ($dateofbirth || $dateofbaptism || $placeofbirth || $placeofbaptism)) {
			$bio .= " $pronoun" if($aob || $aod);
			if($dateofbirth || $placeofbirth) {
				$bio .= ',' if($print_sibling_count && (!$opts{'a'}) && (!$aob) && (!$aod) && !$opts{'p'});

				$bio .= ' was born';
				if($placeofbirth) {
					if($aod && $placeofdeath && ($placeofbirth eq $placeofdeath)) {
						$bio .= ' there';
					} else {
						$bio .= place({ person => $person, place => $placeofbirth, places_printed => \%places_printed });
					}
				}
				if($dateofbirth) {
					my $y = year({
						person => $person,
						date => $dateofbirth,
						must_predate => $death_dt
					});
					$bio .= " $y" if($y);
				}
				$bio .= "[$_]" foreach(@birthcitations);
				if($opts{'w'}) {
					if($mother && $yob && (my $mumdateofbirth = get_value({ person => $mother, value => 'birth date' }))) {
						if($mumdateofbirth =~ /.*?(\d{3,4})/) {
							$mumdateofbirth = $1;
							if(($yob - $mumdateofbirth) <= 13) {
								if($opts{'f'}) {
									die "something is wrong with the date of birth which is less than 13 years after the mother was born ($mumdateofbirth)";
								}
								red_warning({
									person => $person,
									warning => "something is wrong with the date of birth which is less than 13 years after the mother was born ($mumdateofbirth)"
								});
							} elsif(($yob - $mumdateofbirth) >= 52) {
								if($opts{'f'}) {
									die "something is wrong with the date of birth which is more than 52 years after the mother was born ($mumdateofbirth)";
								}
								red_warning({
									person => $person,
									warning => "something is wrong with the date of birth which is more than 52 years after the mother was born ($mumdateofbirth)"
								});
							}
						}
					}
					if($father && $yob && (my $daddateofbirth = get_value({ person => $father, value => 'birth date' }))) {
						if($daddateofbirth =~ /.*?(\d{3,4})/) {
							$daddateofbirth = $1;
							if(($yob - $daddateofbirth) <= 13) {
								if($opts{'f'}) {
									die "something is wrong with the date of birth which is less than 13 years after the father was born ($daddateofbirth)";
								}
								red_warning({
									person => $person,
									warning => "something is wrong with the date of birth which is less than 13 years after the father was born ($daddateofbirth)"
								});
							}
						}
					}
					if($death_dt || ($dateofdeath && ($dateofdeath =~ /^\d{3,4}$/))) {
						# TODO: Add more checking
						my $yod;
						if($death_dt) {
							$yod = $death_dt->year();
						} elsif($dateofdeath =~ /^(\d{3,4})$/) {
							$yod = $1;
						} else {
							die "BUG: Impossible case";
						}
						foreach my $bc(@birthcitations) {
							my $citation = $citations{$bc};
							my $title = $citation->title();
							if($title =~ /^(\d{3,4})\s/) {
								if($1 > $yod) {
									if($opts{'f'}) {
										die $person->as_string(),
											": Year of citation of $title is after the death year of $yod"
									}
									red_warning({
										person => $person,
										warning => "Year of citation of $title is after the death year of $yod"
									});
								}
							}
						}
					}
				}
				if($dateofbaptism || $placeofbaptism) {
					if(scalar(@spouses) && ($aod || $aob) && ($numberofchildren > 0) && !($opts{'a'} || $opts{'p'})) {
						$bio .= ', was';
					} else {
						$bio .= ' and';
					}
				} elsif($birth_dt) {
					my @twins;
					foreach my $s(@siblings) {
						if(my $dob = get_value({ person => $s, value => 'birth date' })) {
							if(($dob =~ /^\d/) && ($dob !~ /[a-z]$/i)) {
								my $d;
								eval {
									$d = $date_parser->parse(date => $dob);
								};
								if($d) {
									$d = @{$d}[0];
								}
								if($d) {
									$d = $dfn->parse_datetime($d->{'canonical'});
									if(($d == $birth_dt) || ($d == ($birth_dt - $oneday)) || ($d == ($birth_dt + $oneday))) {
										push @twins, { sibling => $s, dob => $d };
									}
								}
							}
						}
					}
					if(scalar(@twins) == 1) {	# TODO triplets and higher order
						my $t = pop(@twins);
						my $sibling = $t->{'sibling'};
						my $dob = $t->{'dob'};
						if($dob == $birth_dt) {
							$bio .= ', the same day as ';
						} elsif($dob == ($birth_dt + $oneday)) {
							$bio .= ', a day before ';
						} else {
							$bio .= ', a day after ';
						}
						$bio .= ($sex eq 'M' ? 'his' : 'her') . ' twin ' .
							(($sibling->sex() eq 'F') ? 'sister, ' : 'brother, ') .
							$sibling->given_names();
					}
				}
				$end_of_sentence = 0;
			}
			if($dateofbaptism || $placeofbaptism) {
				$bio .= ' ';
				unless($dateofbirth || $placeofbirth) {
					$bio .= 'was ';
				}
				if($ENV{'LANG'} =~ /^en_US/) {
					$bio .= 'baptized';
				} else {
					$bio .= 'baptised';
				}
				if($placeofbaptism) {
					if(($aod || $opts{'a'} || $opts{'p'}) && $placeofbirth && ($placeofbaptism eq $placeofbirth)) {
						$bio .= ' there';
						if(my $address = $baptism->address()) {
							if($address =~ /(.+),\s*$placeofbirth$/) {
								$address = $1;
							}
							$bio .= " at $address";
						}
					} else {
						my $p = place({ person => $person, place => $placeofbaptism });
						$bio .= $p;
						$places_printed{$p} = 1;
					}
				}
				if($dateofbaptism) {
					if($opts{'w'} && $yob && ($dateofbaptism =~ /(\d{3,4})$/)) {
						# must_predate doesn't work when only years are known
						if($1 < $yob) {
							if($opts{'f'}) {
								die $person->as_string(), ": Year of baptism $1 is before the year of birth $yob";
							}
							red_warning({
								person => $person,
								warning => "Year of baptism $1 is before the year of birth $yob"
							});
						}
					}
					$bio .= ' ' . year({
						person => $person,
						date => $dateofbaptism,
						must_postdate => $birth_dt,
						must_predate => $death_dt
					});
					if(!$death_dt) {
						must_predate({
							person => $person,
							date => $dateofbaptism,
							predate => $dateofdeath
						});
					}
					$bio .= print_sibling_baptism({
						person => $person,
						siblings => \@siblings,
						date => $dateofbaptism,
						birthdate => $dateofbirth,
					});
					if($mother && $opts{'w'}) {
						if($dateofbaptism =~ /.*?(\d{3,4})/) {
							my $yobaptism = $1;
							my $motherdob = get_value({ person => $mother, value => 'birth date' });
							if($motherdob) {
								my $d = $date_parser->parse(date => $motherdob);
								if($d && (ref($d) eq 'ARRAY')) {
									$d = @{$d}[0];
									if(defined($d) && !$d->{'flag'}) {
										$d = $dfn->parse_datetime($d->{'canonical'})->strftime('%Y');
										if($d > ($yobaptism - 13)) {
											if($opts{'f'}) {
												die "something is wrong with the date of baptism which is less than 13 years after the mother was born ($d)";
											}
											red_warning({
												person => $person,
												warning => "something is wrong with the date of baptism which is less than 13 years after the mother was born ($d)"
											});
										}
									}
								}
							}
						} else {
							if($opts{'f'}) {
								die $person->name(), ": invalid date of baptism $dateofbaptism\n";
							}
							warn $person->name(), ": invalid date of baptism $dateofbaptism\n";
							$warned{$person} = 1;
						}
					}
				}
				$end_of_sentence = 0;
			}
			if(scalar(@spouses) && ($aod || $aob) && ($numberofchildren > 0)) {
				$bio .= ' and';
			} else {
				$bio .= '. ';
				$end_of_sentence = 1;
			}
		} elsif($aob && ($dateofbaptism || $placeofbaptism)) {
			$bio .= " $pronoun was ";

			if($ENV{'LANG'} =~ /^en_US/) {
				$bio .= 'baptized';
			} else {
				$bio .= 'baptised';
			}
			if($placeofbaptism) {
				if($placeofbirth && ($placeofbaptism eq $placeofbirth)) {
					if($aod) {
						$bio .= ' in ' .
							lcfirst($person->possessive()) .
							' home town';
					} else {
						$bio .= ' there';
						if(my $address = $baptism->address()) {
							$bio .= " at $address";
						}
					}
				} else {
					my $opts = {
						person => $person,
						place => $placeofbaptism,
						places_printed => \%places_printed
					};
					my $address = $baptism->address();
					if($address) {
						$opts{'address'} = $address;
					}
					my $p = place($opts);
					$bio .= $p;
					$places_printed{$p} = 1;
				}
			}
			if($dateofbaptism) {
				$bio .= ' ' . year({
					person => $person,
					date => $dateofbaptism,
					must_postdate => $birth_dt,
					must_predate => $death_dt
				});
				$bio .= print_sibling_baptism({
					person => $person,
					siblings => \@siblings,
					date => $dateofbaptism,
					birthdate => $dateofbirth,
				});
			}
			if(scalar(@spouses)) {
				if(scalar(@residences)) {
					$bio .= ' and';
				} else {
					$bio .= ',';
				}
				$end_of_sentence = 0;
			} else {
				$bio .= '. ';
				$end_of_sentence = 1;
			}
		}

		my $all_children_are_alive = 1;

		if($yob && ($year >= $yob + 150)) {
			$all_children_are_alive = 0;
		} else {
			foreach my $child(@children) {
				if($child->get_record('death') || get_value({ person => $child, value => 'death date' })) {
					$all_children_are_alive = 0;
					last;
				}
				if($child->get_record('burial')) {
					$all_children_are_alive = 0;
					last;
				}
				my $dob = get_value({ person => $child, value => 'birth date' });
				if($dob) {
					if(($dob =~ /^\d{3,4}$/) && ($dob < ($year - 100))) {
						$all_children_are_alive = 0;
						last;
					}
					if(($dob =~ /^\d/) && ($dob !~ /[a-z]$/i)) {
						my $d;
						eval {
							$d = $date_parser->parse(date => $dob);
						};
						if($d) {
							$d = @{$d}[0];
						}
						if($d) {
							$d = $dfn->parse_datetime($d->{'canonical'});
							if($d->strftime('%Y') < ($year - 120)) {
								$all_children_are_alive = 0;
								last;
							}
						}
					}
				}
			}
		}
		my @childrenunknownparent;
		# TODO: children != 0 && spouses == 0
		if(scalar(@spouses) &&
		   ((!$spouserelationship) || $placeofmarriage || $dateofmarriage)) {
			$bio .= " $pronoun" if($end_of_sentence);

			if(scalar(@spouses) == 1) {
				if($placeofmarriage || $dateofmarriage) {
					if(($numberofchildren == 0) && (scalar(@residences) == 0) && (!($aob || $opts{'p'} || $opts{'G'} || $opts{'B'})) && !$all_children_are_alive) {
						$bio .= ' and';
					}
					$bio .= ' married ';
				} elsif(is_alive(person => $person) && is_alive(person => $spouses[0])) {
					$bio .= ' is married to ';
				} else {
					$bio .= ' was married to ';
				}
				if($haveprintedspousename) {
					$nameparser->parse($spouses[0]->name());

					my %name_components = $nameparser->components();
					$bio .= $name_components{'given_name_1'};
				} else {
					$bio .= $spouses[0]->as_string();
					$haveprintedspousename = 1;
				}
				my $parentheses = 0;
				if($numberofchildren) {
					# if((!$placeofmarriage) && !$dateofmarriage) {
						# $bio .= ', ';
					# }
					if(my $soccupation = $spouses[0]->occupation()) {
						$bio .= ' (';
						$parentheses = 1;
						if(ref($soccupation) eq 'Gedcom::Record') {
							my @items = $soccupation->items();
							$soccupation = $items[0]->value();
						}
						if($soccupation =~ /^self-employed$/i) {
							$bio .= 'self-employed ';
						} else {
							$bio .= 'a';
							if($soccupation =~ /^[aeiou]/i) {
								$bio .= 'n';
							}
							$bio .= ' ' . lc($soccupation) . ' ';
						}
					}
					my @childrenofthisspouse;
					my $numberofchildrenwiththisspouse = $numberofchildren;
					my $spouse = $spouses[0];
					foreach my $child(@children) {
						if($sex eq 'F') {
							# Check through all possible fathers, since there could be a biologial and
							# and adoptive one listed
							# FIXME: this assumes that the spouse is the biological father, which is not
							#	a good assumption to make
							my @candidates = $child->father();
							my $father;
							foreach (@candidates) {
								if($_ eq $spouse) {
									$father = $_;
									last;
								}
								print "!!!!!", $child->as_string(), "/", $_->as_string(), "\n";
							}
							if((!defined($father)) || ($father ne $spouse)) {
								push @childrenunknownparent, $child;
								$numberofchildrenwiththisspouse--;
							} else {
								push @childrenofthisspouse, $child;
							}
						} else {
							my $mother = $child->mother();
							if((!defined($mother)) || ($mother ne $spouse)) {
								push @childrenunknownparent, $child;
								$numberofchildrenwiththisspouse--;
							} else {
								push @childrenofthisspouse, $child;
							}
						}
					}
					if(scalar(@childrenunknownparent) < $numberofchildren) {
						if(!$parentheses) {
							$bio .= ' (';
							$parentheses = 1;
						}
						$bio .= 'with whom ' . lcfirst($pronoun);
						if((!$all_children_are_alive) || (!$opts{'l'}) || ($yob && ($year > $yob + 100))) {
							$bio .= ' had ';
						} elsif((!$dateofdeath) && (!$dateofburial) && ($spouses[0]) && !$spouses[0]->death()) {
							$bio .= ' has had ';
						} else {
							$bio .= $dateofdeath || $dateofburial ? ' had ' : ' has ';
						}

						if($numberofchildrenwiththisspouse == 1) {
							if($all_children_are_alive) {
								$bio .= '1 surviving child, ';
							} else {
								$bio .= '1 child, ';
							}
						} else {
							if($all_children_are_alive) {
								$bio .= "$numberofchildrenwiththisspouse surviving children: ";
							} else {
								$bio .= "$numberofchildrenwiththisspouse children: ";
							}
						}
						if($numberofchildrenwiththisspouse == 1) {
							$bio .= $children[0]->given_names();
						} elsif($numberofchildrenwiththisspouse > 1) {
							# my $childnames = join(', ', map { $_->given_names() } @children);
							# substr($childnames, rindex($childnames, ', '), 2, ' and ');
							# print $childnames;
							$bio .= Lingua::EN::Inflect::WORDLIST((map { $_->given_names() } @childrenofthisspouse), {final_sep => ''});
						}
					}
				} else {
					my @spouse_occupations = $spouses[0]->get_value('occupation');
					if($spouse_occupations[0]) {
						$bio .= ' (a ' . lc($spouse_occupations[0]);
						$parentheses = 1;
					}
				}
				if($parentheses) {
					$bio .= ')';
				} elsif(($dateofmarriage || $placeofmarriage) && $numberofchildren) {
					$bio .= ',';
				}
				if($placeofmarriage && $dateofmarriage &&
				   (($placeofbaptism and ($placeofmarriage eq $placeofbaptism)) ||
				    ($aod && $placeofbirth && ($placeofmarriage eq $placeofbirth)))) {
					$bio .= ' there ' .
						year(person => $person, string => $dateofmarriage, must_postdate => $birth_dt, must_predate => $death_dt);
				} else {
					$bio .= ' ' . year(person => $person, string => $dateofmarriage, must_postdate => $birth_dt, must_predate => $death_dt) if($dateofmarriage);
					if($placeofmarriage) {
						my $args = {
							place => $placeofmarriage,
							person => $person,
							places_printed => \%places_printed
						};
						if($marriage && (my $address = $marriage->address())) {
							$args->{'address'} = $address;
						}
						my $p = place($args);
						$bio .= $p;
						$places_printed{$p} = 1;
					}
				}
				$bio .= "[$marriagecitation]" if($marriagecitation);
			} else {
				$bio .= ' was married ';
				if(scalar(@spouses) == 2) {
					$bio .= 'twice';
				} else {
					$bio .= scalar(@spouses) . ' times';
				}
				my $all_marriages_have_date = 1;
				foreach my $spouse(@spouses) {
					my $date = get_value({ person => $spouse, value => 'marriage date' });
					if(!defined($date)) {
						if(my $marriage = ($spouse->get_record('marriage') || $spouse->get_record('fams marriage'))) {
							$date = $marriage->date();
						}
					}
					if(!date_to_datetime($date)) {
						$all_marriages_have_date = 0;
						last;
					}
				}
				if($all_marriages_have_date) {
					@spouses = Sort::Key::DateTime::dtkeysort {
						my $date;
						if(my $rec = $_->get_record('fams marriage')) {
							$date = $rec->date();
						}
						if((!defined($date)) && (my $rec = $_->get_record('marriage'))) {
							$date = $rec->date();
						}
						date_to_datetime(date => $date);
					} @spouses;
				}
				my $names;
				my $spousenumber = 0;
				my $previousplace;
				foreach my $spouse(@spouses) {
					# $names .= ', ' if($names);
					$names .= $spouse->as_string();
					my $dateofmarriage = get_value({ person => $spouse, value => 'marriage date' });
					if(!defined($dateofmarriage)) {
						if(my $marriage = ($spouse->get_record('marriage') || $spouse->get_record('fams marriage'))) {
							$dateofmarriage = $marriage->date();
						}
					}
					my $placeofmarriage = get_value({ person => $spouse, value => 'marriage place' });
					if(!defined($placeofmarriage)) {
						my $marriage = $spouse->get_record('marriage') || $spouse->get_record('fams marriage');
						if($marriage) {
							$placeofmarriage = $marriage->place();
						}
					}
					if($placeofmarriage) {
						$placeofmarriage = place({ person => $spouse, place => $placeofmarriage, places_printed => \%places_printed });
						if($previousplace && ($placeofmarriage eq $previousplace)) {
							if($placeofmarriage =~ /^(.+?),/) {
								$placeofmarriage = " also$1";
							}
						} else {
							$previousplace = $placeofmarriage;
						}
					}

					if($dateofmarriage && $placeofmarriage) {
						$names .= ' (' . year({ string => $dateofmarriage }) .
							"$placeofmarriage)";
					} elsif($placeofmarriage) {
						$names .= " ($placeofmarriage)";
					} elsif($dateofmarriage) {
						$names .= ' (' . year({ string => $dateofmarriage }) . ')';
					}
					$spousenumber++;
					if($spousenumber == (scalar(@spouses) - 1)) {
						$names .= ' and ';
					} elsif($spousenumber < (scalar(@spouses) - 1)) {
						$names .= ', ';
					}
				}
				# substr($names, rindex($names, ', '), 2, ' and ');
				$bio .= ", to $names";
				$bio .= "[$marriagecitation]" if($marriagecitation);

				# Determine if all the children are from one marriage, since that's
				# easier to print.
				# FIXME:  handle where offspring are from more than one marriage
				if($numberofchildren) {
					my %childrenbyspouse;
					my $childrenseen = 0;
					my $unknown;
					foreach my $family ($person->fams()) {
						if($family->number_of_children() &&
						   ($spouse = ($sex eq 'M') ? $family->wife() : $family->husband())) {
							foreach my $child($person->children()) {
								$unknown = $child;
								foreach my $spouseschild($spouse->children()) {
									if($spouseschild eq $child) {
										$childrenbyspouse{$spouse}++;
										$childrenseen++;
										$unknown = undef;
										last;
									}
								}
							}
						}
					}
					my $parentofall;
					if($childrenseen < $numberofchildren) {
						# Unable to find the parent of all of the children.  This
						# may be the case where someone married more than once,
						# and has a child by a 3rd unknown (or unfound) person
						if($opts{'w'}) {
							if($opts{'f'}) {
								die $person->as_string() . ': one of the parents of ' . ($numberofchildren - $childrenseen) . ' children is not known';
							}
							if(($numberofchildren - $childrenseen) == 1) {
								if($unknown) {
									red_warning({ person => $person, warning => 'One of the parents of ' . $unknown->as_string() . ' is not known'});
								} else {
									red_warning({ person => $person, warning => 'One of the parents of 1 child is not known'});
								}
							} else {
								red_warning({ person => $person, warning => 'One of the parents of ' . ($numberofchildren - $childrenseen) . ' children is not known'});
							}
						}
					} else {
						foreach my $spouse(@spouses) {
							if($parentofall && $childrenbyspouse{$spouse}) {
								$parentofall = undef;
								last;
							}
							if($childrenbyspouse{$spouse}) {
								$parentofall = $spouse;
							}
						}
					}
					$bio .= ".  $pronoun " .
						($all_children_are_alive ? 'has ' : 'had ');
					if($numberofchildren == 1) {
						if($all_children_are_alive) {
							$bio .= '1 surviving child';
						} else {
							$bio .= '1 child';
						}
						if($childrenseen >= $numberofchildren) {
							if($parentofall) {
								$bio .= ' with ' . $parentofall->as_string();
							} else {
								if($opts{'f'}) {
									die $person->as_string(), ': BUG: parentofall not set when only one child';
								} else {
									red_warning({ person => $person, warning => 'BUG: parentofall not set when only one child' });
								}
							}
						} else {
							$bio .= ' with an unknown ' . (($sex eq 'M') ? 'mother' : 'father');
						}
						$bio .= ', ' . $children[0]->given_names();
					} else {
						if($all_children_are_alive) {
							$bio .= "$numberofchildren surviving children";
						} else {
							$bio .= "$numberofchildren children";
						}
						my $childnames;
						if($parentofall) {
							if($numberofchildren == 2) {
								$bio .= ', both with ' . $parentofall->as_string();
							} else {
								$bio .= ', all with ' . $parentofall->as_string();
							}
							$childnames = join(', ', map { $_->given_names() } @children);
						} elsif($sex eq 'M') {
							# FIXME: children from the same parent should be listed together
							$childnames = join(', ', map { $_->given_names() . ($_->mother() ? (' (with ' . $_->mother()->given_names() . ')') : '') } @children);
						} else {
							$childnames = join(', ', map { $_->given_names() . ($_->father() ? (' (with ' . $_->father()->given_names() . ')') : '') } @children);
						}
						substr($childnames, rindex($childnames, ', '), 2, ' and ');
						$bio .= ": $childnames";
					}
				}
			}
			$end_of_sentence = 0;
		} elsif($numberofchildren) {
			if($end_of_sentence) {
				$bio .= " $pronoun";
			}
			$bio .= ' had ' .
				(($numberofchildren == 1) ? '1 child, ' : "$numberofchildren children, ");
			if($numberofchildren == 1) {
				$bio .= $children[0]->given_names();
			} else {
				my $childnames = join(', ', map { $_->given_names() } @children);
				substr($childnames, rindex($childnames, ', '), 2, ' and ');
				$bio .= $childnames;
			}
			$end_of_sentence = 0;
		}

		if(scalar(@childrenunknownparent)) {
			$bio .= '.  ' if(!$end_of_sentence);
			$bio .= "$pronoun ";
			if(scalar(@children) > scalar(@childrenunknownparent)) {
				$bio .= 'also ';
			}
			$bio .= 'had ' . scalar(@childrenunknownparent) . ' ';
			if(scalar(@childrenunknownparent) == 1) {
				$bio .= 'child, ';
			} else {
				$bio .= 'children, ';
			}
			$bio .= Lingua::EN::Inflect::WORDLIST((map { $_->given_names() } @childrenunknownparent), {final_sep => ''}) .
				', whose ' .
				(($sex eq 'F') ? 'father' : 'mother') .
				' is unknown';
			$end_of_sentence = 0;
		}

		if($same_occupation_as_father) {
			$bio .= '. ' if(!$end_of_sentence);
			$bio .= ' Like his father, ' . lcfirst($pronoun) .
				(is_alive(person => $person) ? ' is a' : ' was a');
			if($same_occupation_as_father =~ /^[aeiou]/i) {
				$bio .= 'n';
			}
			$bio .= ' ' . lc($same_occupation_as_father) . '. ';
			$end_of_sentence = 1;
		}

		my $printed_residence = 0;
		my %citationnotes;

		# FMP stores Censuses as events
		my $index = 0;
		foreach my $event(@events) {
			$index++;
			if(!ref($event)) {
				my $e = $person->tag_record('EVEN', $index);
				if(ref($e) eq 'Gedcom::Record') {
					$event = $e;
				} else {
					red_warning({ person => $person, warning => "Event record is just description ($event), infomation has been lost" });
				}
			}
			if(ref($event) eq 'Gedcom::Record') {
				my $type = $event->type();
				if(!defined($type)) {
					red_warning({ person => $person, warning => "Can't determine type of event, or the event type is empty" });
					next;
				}

				if(($type =~ /^Census U[KS] (\d{4})$/) || ($type eq 'Register UK 1939')) {
					my $newresidence = 1;
					foreach my $residence(@residences) {
						if(!ref($residence)) {
							my $r = $person->tag_record('EVEN', $index);
							if(ref($r) eq 'Gedcom::Record') {
								$residence = $r;
							} else {
								$r = $person->record(['residence', $index]);
								if(ref($r) eq 'Gedcom::Record') {
									$residence = $r;
								} else {
									next;	# Will warn below
								}
							}
						}
						if((ref($residence) eq 'Gedcom::Record') &&
						  $residence->date() &&
						  $event->date() &&
						  $residence->date() eq $event->date()) {
							$newresidence = 0;
							last;
						}
					}
					if(!$dateofbirth) {
						if($opts{'f'}) {
							die $person->as_string(), ': census information not used to approximate a date of birth';
						}
						red_warning({ person => $person, warning => 'Census information not used to approximate a date of birth' });
					}
					push @residences, $event if($newresidence);
				} elsif($type eq 'Hospitalisation') {	# Find My Past
					push @residences, $event;
				}
			}
		}

		if(scalar(@residences)) {
			# FIXME, handle duplicate locations better
			my @residencelist;
			my %residencecitations;

			# This is an attempt to handle
			# https://github.com/pjcj/Gedcom.pm/issues/13
			my $index = 0;
			foreach my $residence(@residences) {
				$index++;
				if(!ref($residence)) {
					my $r = $person->tag_record('EVEN', $index);
					if(ref($r) eq 'Gedcom::Record') {
						$residence = $r;
					} else {
						$r = $person->record(['residence', $index]);
						if(ref($r) eq 'Gedcom::Record') {
							$residence = $r;
						} else {
							red_warning({ person => $person, warning => "Residence record is just description ($residence), infomation has been lost" });
						}
					}
				}
				if(ref($residence) eq 'Gedcom::Record') {
					my $place = $residence->place();
					if(my $address = $residence->address()) {
						if(ref($address) eq 'Gedcom::Record') {
							$place = getaddress($address);
						} elsif($place) {
							$place = "$address, $place";
						} elsif($opts{'f'}) {
							die $person->string(), ": address set to $address but place is empty";
						} else {
							red_warning({
								person => $person,
								warning => "address set to $address but place is empty"
							});
						}
					}
					if(defined($place)) {
						if(my $dor = $residence->date()) {
							if($placeofbirth && $dob && ($dor eq $dob)) {
								next;
							}
							if($placeofmarriage && $dateofmarriage && ($dor eq $dateofmarriage)) {
								next;
							}
						}
						push @residencelist, $residence;
						if(my $src = $residence->source()) {
							$src = get_source({ gedcom => $ged, person => $person, source => $src}) unless ref($src);
							my $note = notes(record => $residence);
							foreach my $c(@birthcitations) {
								if($src eq $citations{$c}) {
									$residencecitations{$residence} = $c;
									if($note) {
										$citationnotes{$c} = $note;
									}
									last;
								}
							}
							unless($residencecitations{$residence}) {
								if($deathcitations[0] && ($src eq $citations{$deathcitations[0]})) {
									$residencecitations{$residence} = $deathcitations[0];
									if($note) {
										$citationnotes{$deathcitations[0]} = $note;
									}
								} else {
									$residencecitations{$residence} = ++$citationcount;
									$citations{$citationcount} = $src;
									if($note) {
										$citationnotes{$citationcount} = $note;
									}
								}
							}
						}
					} elsif(my $dor = $residence->date()) {
						if(my $type = $residence->type()) {
							if($type ne 'Military service') {
								red_warning({ person => $person, warning => "Residence record for $dor contains no location" });
							}
						}
					} else {
						red_warning({ person => $person, warning => 'Residence record contains no location' });
					}
				}
			}

			# TODO: See RT110333

			# Sort residences chronologically
			# FIXME: This messes citations
			my $all_residences_have_date = 1;
			foreach my $residence(@residencelist) {
				my $date = $residence->date();
				if(!$date) {
					if($opts{'f'}) {
						die $person->name(), ': Contains a residence without a date';
					}
					red_warning({ person => $person, warning => 'Contains a residence' . place(record => $residence) . ' without a date' });
					$all_residences_have_date = 0;
					last;
				}
				$date = $date_parser->parse(date => $date);
				if(!defined($date)) {
					if($opts{'f'}) {
						die $person->name(), ": Can't parse date '$date'";
					}
					red_warning({ person => $person, warning => "Can't parse date '$date'" });
					$all_residences_have_date = 0;
					last;
				}
				if(scalar(@{$date}) == 0) {
					# e.g. "Apr/May/Jun 2016"
					$all_residences_have_date = 0;
					last;
				}
			}
			if($all_residences_have_date) {
				@residencelist = Sort::Key::DateTime::dtkeysort { $dfn->parse_datetime(@{$date_parser->parse(date => $_->date())}[0]->{'canonical'}) } @residencelist;
			}
			my $count = 0;
			my $have_printed = 0;
			my $prev_date;
			my $spdeath_dt;
			if($spouses[0]) {
				$spdeath_dt = date_to_datetime(date => get_value({ person => $spouses[0], value => 'death date' }));
			}
			my $print_year_only;
			foreach my $residence(@residencelist) {
				my $rdate = $residence->date();
				if(($count == 0) || !places_are_the_same({ person => $person, first => $residence, second => $residencelist[$count - 1] })) {
					if($birth && $dob && $rdate && ($rdate eq $dob) &&
					   places_are_the_same({ person => $person, first => $birth, second => $residence})) {
						# This residence record is for the place of birth, which is
						# printed elsewhere
						$count++;
						next;
					}
					if(!$have_printed) {
						$bio .= '. ' unless($end_of_sentence);
						if((scalar(@residencelist) == 1) && $rdate) {
							$bio .= ' ' . ucfirst(year({ person => $person, date => $rdate, circa => 'About' })) .
								', ' . lcfirst($pronoun) . ' was living';
						} else {
							if($opts{'B'}) {
								if(!pdfprint(string => $bio, text => $text, pdfpage => $pdfpage)) {
									$text->textend();

									$pdfpage = PDFPage->new();

									$text = $pdfpage->page()->text();
									$text->textstart();
									$text->font($params{'font'}, 12);
									pdfprint(string => $bio, text => $text, pdfpage => $pdfpage);
								}
								$bio = '';
							} else {
								$bio .= "\n\t";
							}
							$bio .= 'During ' .
								lc($person->possessive()) .
								' life, ' . lcfirst($pronoun) . ' was living';
						}
						$have_printed = 1;
					}
					if($birth && places_are_the_same({ person => $person, first => $birth, second => $residence})) {
						$bio .= ' at ' . ($person->pronoun() eq 'She' ? 'her' : 'his')
								. ' birthplace';
					} else {
						my $p = place({
							person => $person,
							record => $residence,
							places_printed => \%places_printed
						});
						if($residence->type() && ($residence->type() eq 'Hospitalisation')) {
							$bio .= ' in hospital';
						}

						$bio .= $p;
						$places_printed{$p} = 1;
					}
				}
				# Citation residence notes print later
				if($rdate) {	# residence has a date?
					if($opts{'w'} && ($rdate =~ /(\d{3,4})$/)) {
						my $yoe = $1;
						if($yod) {
							if($yoe > $yod) {
								if($opts{'f'}) {
									die $person->as_string(), ": Year of residence $yoe is after the year of death $yod";
								}
								red_warning({
									person => $person,
									warning => "Year of residence $yoe is after the year of death $yod"
								});
							} elsif($death_dt && (my $rdate_dt = date_to_datetime($rdate))) {
								if($rdate_dt > $death_dt) {
									if($opts{'f'}) {
										die $person->as_string(), ": Date of residence $rdate is after date of death ", $death_dt->strftime('x');
									}
									red_warning({
										person => $person,
										warning => "Date of residence $rdate is after date of death " . $death_dt->strftime('x')
									});
								}
							}
						}
						if($yob && (($yoe - $yob) <= 10)) {
							my $found_parent = 0;
							if($mother) {
								my @mr = $mother->residence();
								my @me = $mother->event();
								my $index = 0;
								foreach my $event(@me) {
									$index++;
									if(!ref($event)) {
										my $e = $mother->tag_record('EVEN', $index);
										if(ref($e) eq 'Gedcom::Record') {
											$event = $e;
										} else {
											next;
										}
									}
									if(ref($event) eq 'Gedcom::Record') {
										my $type = $event->type();
										if(!defined($type)) {
											next;
										}

										if(($type =~ /^Census U[KS] (\d{4})$/) || ($type eq 'Register UK 1939')) {
											push @mr, $event;
										}
									}
								}
								$index = 0;
								foreach my $residence(@mr) {
									$index++;
									if(ref($residence) ne 'Gedcom::Record') {
										$residence = $person->record(['residence', $index]);
									}
									if(ref($residence) eq 'Gedcom::Record') {
										my $date = $residence->date();
										if($date =~ /(\d{3,4})$/) {
											if($1 == $yoe) {
												$found_parent = $residence;
												last;
											}
										}
									}
								}
							}
							if($father && !$found_parent) {
								my @fr = $father->residence();
								my @fe = $father->event();
								my $index = 0;
								foreach my $event(@fe) {
									$index++;
									if(!ref($event)) {
										my $e = $father->tag_record('EVEN', $index);
										if(ref($e) eq 'Gedcom::Record') {
											$event = $e;
										} else {
											next;
										}
									}
									if(ref($event) eq 'Gedcom::Record') {
										my $type = $event->type();
										if(!defined($type)) {
											next;
										}

										if(($type =~ /^Census U[KS] (\d{4})$/) || ($type eq 'Register UK 1939')) {
											push @fr, $event;
										}
									}
								}
								$index = 0;
								foreach my $residence(@fr) {
									$index++;
									if(ref($residence) ne 'Gedcom::Record') {
										$residence = $person->record(['residence', $index]);
									}
									if(ref($residence) eq 'Gedcom::Record') {
										my $date = $residence->date();
										if(defined($date) && ($date =~ /(\d{3,4})$/)) {
											if($1 == $yoe) {
												$found_parent = $residence;
												last;
											}
										}
									}
								}
							}
							if(($father || $mother) && !$found_parent) {
								# FIXME: both parents could be dead
								if($opts{'f'}) {
									die $person->name(), "Residence information in $yoe, but no residence information found for either parent";
								}
								red_warning({ person => $person, warning => "Residence information in $yoe, but no residence information found for either parent" });
							}	# TODO: else warn if both parents locations are different
						}
					}
					if(scalar(@residencelist) > 1) {
						my $this_date = year({ person => $person, date => $rdate });
						if($prev_date && ($prev_date eq $this_date)) {
							if($opts{'f'}) {
								die $person->name(), "Two residence records for $rdate";
							}
							red_warning({ person => $person, warning => "Two residence records for $rdate" });
						}
						if($print_year_only) {
							if($count == (scalar(@residencelist) - 1)) {
								$bio .= $rdate;
								# $print_year_only = 0;
							}
						} else {
							$bio .= " $this_date";
						}
						$prev_date = $this_date;
					}
					# Find if they are an adult living with an adult sibling
					if(scalar(@siblings) && $birth_dt && $residence->address()) {
						my $diff = $dfn->parse_datetime($rdate) - $birth_dt;
						if($diff->in_units('years') >= 40) {
							# Safe to assume both are adults at this time
							foreach my $sibling(@siblings) {
								my @srs = $sibling->residence();
								foreach my $sr(@srs) {
									if((ref($sr) eq 'Gedcom::Record') &&
									   $sr->date() && ($sr->date() eq $rdate) &&
									   places_are_the_same({ person => $sibling, first => $residence, second => $sr })) {
										$bio .= ' when ' . lcfirst($person->pronoun()) .
											' was living with ' .
											lcfirst($person->possessive()) .
											(($sibling->sex() eq 'F') ? ' sister, ' : ' brother, ') .
											$sibling->given_names();
									}
								}
							}
						}
					}
					if($spdeath_dt && (my $rdate_dt = date_to_datetime($rdate))) {
						if($rdate_dt > $spdeath_dt) {
							$bio .= ' following the death of ' .
								($person->pronoun() eq 'She' ? 'her' : 'his') .
								(($sex eq 'M') ? ' wife ' : ' husband ') .
								year(date => get_value({ person => $spouses[0], value => 'death date' }));
							$spdeath_dt = undef;
						}
					}
					if($spdeath_dt && (my $rdate_dt = date_to_datetime($rdate))) {
						if($rdate_dt > $spdeath_dt) {
							# Living with a child following death of spouse?
							CHILD: foreach my $child(@children) {
								my @cevents = $child->event();
								my $index = 0;
								EVENT: foreach my $event(@cevents) {
									$index++;
									if(!ref($event)) {
										my $e = $child->tag_record('EVEN', $index);
										if(ref($e) eq 'Gedcom::Record') {
											$event = $e;
										} else {
											# red_warning({ person => $child, warning => "Event record is just description ($event), infomation has been lost" });
											next EVENT;
										}
									}
									my $type = $event->type();

									if(($type !~ /^Census U[KS] (\d{4})$/) && ($type ne 'Register UK 1939')) {
										next EVENT;
									}
									if((ref($event) eq 'Gedcom::Record') &&
									   $event->date() && ($event->date() eq $rdate) &&
									   places_are_the_same({ person => $child, first => $residence, second => $event })) {
										$bio .= ' when ' .
											lcfirst($person->pronoun()) .
											' was living with ' .
											lcfirst($person->possessive()) .
											(($child->sex() eq 'F') ? ' daughter ' : ' son ') .
											$child->given_names() .
											' following the death of ' .
											(($sex eq 'M') ? 'his wife ' : 'her husband ') .
											year(date => get_value({ person => $spouses[0], value => 'death date' }));
										$spdeath_dt = undef;
										last CHILD;
									}
								}
							}
						}
					}
				}
				if((!($opts{'c'} && $residence->source())) && (my $notes = notes({ record => $residence }))) {
					$notes =~ s/\.$//;
					$notes = lcfirst($notes);
					$bio .= " ($notes)";
				} elsif($opts{'c'}) {
					if($residencecitations{$residence}) {
						$bio .= '[' . $residencecitations{$residence} . ']';
					}
					if($residence->place() &&
					  (!$rdate) &&
					  ($count <= (scalar(@residencelist) - 1)) &&
					  ($residencecitations{$residence})) {
						my $peek = $residencelist[$count + 1];
						if($peek && places_are_the_same({ person => $person, first => $residence, second => $peek })) {
							if($residencecitations{$peek}) {
								$bio .= '[' . $residencecitations{$peek} . ']';
							}
						}
					}
				}
				$count++;
				if(($count == 1) && (scalar(@residencelist) == 2)) {
					if($print_year_only) {
						$bio .= $rdate;
						$print_year_only = 0;
					}
					$bio .= ' and';
				} else {
					my $peek = $residencelist[$count];
					if($peek && places_are_the_same({ person => $person, first => $residence, second => $peek })) {
						$peek = $residencelist[$count + 1];
						if($peek && places_are_the_same({ person => $person, first => $residence, second => $peek })) {
							if((!$opts{'c'}) && $rdate && ($rdate =~ /^\d{4}$/) && $peek->date() && ($peek->date() =~ /^\d{4}$/)) {
								if(!$print_year_only) {
									$bio .= '-';
									$print_year_only = 1;
								}
							} else {
								if($print_year_only && $rdate) {
									$bio .= $rdate;
									$print_year_only = 0;
								}
								$bio .= ',';
							}
						} elsif(!$print_year_only) {
							$bio .= ' and';
						}
					} elsif($count == (scalar(@residencelist) - 1)) {
						if($print_year_only) {
							$bio .= $rdate;
							$print_year_only = 0;
						}
						$bio .= '; and';
					} elsif($count < (scalar(@residencelist) - 1)) {
						if($print_year_only) {
							$bio .= $rdate;
							$print_year_only = 0;
						}
						$bio .= ';';
					}
				}
				$printed_residence = 1;
			}

			if($printed_residence) {
				$bio .= '. ';
				$end_of_sentence = 1;
			}
		}

		my $all_events_have_date = 1;
		foreach my $event(@events) {
			if((ref($event) ne 'Gedcom::Record') || !$event->date()) {
				$all_events_have_date = 0;
				last;
			}
			my $date = $event->date();
			if(($date !~ /^\d/) || ($date =~ /[a-z]$/i) ||
			   ($date =~ /[\/\-]/) || !date_parser_cached(date => $date)) {
				$all_events_have_date = 0;
				last;
			}
			if(!date_parser_cached(date => $date)) {
				if($opts{'f'}) {
					die $person->as_string(),
						": Event has an invalid date of $date";
				}
				if($opts{'w'}) {
					red_warning({
						person => $person,
						warning => "Event has an invalid date of $date"
					});
				}
				$all_events_have_date = 0;
				last;
			}
		}
		if($all_events_have_date) {
			@events = Sort::Key::DateTime::dtkeysort { $dfn->parse_datetime(@{$date_parser->parse(date => $_->date())}[0]->{'canonical'}) } @events;
		}
		if((scalar(@events) == 2) &&
		   (ref($events[0]) eq 'Gedcom::Record') &&
		   (ref($events[1]) eq 'Gedcom::Record') &&
		   ((($events[0]->type() eq 'Arrival') && ($events[1]->type() eq 'Departure')) ||
		    (($events[1]->type() eq 'Arrival') && ($events[0]->type() eq 'Departure')))) {
			# Simple case - one journey made
			$bio .= '. ' if(!$end_of_sentence);

			my $arrival = ($events[0]->type() eq 'Arrival') ? $events[0] : $events[1];
			my $departure = ($events[0]->type() eq 'Departure') ? $events[0] : $events[1];
			my $yod;
			my $yoa;
			my $dod = $departure->date();
			my $doa = $arrival->date();
			my $only_have_departure_year;
			if($doa && $dod && ($doa =~ /(\d{3,4})/)) {
				$yoa = $1;
				$doa =~ s/\s?\d{3,4}//;
				if($dod =~ /(\d{3,4})/) {
					$yod = $1;
					$dod =~ s/\s?\d{3,4}//;
					if($dod =~ /^\d/) {
						$dod = "on $dod";
					} else {
						$dod = "during $yod";
						$only_have_departure_year = 1;
					}
					if($doa =~ /^\d/) {
						$doa = "on $doa";
					} else {
						$doa = "during $doa";
					}
				}
			}
			if($departure || !$doa) {
				if($yod && $yoa && ($yod == $yoa)) {
					$bio .= "During $yod " . lc($person->pronoun());
				} else {
					$bio .= $person->pronoun();

					# $yod = year({ person => $person, record => $departure });
					# $yoa = year({ person => $person, record => $arrival });
				}

				if($ENV{'LANG'} =~ /^en_US/) {
					$bio .= ' traveled';
				} else {
					$bio .= ' travelled';
				}

				if(defined($departure->place())) {
					$bio .= ' from ' .  $departure->place();
				} else {
					if($opts{'f'}) {
						die $person->as_string() . ': departure record has no location';
					}
					if($opts{'w'}) {
						red_warning({ person => $person, warning => 'Departure record has no location' });
					}
				}
				if(defined($arrival->place())) {
					$bio .= ' to ' .  $arrival->place();
				} else {
					if($opts{'f'}) {
						die $person->as_string() . ': arrival record has no location';
					}
					if($opts{'w'}) {
						red_warning({ person => $person, warning => 'Arrival record has no location' });
					}
				}

				if(defined($dod) && !$only_have_departure_year) {
					$bio .= ", departing $dod and";
				}

				$bio .= " arriving $doa. ";
			} else {
				$bio .= ucfirst(year({ person => $person, record => $arrival })) .
					' ' . lcfirst($person->pronoun()) .
					' arrived' .
					place({ person => $person, record => $arrival }) . '. ';
			}
			$end_of_sentence = 1;
		} elsif(scalar(@events) == 1) {
			$bio .= '. ' if(!$end_of_sentence);
			$end_of_sentence = 1;

			my $event = $person->event();
			if(!ref($event)) {
				my $e = $person->tag_record('EVEN');
				if(ref($e) eq 'Gedcom::Record') {
					$event = $e;
				} else {
					red_warning({ person => $person, warning => "Event record is just description ($event), infomation has been lost" });
					$bio .= ' ' . ucfirst($event) . '. ';
				}
			}
			if(ref($event) eq 'Gedcom::Record') {
				my $type = $event->type();
				if(!defined($type)) {
					red_warning({ person => $person, warning => "Can't determine type of event, or the event type is empty" });
				} elsif($type eq 'Arrival') {
					$bio .= ' ' . $person->pronoun() . ' arrived';
					if(my $p = place({ person => $person, record => $events[0] })) {
						$bio .= $p;
					} else {
						if($opts{'f'}) {
							die $person->as_string() . ": arrival record with no place";
						}
						if($opts{'w'}) {
							red_warning({ person => $person, warning => "Arrival record has no place" });
						}
					}
					if(my $y = year({ person => $person, record => $events[0] })) {
						$bio .= " $y";
					} else {
						if($opts{'f'}) {
							die $person->as_string() . ": arrival record with no date";
						}
						if($opts{'w'}) {
							red_warning({ person => $person, warning => "Arrival record has no date" });
						}
					}
					if(my $spouse = $person->spouse()) {
						foreach my $sevent($spouse->event()) {
							if(ref($sevent) eq 'Gedcom::Record') {
								my $type = $event->type();
								if(!defined($type)) {
									red_warning({ person => $spouse, warning => "Can't determine type of event, or the event type is empty" });
								} elsif($sevent->place() && ($type eq 'Arrival') &&
								   $event->date() && $sevent->date() &&
								   ($event->date() eq $sevent->date()) &&
								   ($event->place() eq $sevent->place())) {
									$bio .= ' with ' .
										lcfirst($person->possessive()) . ' ' .
										(($sex eq 'M') ? 'wife' : 'husband') .
										' ' . $spouse->given_names();
								}
							}
						}
					}
					if(my $notes = notes({ record => $event })) {
						$notes = lcfirst($notes);
						$notes =~ s/\.$//;
						$bio .= " ($notes)";
					}
					$bio .= '. ';
				} elsif($type eq 'Departure') {
					$bio .= ' ' . $person->pronoun();
					if($ENV{'LANG'} =~ /^en_US/) {
						$bio .= ' traveled';
					} else {
						$bio .= ' travelled';
					}
					my $place = place({ person => $person, record => $events[0] });
					$place =~ s/^\sin/ from/;
					$bio .= "$place " .
						year({ person => $person, record => $events[0] });
					if(my $notes = notes({ record => $event })) {
						$notes = lcfirst($notes);
						$bio .= " ($notes)";
					}
					$bio .= '. ';
				} elsif($type eq 'Military service') {
					$bio .= '. ' if(!$end_of_sentence);
					$bio .= " $pronoun served in the military";
					if(my $place = place({ person => $person, record => $event })) {
						$bio .= $place;
					}
					if(my $date = year(record => $event)) {
						$bio .= " $date";
					}

					if(my $notes = notes(record => $event)) {
						$notes = lcfirst($notes) unless($notes =~ /^(RAF|Royal Navy)/);
						$notes =~ s/\.$//;
						$bio .= " ($notes)";
					}
					$end_of_sentence = 0;
				} elsif(($type !~ /^Census U[KS] (\d{4})$/) &&
					($type ne 'Race') &&
					($type ne 'Custom Marriage') &&
					($type ne 'Register UK 1939')) {

					red_warning({ person => $person, warning => "Unhandled event type: $type" });
					if(my $notes = notes(record => $event)) {
						$notes = ucfirst($notes);
						$bio .= " ($notes)";
						$end_of_sentence = 0;
					}
				}
			}
		} else {
			my $mentioned_military;
			my $index = 0;
			my $previous;
			my $prev_type;
			foreach my $event(@events) {
				$index++;
				if(!ref($event)) {
					my $e = $person->tag_record('EVEN', $index);
					if(ref($e) eq 'Gedcom::Record') {
						$event = $e;
					} else {
						red_warning({ person => $person, warning => "Event record is just description ($event), infomation has been lost" });
						$bio .= ' ' . ucfirst($event) . '. ';
					}
				}
				if(ref($event) eq 'Gedcom::Record') {
					my $type = $event->type();
					if($type eq 'Military service') {
						if(!$mentioned_military) {
							$bio .= '. ' if(!$end_of_sentence);
							$bio .= " $pronoun served in the military";
							if(my $place = place({ person => $person, record => $event })) {
								$bio .= $place;
							}
							if(my $date = year(record => $event)) {
								$bio .= " $date";
							}
							$mentioned_military = 1;
						}

						if(my $notes = notes(record => $event)) {
							$notes = lcfirst($notes) unless($notes =~ /^(RAF|Royal Navy)/);
							$notes =~ s/\.$//;
							$bio .= " ($notes)";
						}
						$end_of_sentence = 0;
					} elsif($type eq 'Arrival') {
						if(!defined($event->place())) {
							if($opts{'f'}) {
								die $person->as_string() . ': arrival record without destination';
							}
							if($opts{'w'}) {
								red_warning({ person => $person, warning => 'Arrival record without destination' });
							}
							next;
						}
						if($events[$index] && ($events[$index]->type() eq 'Arrival') && $event->date()) {
							if($events[$index]->date()) {
								$previous = $event;
								$prev_type = 'Arrival';
								next;
							}
						}
						if($previous) {
							if($prev_type eq 'Departure') {
								my $arrival = $event;
								my $departure = $previous;
								my $yod;
								my $yoa;
								my $dod = $departure->date();
								my $doa = $arrival->date();
								my $only_have_departure_year;
								if($doa && $dod && ($doa =~ /(\d{3,4})/)) {
									$yoa = $1;
									$doa =~ s/\s?\d{3,4}//;
									if($dod =~ /(\d{3,4})/) {
										$yod = $1;
										$dod =~ s/\s?\d{3,4}//;
										if($dod =~ /^\d/) {
											$dod = "on $dod";
										} else {
											$dod = "during $yod";
											$only_have_departure_year = 1;
										}
										if($doa =~ /^\d/) {
											$doa = "on $doa";
										} elsif($yoa == $yod) {
											$doa = 'later that same year';
										} else {
											$doa = "during $yoa";
										}
									}
								}
								if($previous->date()) {
									if($yod && $yoa && ($yod == $yoa)) {
										$bio .= " During $yod " . lc($person->pronoun());
									} else {
										$bio .= $person->pronoun();

										# $yod = year({ person => $person, record => $departure });
										# $yoa = year({ person => $person, record => $arrival });
									}

									if($ENV{'LANG'} =~ /^en_US/) {
										$bio .= ' traveled';
									} else {
										$bio .= ' travelled';
									}

									if(defined($departure->place())) {
										$bio .= ' from ' .  $departure->place();
									} else {
										if($opts{'f'}) {
											die $person->as_string() . ': departure record has no location';
										}
										if($opts{'w'}) {
											red_warning({ person => $person, warning => 'Departure record has no location' });
										}
									}
									if(defined($arrival->place())) {
										$bio .= ' to ' .  $arrival->place();
									} else {
										if($opts{'f'}) {
											die $person->as_string() . ': arrival record has no location';
										}
										if($opts{'w'}) {
											red_warning({ person => $person, warning => 'Arrival record has no location' });
										}
									}

									if(defined($dod) && !$only_have_departure_year) {
										$bio .= ", departing $dod and";
									}

									$bio .= " arriving $doa. ";
								}
							} else {
								# Two arrival records, put into one sentence for improved readability
								my $date1 = year({ record => $previous });
								my $date2 = year({ record => $event });
								my $year1;
								my $year2;
								if($date1 =~ /(.*)\s?(\d{4})$/) {
									$date1 = $1;
									$year1 = $2;
									$date1 =~ s/,\s//;
								}
								if($date2 =~ /(.*)\s?(\d{4})$/) {
									$date2 = $1;
									$year2 = $2;
									$date2 =~ s/,\s//;
								}
								$bio .= '. ' if(!$end_of_sentence);
								$bio .= ' ';
								if(defined($year1) && defined($year2) && ($year1 == $year2)) {
									if($date1 eq 'in ') {
										$date1 = '';
									} else {
										$date1 = " $date1";
									}
									$bio .= "During $year1 " . lcfirst($pronoun) . ' arrived' .
										place({ person => $person, record => $previous }) .
										"$date1 and" .
										place({ person => $person, record => $event, nopreposition => 1 }) .
										" $date2. ";
								} else {
									$bio .= ucfirst(year({ person => $person, record => $previous })) .
										' ' . lcfirst($person->pronoun()) .
										' arrived' .
										place({ person => $person, record => $previous }) .
										' and ' .
										year({ person => $person, record => $event }) .
										' ' . lcfirst($pronoun),
										' arrived' .
										place({ person => $person, record => $event }) . '. ';
								}
							}
							$previous = undef;
						} elsif(my $place = place({ person => $person, record => $event })) {
							if(my $year = year({ person => $person, record => $event })) {
								if($end_of_sentence) {
									$bio .= ' ' . ucfirst($year);
								} else {
									$bio .= $year;
								}
								$bio .= ' ' . lcfirst($person->pronoun()) . " arrived$place. ";
							} elsif($opts{'f'}) {
								die $person->as_string(), "Can't determine $type date";
							} elsif($opts{'w'}) {
								red_warning({ person => $person, warning => "Can't determine $type date" });
							}
						} elsif($opts{'f'}) {
							die $person->as_string(), "Can't determine $type location";
						} elsif($opts{'w'}) {
							red_warning({ person => $person, warning => "Can't determine $type location" });
						}
						$end_of_sentence = 1;
					} elsif($type eq 'Departure') {
						if(!defined($event->place())) {
							if($opts{'f'}) {
								die $person->as_string() . ': departure record without destination';
							}
							if($opts{'w'}) {
								red_warning({ person => $person, warning => 'Departure record without destination' });
							}
							next;
						}
						if($events[$index] && ($events[$index]->type() eq 'Arrival') && $event->date()) {
							if($events[$index]->date()) {
								$previous = $event;
								$prev_type = 'Departure';
								next;
							}
						}
						$bio .= ' ' . $person->pronoun();
						if($ENV{'LANG'} =~ /^en_US/) {
							$bio .= ' traveled';
						} else {
							$bio .= ' travelled';
						}
						my $place = place({ person => $person, record => $event });
						$place =~ s/^\sin/ from/;
						if($event->date()) {
							$bio .= "$place " .
								year({ person => $person, record => $event });
						} else {
							$bio .= $place;
						}
						if(my $notes = notes({ record => $event })) {
							$notes = lcfirst($notes);
							$bio .= " ($notes)";
						}
						$bio .= '. ';
					} elsif(($type !~ /^Census U[KS] (\d{4})$/) &&
						($type ne 'Register UK 1939') &&
						($type ne 'Race') &&
						($type ne 'Hospitalisation')) {
						red_warning({ person => $person, warning => "Unknown event type: $type" });
						if(my $notes = notes(record => $event)) {
							$notes =~ s/\.$//;
							my $date = year(record => $event);
							if($end_of_sentence) {
								if($date) {
									$bio .= ' ' . ucfirst($notes) . " $date. ";
								} else {
									$bio .= ' ' . ucfirst($notes) . '. ';
								}
							} else {
								$notes = lcfirst($notes);
								if($date) {
									$bio .= " ($date, $notes)";
								} else {
									$bio .= " ($notes)";
								}
							}
						}
					}
				}
			}
		}

		if(my $profile_object = $person->tag_record('_MILT')) {
			# $person->resolve_xref($profile_object->value());
			if(my $value = $profile_object->get_value()) {
				$bio .= '. ' if(!$end_of_sentence);
				$bio .= " $pronoun served in the military ($value). ";
				$end_of_sentence = 1;
			}
		}

		if($placeofburial || $dateofburial) {
			if($aod || ((!$dateofdeath) && !$placeofdeath)) {
				$bio .= '. ' if(!$end_of_sentence);
				if($dateofburial) {
					$bio .= " $pronoun was buried";
					if($placeofburial) {
						if($placeofbirth && ($placeofburial eq $placeofbirth)) {
							$bio .= ' in ' .
								lcfirst($person->possessive()) .
								' home town of ';
							my $city = $placeofburial;
							if($city =~ /^(.+?),/) {
								$bio .= $1;
							} else {
								$bio .= place({ person => $person, place => $placeofburial });
							}
						} else {
							my $opts = {
								person => $person,
								place => $placeofburial,
								there => $placeofdeath,
								places_printed => \%places_printed,
								must_postdate => $birth_dt
							};
							if(my $address = $burial->address()) {
								$opts->{'address'} = $address;
							}
							$bio .= place($opts);
						}
					}
					$bio .= ' ' . year({ person => $person, date => $dateofburial });
					if(my $b = notes({ record => $burial, paragraph => 0 })) {
						$b =~ tr/\r//;
						$bio .= " ($b)";
					}
				} elsif($placeofbirth && ($placeofburial eq $placeofbirth)) {
					$bio .= " $pronoun was buried";
					if(my $address = $burial->address()) {
						$bio .= " at $address";
					}
					$bio .= ' in ' .  lcfirst($person->possessive()) .
						' home town of ';
					my $city = $placeofburial;
					if($city =~ /^(.+?),/) {
						$bio .= $1;
					} else {
						$bio .= place({ person => $person, place => $placeofburial });
					}
				} else {
					$bio .= " $pronoun is buried" .
						place({ person => $person, record => $burial, places_printed => \%places_printed, there => $placeofmarriage });
				}
				$end_of_sentence = 0;
			} elsif($dateofdeath || $placeofdeath) {
				$bio .= '.' if(!$end_of_sentence);
				if($opts{'B'}) {
					if($bio) {
						if(!pdfprint(string => $bio, text => $text, pdfpage => $pdfpage)) {
							$text->textend();

							$pdfpage = PDFPage->new();

							$text = $pdfpage->page()->text();
							$text->textstart();
							$text->font($params{'font'}, 12);
							pdfprint(string => $bio, text => $text, pdfpage => $pdfpage);
						}
						$bio = '';
					}
				} else {
					$bio .= "\n\t";
				}
				$bio .= "$pronoun died";
				if($dateofdeath) {
					$bio .= ' ' . year({ person => $person, date => $dateofdeath, must_postdate => $birth_dt });
				}
				if($placeofdeath) {
					my $p = place({ person => $person, record => $death, places_printed => \%places_printed });
					$bio .= $p;
					$places_printed{$p} = 1;
				}
				$bio .= "[$_]" foreach(List::Util::uniq(sort @deathcitations));
				# Print notes about the death, if any
				if(my $d = notes({ person => $person, record => $death })) {
					$d =~ tr/\r//;
					$d =~ tr/\n/ /;
					$d =~ s/\.$//;
					$d = lcfirst($d);
					$bio .= " ($d)";
				}
				my $opts = {
					person => $person,
					place => $placeofburial,
					there => $placeofdeath,
					places_printed => \%places_printed,
					must_postdate => $birth_dt,
				};
				my $address;
				if($address = get_value({ person => $person, value => 'burial address' })) {
					$opts->{'address'} = $address;
				}
				if($dateofburial) {
					$bio .= ' and was buried';
					if($placeofburial) {
						if(defined($placeofdeath) && ($placeofburial eq $placeofdeath) && !$death->address()) {
							$bio .= ' there';
							if($address) {
								$bio .= " at $address";
							}
						} else {
							$bio .= place($opts);
						}
					}
					$bio .= ' ' . year({ person => $person, date => $dateofburial });
				} elsif($placeofdeath && ($placeofburial eq $placeofdeath) &&
				   $burial->address() && (!$death->address())) {
					$bio .= ' and is buried there at ' . $burial->address();
				} else {
					$bio .= ' and is buried' . place($opts);
				}
				if(my $b = notes({ record => $burial, paragraph => 0 })) {
					$b =~ tr/\r//;
					$bio .= " ($b)";
				}
				$end_of_sentence = 0;
			}
			$bio .= "[$_]" foreach(sort @burialcitations);
		} elsif((!$aod) && ($placeofdeath || $dateofdeath)) {
			# TODO - extract marriage banns information
			if($person->marriage_bann()) {
				# die 'foo';
			}
			if($placeofdeath && (scalar(@spouses) <= 1) && $placeofmarriage && ($placeofdeath eq $placeofmarriage) && !$printed_residence) {
				if($end_of_sentence) {
					$bio .= ' That';
				} else {
					$bio .= ', which';
				}
				$bio .= ' is also where ' . lcfirst($pronoun);
			} elsif($aob && scalar(@spouses) && ($numberofchildren == 0)) {
				if($end_of_sentence) {
					$bio .= " $pronoun";
				} else {
					$bio .= ' and';
				}
			} else {
				$bio .= '.' if(!$end_of_sentence);
				if($opts{'B'}) {
					if($bio) {
						if(!pdfprint(string => $bio, text => $text, pdfpage => $pdfpage)) {
							$text->textend();

							$pdfpage = PDFPage->new();

							$text = $pdfpage->page()->text();
							$text->textstart();
							$text->font($params{'font'}, 12);
							pdfprint(string => $bio, text => $text, pdfpage => $pdfpage);
						}
						$bio = '';
					}
				} else {
					$bio .= "\n\t";
				}
				$bio .= $pronoun;
			}
			$bio .= ' died';
			if($dateofdeath) {
				if($dateofbirth && ($dateofdeath eq $dateofbirth)) {
					$bio .= ' on the same day';
				} elsif($placeofdeath && $placeofmarriage && ($placeofdeath eq $placeofmarriage) && !$printed_residence) {
					$bio .= ' ' . year({ person => $person, date => $dateofdeath, must_postdate => $birth_dt });
				} elsif($placeofbirth && $placeofdeath && ($placeofdeath eq $placeofbirth) && (scalar(@spouses) <= 1) && ($placeofdeath =~ /^(.+?),.*/) && !$printed_residence) {
					$bio .= " in $1 " .
						year({ person => $person, date => $dateofdeath, must_postdate => $birth_dt });
				} else {
					$bio .= ' ' . year({ person => $person, date => $dateofdeath, must_postdate => $birth_dt });
					if($placeofdeath && ((!$placeofmarriage) || ($placeofdeath ne $placeofmarriage) || $printed_residence)) {
						my $place = place({ person => $person, record => $death, places_printed => \%places_printed });
						if(!defined($place)) {
							$place = place({ person => $person, place => $placeofdeath, places_printed => \%places_printed });
						}
						if(defined($place)) {
							$bio .= $place;
						} elsif($opts{'f'}) {
							die $person->as_string(), "Place of death ($placeofdeath) can't be parsed";
						} elsif($opts{'w'}) {
							red_warning({
								person => $person,
								warning => "Place of death ($placeofdeath) can't be parsed"
							});
						}
					}
				}
			} elsif((!$placeofmarriage) || ($placeofdeath ne $placeofmarriage)) {
				$bio .= place({ person => $person, place => $placeofdeath });
			}
			$bio .= "[$_]" foreach(List::Util::uniq(sort @deathcitations));
			# Print notes about the death, if any
			if(defined($death) && (my $d = notes({ person => $person, record => $death, paragraph => 0 }))) {
				$d =~ tr/\r//;
				$d =~ s/\.$//;
				$bio .= " ($d)";
			}
			$end_of_sentence = 0;
		}
		$bio .= '.' if(!$end_of_sentence);

		# if($death && (my $notes = notes({ person => $person, record => $death, paragraph => 1 }))) {
			# print "\n$notes";
		# }

		if(my $notes = notes({ person => $person, record => $person, paragraph => 1 })) {
			# print "\t", join("\n\t", @notes), "\n";
			if($opts{'B'}) {
				if($bio) {
					if(!pdfprint(string => $bio, text => $text, pdfpage => $pdfpage)) {
						$text->textend();

						$pdfpage = PDFPage->new();

						$text = $pdfpage->page()->text();
						$text->textstart();
						$text->font($params{'font'}, 12);
						pdfprint(string => $bio, text => $text, pdfpage => $pdfpage);
					}
					$bio = '';
				}

			} else {
				$bio .= "\n";
			}
			$bio .= $notes;
		}

		if($opts{'C'}) {
			foreach my $child(@children) {
				if(my $dob = get_value({ person => $child, value => 'birth date' })) {
					unless($opts{'B'}) {
						print "\n\t";
					}
					$bio .= $child->given_names() .
						' was born ' .
						year({ person => $child, date => $dob });
					if($opts{'w'} && ($birth_dt || $death_dt) &&
					   ($dob !~ /^\d{3,4}$/) && ($dob =~ /^\d/) &&
					   ($dob !~ /[a-z]$/i)) {
						my $d;
						eval {
							$d = $date_parser->parse(date => $dob);
						};
						if($d) {
							$d = @{$d}[0];
						}
						if($d) {
							$d = $dfn->parse_datetime($d->{'canonical'});
							if($birth_dt && ($d <= $birth_dt)) {
								if($opts{'f'}) {
									die $child->name(), ': Born before parent was born';
								}
								red_warning({ person => $child, warning => 'born before parent was born' });
							}
							if(($sex eq 'F') && $death_dt && ($d > $death_dt)) {
								if($opts{'f'}) {
									die $child->name(), ': Born after mother died';
								}
								red_warning({ person => $child, warning => 'born after mother died' });
							} elsif(($sex eq 'M') && $death_dt && ($d > ($death_dt + $tenmonths))) {
								# Allow the child to be
								# born up to 10 months
								# after the death of the
								# father
								if($opts{'f'}) {
									die $child->name(), ': Born more than 10 months after father died';
								}
								red_warning({ person => $child, warning => 'born more than 10 months after father died' });
							}
						}
					}
					$bio .= '.';
				} elsif(get_value({ person => $child, value => 'baptism date' })) {
					$bio .= "\t" . $child->given_names() .
						' was born c. ' .
						get_value({ person => $child, value => 'baptism date' }) .
						'.';
				}
			}

			$bio .= "\n" if(scalar(@children));
		}

		if($opts{'c'}) {
			my $ufinder = URI::Find::Schemeless->new(sub {
				my($uri, $orig_uri) = @_;

				if($opts{'w'}) {
					my $u = URI->new($orig_uri);
					if($u && (ref($u) ne 'URI::_generic') && !head($orig_uri)) {
						if($opts{'f'}) {
							die $person->as_string, ": $orig_uri: not found";
						}
						red_warning({ person => $person, warning => "$orig_uri: not found" });
					}
				}
				return $orig_uri;
			});

			my %census_years;
			my $findagrave;
			foreach my $citation(1..$citationcount) {
				if(!$citations{$citation}) {
					if($opts{'f'}) {
						die $person->as_string(), "[$citation]: empty citation";
					}
					if($opts{'w'}) {
						red_warning({
							person => $person,
							warning => "[$citation]: empty citation"
						});
					}
					next;
				}
				my $title = $citations{$citation}->title();
				if(!defined($title)) {
					if($opts{'f'}) {
						die $person->as_string, "[$citation]: no citation title";
					}
					red_warning({
						person => $person,
						warning => "[$citation]: no citation title"
					});
					next;
				}
				if($opts{'B'}) {
					if($bio) {
						if(!pdfprint(string => $bio, text => $text, pdfpage => $pdfpage)) {
							$text->textend();

							$pdfpage = PDFPage->new();

							$text = $pdfpage->page()->text();
							$text->textstart();
							$text->font($params{'font'}, 12);
							pdfprint(string => $bio, text => $text, pdfpage => $pdfpage);
						}
						$bio = '';
					}
				} else {
					$bio =~ s/\s+$//;
					$bio .= "\n\t";
				}
				$bio .= "[$citation]: $title";
				# if(defined(my $publication = $citations{$citation}->publication())) {
					# print " $publication";
					# if(defined(my $continuation = $citations{$citation}->cont())) {
						# print $continuation;
					# }
				# }
				if(defined(my $page = $citations{$citation}->page())) {
					$bio .= " $page";
				}

				my @notes = $citations{$citation}->note();
				foreach my $note(@notes) {
					if(ref($note) eq 'Gedcom::Record') {
						$note = $note->note();
					}

					if($note && ($note !~ /^This information comes from/)) {
						if($opts{'w'}) {
							$ufinder->find(\$note);
						}
						$bio .= " ($note)";
					}
				}
				if($citationnotes{$citation}) {
					$citationnotes{$citation} =~ s/\.$//;
					$bio .= " ($citationnotes{$citation})";
				}

				if(($title =~ /census/i) && ($title =~ /(\d{3,4})/)) {
					$census_years{$1} = $title;
				}
				if($title =~ /find a grave/i) {
					$findagrave = 1;
				}
			}
			$bio .= "\n" if($citationcount);

			if($opts{'w'}) {
				foreach my $event(@events) {
					if(ref($event) eq 'Gedcom::Record') {
						my $type = $event->type();
						my $year;
						if($type =~ /^Census U[KS] (\d{4})$/) {
							$year = $1;
							if(!$event->date()) {
								if($opts{'f'}) {
									die $person->as_person(), "Census for $year is missing a date";
								}
								red_warning({ person => $person, warning => "Census for $year missing a date" });
							}
						} elsif($type eq 'Register UK 1939') {
							if(!$event->date()) {
								if($opts{'f'}) {
									die $person->as_person(), '1939 UK register is missing the date 29 Sep 1939';
								}
								red_warning({ person => $person, warning => '1939 UK register is missing the date 29 Sep 1939' });
							}
							$year = 1939;
						} else {
							next;
						}
						$census_years{$year} = $type;
						if(defined($yod) && ($year > $yod)) {
							if($opts{'f'}) {
								die $person->as_person(), "Census for $year is after year of death ($yod)";
							}
							red_warning({ person => $person, warning => "Census for $year after year of death ($yod)" });
						} elsif(defined($yob) && ($year < $yob)) {
							if($opts{'f'}) {
								die $person->as_person(), "Census for $year is after year of birth ($yob)";
							}
							red_warning({ person => $person, warning => "Census for $year after year of birth ($yob)" });
						}
					}
				}
				foreach my $year(sort { $a <=> $b } keys(%census_years)) {
					if($census_years{$year + 20} && !$census_years{$year + 10}) {
						if($opts{'f'}) {
							die 'Census citation missing between ', $census_years{$year}, ' and ', $census_years{$year + 20};
						}
						red_warning({
							person => $person,
							warning => 'Census citation missing between ' . $census_years{$year} . ' and ' . $census_years{$year + 20}
						});
					}
				}
				my $surname = $lastname;
				if(defined($sex) && ($sex eq 'F')) {
					if(my $husband = $person->husband()) {
						$surname = $husband->surname();
					} elsif(my $spouse = $person->spouse()) {
						if($opts{'f'}) {
							die 'married, but no husband relationship';
						}
						if($opts{'w'}) {
							red_warning({ person => $person, warning => 'married, but no husband relationship' });
						} else {
							$surname = $spouse->surname();
						}
					}
				}
				if($yod && $firstname && $surname && !$findagrave) {
					my %opts = (
						date_of_death => $yod,
						firstname => $firstname,
						lastname => $surname,
						ua => $browser,
					);
					if($placeofburial) {
						if($placeofburial =~ /.+,\s+(\w+)/) {
							$opts{'country'} = $1;
						}
					} elsif($placeofdeath) {
						if($placeofdeath =~ /.+,\s+(\w+)/) {
							$opts{'country'} = $1;
						}
					}
					if($opts{'country'} && ($opts{'country'} eq 'USA')) {
						$opts{'country'} = 'The United States';
					}
					my $f = WWW::Scrape::FindaGrave->new(\%opts);
					while(my $url = $f->get_next_entry()) {
						if($opts{'f'}) {
							die $person->as_string(), ": possible Find a Grave link $url";
						}
						red_warning({
							person => $person,
							warning => "possible Find a Grave link $url"
						});
					}
				}
			}
		}
		if($opts{'B'}) {
			if($bio) {
				if(!pdfprint(string => $bio, text => $text, pdfpage => $pdfpage)) {
					$text->textend();

					$pdfpage = PDFPage->new();

					$text = $pdfpage->page()->text();
					$text->textstart();
					$text->font($params{'font'}, 12);
					pdfprint(string => $bio, text => $text, pdfpage => $pdfpage);
				}
				$bio = '';
			}
		} else {
			if($bio eq "\t.") {
				if($opts{'f'}) {
					die $person->as_string(), ": couldn't extract a biography";
				}
				red_warning({ person => $person, warning => "couldn't extract a biography" });
			}
			print "$bio\n", '-' x 80, "\n";
		}
	} else {
		my ($dob, $dod);
		eval {
			$dob = $person->get_value('birth date');
			$dod = $person->get_value('death date');
		};
		if($@) {
			warn "Can't parse record for $firstname $lastname";
			return;
		}

		if(defined($dob) && (!$onlydeaths) && !$onlybirthdays) {
			my $d;
			if(($dob !~ /^\d{3,4}$/) && ($dob =~ /^\d/)) {
				eval {
					$d = $date_parser->parse(date => $dob);
				};
			}
			if($d) {
				$d = @{$d}[0];
				$birth_dt = $dfn->parse_datetime($d->{'canonical'});
				print "\tBorn: ", $birth_dt->strftime('%x');
			} else {
				if($@) {
					if($opts{'f'}) {
						die $@;
					}
					if($opts{'w'}) {
						red_warning({ person => $person, warning => $@ });
					}
				}
				print "\tBorn: $dob";
			}
			print "\n";
		}
		if(defined($dod) && (!$onlydeaths) && !$onlybirthdays) {
			my $d;
			if(($dod !~ /^\d{3,4}$/) && ($dod =~ /^\d/)) {
				eval {
					$d = $date_parser->parse(date => $dod);
				};
			}
			if($d) {
				$d = @{$d}[0];
				$death_dt = $dfn->parse_datetime($d->{'canonical'});
				print "\tDied: ", $death_dt->strftime('%x');
			} else {
				if($@) {
					if($opts{'f'}) {
						die $@;
					}
					if($opts{'w'}) {
						red_warning({ person => $person, warning => $@ });
					}
				}
				print "\tDied: $dod\n";
			}
			print "\n";
		}
	}
	$printed{$person->{'xref'}} = 1;

	if($opts{'B'}) {
		$text->textend();
		my @images;
		my %files;
		foreach my $o($person->obje()) {
			my $obje;
			if(ref($o) eq 'Gedcom::Record') {
				$obje = $o;	# e.g. Ancestry
			} else {
				$obje = $ged->resolve_xref($o);	# e.g. FMP
			}
			next if(!defined($obje));
			if(my $file = $obje->file()) {
				if(ref($file) eq 'Gedcom::Record') {
					# warn $file->tag(), "\n" if($file->tag());
					$file = $file->{'file'};
					next if($file eq '*');
				}
				if($files{$file}) {
					print "$file is already printed\n" if($opts{'v'});
					next;
				}
				$files{$file} = 1;
				my $title = $obje->title() || $obje->tag_record('TITL', 1);
				my $form = $obje->form();
				if((!$form) && $obje->items()) {
					# Family Tree Maker does this
					my @items = $obje->items();
					$file = $items[0]->{'value'};
					# TODO: Find the title
				}
				$file =~ s/\{0\}//g;
				$file =~ s/\r//g;
				my $image;
				my $filename;
				my $orig_image;
				my $orig_filename;
				if(($file =~ /^https?:\/\//) && ($file !~ /\.jpe?g$/) && ($file !~ /ancestry.com.*image.*guid=/)) {
					$file =~ s/%2f/\//gi;

					my $resp = $browser->get($file);
					if($resp->is_success() && ($resp->content_type() eq 'image/jpeg')) {
						$title = $file if(!defined($title));
						my $tmp = File::Temp->new(UNLINK => 0);
						$filename = $tmp->filename();
						open(my $fh, '>', $tmp->filename());
						print $fh $resp->decoded_content();
						close $fh;
						$orig_filename = $filename;
						my $resize = Image::Resize->new($filename);
						my $width = $resize->width();
						my $height = $resize->height();
						my $gd;
						if($height > 250) {
							my $newwidth = $width * (250 / $height);
							my $newheight;
							if($newwidth > 550) {
								$newheight = $height * (550 / $width);
								$gd = $resize->resize(550, $newheight);
							} else {
								$gd = $resize->resize($newwidth, 250);
								$newheight = 205;
							}
						} elsif($width > 550) {
							my $newheight = $height * (550 / $width);
							$gd = $resize->resize(550, $newheight);
						}
						if($gd) {
							$image = $pdf->image_gd($gd, -lossless => 1);
						} else {
							$image = $pdf->image_jpeg($filename);
						}
						$orig_image = $pdf->image_jpeg($orig_filename);
					} else {
						if(!$resp->is_success()) {
							red_warning({ person => $person, warning => "download $file failed " . $resp->status_line() });
						}
						$title = undef;
					}
				} elsif(($file =~ /^([A-Z]:[\/\\].+\.jpe?g+)/) || ($file =~ /^(\/.+\.jpe?g)/)) {
					$form = 'JPG';
				}
				if((!defined($image)) && $form && ($form =~ /^JPG$/i)) {
					if($file =~ /ancestry.com.+guid=.+&tid=/) {
						# Ancestry's Gedcoms are broken, perhaps pointing to an old
						# location that they forgot to fix
						if($file =~ /guid=([a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12})/) {
							# FIXME: Ancestry pictures attached from another
							# tree aren't downloaded.  This URL will generate a
							# 404
							$file = "https://mediasvc.ancestry.com/v2/image/namespaces/1093/media/$1.jpg?client=Trees";
						} else {
							if($opts{'f'}) {
								die "BUG: update ACOM mapping for $file";
							}
							red_warning({ person => $person, warning => "BUG: update ACOM mapping for $file" });
							unlink $filename if(defined($filename));
							unlink $orig_filename if(defined($orig_filename));
							next;
						}
					}
					my $rc;
					my $tmp = File::Temp->new(UNLINK => 0);
					$filename = $tmp->filename();
					$orig_filename = $filename;
					if(is_success($rc = getstore($file, $filename))) {
						my $resize = Image::Resize->new($filename);
						my $width = $resize->width();
						my $height = $resize->height();
						my $gd;
						if($height > 250) {
							my $newwidth = $width * (250 / $height);
							my $newheight;
							if($newwidth > 550) {
								$newheight = $height * (550 / $width);
								$gd = $resize->resize(550, $newheight);
							} else {
								$gd = $resize->resize($newwidth, 250);
								$newheight = 250;
							}
						} elsif($width > 550) {
							my $newheight = $height * (550 / $width);
							$gd = $resize->resize(550, $newheight);
						}
						if($gd) {
							# $orig_image = $pdf->image_jpeg($orig_filename);
							# $tmp = File::Temp->new(UNLINK => 0);
							# $filename = $tmp->filename();
							# open(my $fh, '>', $filename);
							# print $fh $gd->jpeg();
							# close $fh;
							$image = $pdf->image_gd($gd, -lossless => 1);
						}
						$image = $pdf->image_jpeg($filename);
						$title = $file if(!defined($title));
						# $image->height(32);
						# $image->width(32);
					} else {
						red_warning({ person => $person, warning => "download $file failed to /tmp/njh.jpg: $rc" });
						$title = undef;
					}
				}
				if($title) {
					push @images, {image => $image, orig_image => $orig_image, title => $title};
				}
				push @tmpfiles, $filename if(defined($filename));
				push @tmpfiles, $orig_filename if(defined($orig_filename) && ($orig_filename ne $filename));
			}
		}
		while(my $i = shift @images) {
			my $title = $i->{'title'};

			if(my $image = $i->{'image'}) {
				if($image->height() >= ($pdfpage->y() - 80)) {
					$pdfpage = PDFPage->new();
				}
				my $y = $pdfpage->newline() - $image->height();

				if(my $peek = $images[0]) {
					if(my $pimage = $peek->{'image'}) {
						if(($image->width() < 250) && ($pimage->width() < 250) &&
						   ($pimage->height() <= $y) && ($pimage->height() <= $image->height())) {
							# Print two images side by side
							$peek = shift @images;

							my $x = 150 - ($image->width() / 2);
							$pdfpage->page()->gfx()->image($image, $x, $y);
							$x = 450 - ($pimage->width() / 2);
							$pdfpage->page()->gfx()->image($pimage, $x, $y);
							$pdfpage->y($y);

							$text = $pdfpage->page()->text();
							$text->textstart();
							$text->font($pdf->corefont('Times-New-Roman-Italic'), 12);
							$x = 150 - (length($title) / 2);
							if(!pdfprint(string => $title, text => $text, pdfpage => $pdfpage, x => $x, centre => 1)) {
								die "Didn't make enough room for $title; y = " . $pdfpage->y();
							}
							my $ptitle = $peek->{'title'};
							$x = 450 - (length($ptitle) / 2);
							if(!pdfprint(string => $ptitle, text => $text, pdfpage => $pdfpage, x => $x, centre => 1)) {
								die "Didn't make enough room for $ptitle ; y = " . $pdfpage->y();
							}
							$text->textend();
							shift @images;
							next;
						}
					}
				}

				my $orig_image = $i->{'orig_image'};

				if(($pdfpage->y() > ($orig_image->height() + 80)) && ($orig_image->width() < 550)) {
					# No need to shrink the image
					$y = $pdfpage->y() - $orig_image->height();
					my $x = 300 - ($orig_image->width() / 2);
					$pdfpage->page()->gfx()->image($orig_image, $x, $y);
					$pdfpage->y($y);
				} else {
					# Shrink the image to fit on the page
					my $x = 300 - ($image->width() / 2);
					$pdfpage->page()->gfx()->image($image, $x, $y);
					$pdfpage->y($y);
				}
			}

			$text = $pdfpage->page()->text();
			$text->textstart();
			$text->font($pdf->corefont('Times-New-Roman-Italic'), 12);
			my $x = 300 - (length($title) / 2);
			if(!pdfprint(string => $title, text => $text, pdfpage => $pdfpage, x => $x, centre => 1)) {
				die "Didn't make enough room for $title; y = " . $pdfpage->y();
			}
			$text->textend();
		}
	}
}

sub Gedcom::Individual::as_string
{
	my $self = shift;
	my %args = (ref($_[0]) eq 'HASH') ? %{$_[0]} : @_;

	my $name;

	if($args{'use_aka'}) {
		my $n2 = $self->tag_record('NAME', 2);
		if(defined($n2) && (ref($n2) eq 'Gedcom::Record') && defined($n2->type()) && ($n2->type() eq 'AlsoKnownAs') && ($n2->value() ne $self->name())) {
			$name = $n2->value();
		} else {
			return;
		}
	} else {
		$name = $self->name();
	}

	$name =~ s/\///g;
	$nameparser->parse($name);

	my %name_components = $nameparser->components();
	my $first_name = $name_components{'given_name_1'};
	my $middle_name = $name_components{'middle_name'};
	my $surname = $name_components{'surname_1'};
	if($name_components{'surname_2'}) {
		$surname .= ' ' . $name_components{'surname_2'};
	}
	if($name_components{'non_matching'}) {
		if($name =~ /(\w{2,})\s(\w{2,})\s(\w+)\s(\w{2,})/) {
			# Name parser doesn't parse names like this very well
			$first_name = $1;
			$middle_name = "$2 $3";
			$surname = $4;
		} else {
			if($surname) {
				$surname .= ' ';
			}
			my $rest = $name_components{'non_matching'};
			if($rest =~ /(.+) $/) {
				$rest = $1;
			}
			$surname .= $rest;
		}
	} elsif(!defined($surname)) {
		$surname = $self->surname();
	}

	my $has_maiden_name;
	if($args{'nee'}) {
		my $sex = get_value({ person => $self, value => 'sex' });
		if(defined($sex) && ($sex eq 'F')) {
			if(my $husband = $self->husband()) {
				$surname = $husband->surname();
				$has_maiden_name = 1;
			} elsif(my $spouse = $self->spouse()) {
				if($opts{'f'}) {
					die 'married, but no husband relationship';
				}
				if($opts{'w'}) {
					red_warning({ person => $self, warning => 'married, but no husband relationship' });
				}
				$surname = $spouse->surname();
				$has_maiden_name = 1;
			}
		}
	}

	my $rc;

	if($args{'title'} && $name_components{'title_1'}) {
		$rc .= $name_components{'title_1'};
		if($rc) {
			$rc .= ' ';
		}
	}

	if($first_name) {
		$rc .= $first_name;
	} elsif($self->given_names()) {
		$rc .= $self->given_names();
	} elsif($args{'print_unknown'}) {
		$rc .= ' ?';
	}

	if($args{'middle_names'}) {
		if($middle_name) {
			$rc .= " $middle_name";
		} elsif($name =~ /\s([A-Z])\s.+/) {
			# Just an initial has been given
			$rc .= " $1";
		}
	}

	if($surname) {
		if($rc) {
			$rc .= ' ';
		}
		$rc .= normalize_name($surname);
		if(my $suffix = $name_components{'suffix'}) {
			$rc .= " $suffix";
		}
	} elsif($args{'print_unknown'}) {
		$rc .= ' ?';
	}

	if($has_maiden_name && $self->surname()) {
		$rc .= ' (nee ' . normalize_name($self->surname()) . ')';
	}

	if(!defined($rc)) {
		if($opts{'f'}) {
			die "Can't determine name of this person";
		}
		if($opts{'w'}) {
			red_warning({ warning => "Can't determine name of this person" });
			$args{'include_years'} = 1;
			$rc = 'Unknown person ';
		}
	}

	if($args{'include_years'}) {
		my $dob = get_value({ person => $self, value => 'birth date' });

		my $yob;	# Year of birth
		if($dob && ($dob =~ /.*?(\d{3,4})/)) {
			if($dob =~ /^(Abt|ca?)\.?\s*(.+)/i) {
				my $year = $2;
				if($year =~ /^[A-Z]{3}\s(.+)/i) {
					$yob = "c$1";	# Get the "1951" from "Feb 1951"
				}
				$yob = "c$year";
			} else {
				$yob = $1;
			}
		} else {
			$dob = get_value({ person => $self, value => 'baptism date' });
			if($dob && ($dob =~ /.*?(\d{3,4})/)) {
				$yob = "c$1";
			}
		}

		my $dod = get_value({ person => $self, value => 'death date' });

		my $yod;	# Year of death
		if($dod && ($dod =~ /.*?(\d{3,4})/)) {
			$yod = $1;
		} else {
			$dod = get_value({ person => $self, value => 'burial date' });
			if($dod && ($dod =~ /.*?(\d{3,4})/)) {
				$yod = "c$1";
			}
		}

		$rc .= ' ' if($yob || $yod);

		if($yob) {
			$rc .= "$yob ";
		}

		$rc .= '-' if($yob || $yod);

		if($yod) {
			return "$rc $yod";
		}
	}

	if((!defined($rc)) && $opts{'w'}) {
		if($opts{'f'}) {
			die "\nCan't determine the name for record " . $self->{'xref'};
		}
		red_warning({ "Can't determine the name for record " . $self->{'xref'} });
		return '';
	}

	$rc =~ tr/"/'/;	# fix issues with Graphviz and others - compatibility with ged2site

	return $rc;
}

sub Gedcom::Individual::as_sort_key
{
	my $self = shift;
	my $surname = $self->surname();
	my $given_names = $self->given_names();

	if($surname && length($surname)) {
		if($given_names) {
			if($surname =~ /\s(.+?)$/) {
				$surname = $1;
			}
			return normalize_name("$surname, $given_names");
		} else {
			return normalize_name($surname) . ', ZZZZZ';
		}
	} elsif($given_names) {
		return 'ZZZZZ, ' . normalize_name($given_names);
	}

	my $name = $self->name();

	$name =~ s/\///g;
	$nameparser->parse($name);

	my %name_components = $nameparser->components();
	my $first_name = $name_components{'given_name_1'};
	my $middle_name = $name_components{'middle_name'};
	$surname = $name_components{'surname_1'};
	if($name_components{'surname_2'}) {
		$surname .= ' ' . $name_components{'surname_2'};
	}
	my $rest;
	if($name_components{'non_matching'}) {
		if($name =~ /(\w+)\s(\w+)\s(\w+)\s(\w+)$/) {
			# Name parser doesn't parse names like this very well
			$first_name = $1;
			$middle_name = "$2 $3";
			$surname = $4;
		} else {
			if($surname) {
				$surname .= ' ';
			}
			$rest = $name_components{'non_matching'};
			if($rest =~ /(.+) $/) {
				$rest = $1;
			}
		}
	} elsif(!defined($surname)) {
		$surname = $self->surname();
	}

	my $rc;

	if($surname) {
		$rc = normalize_name($surname);
		if(my $suffix = $name_components{'suffix'}) {
			$rc .= " $suffix";
		}
	} else {
		$rc = 'ZZZZZZ';
	}

	if($first_name) {
		$rc .= ", $first_name";
	} elsif($given_names) {
		$rc .= ", $given_names";
	}

	if($middle_name) {
		$rc .= " $middle_name";
	} elsif($name =~ /\s([A-Z])\s.+/) {
		# Just an initial has been given
		$rc .= " $1";
	}

	if($rest) {
		$rc .= $rest;
	}

	if((!defined($rc)) && $opts{'w'}) {
		if($opts{'f'}) {
			die "\nCan't determine the name for record " . $self->{'xref'};
		}
		red_warning({ "Can't determine the name for record " . $self->{'xref'} });
		return '';
	}

	return $rc;
}

sub normalize_name
{
	# my $name = shift;

	# my $rc;
	# foreach my $word(split(/-| |'/, lc($name))) {
		# $rc .= '-' if($rc && ($name =~ /-/));
		# $rc .= "'" if($rc && ($name =~ /'/));
		# $rc .= ' ' if($rc && ($name =~ / /));
		# $rc .= ucfirst($word);
	# }

	# return $rc;

	return Lingua::EN::NameCase::nc(shift);
}

sub Gedcom::Individual::pronoun
{
	my $self = shift;

	my $sex = get_value({ person => $self, value => 'sex' });

	if(defined($sex)) {
		if($sex eq 'F') {
			return 'She';
		}
		if($sex eq 'M') {
			return 'He';
		}
	}
	return 'They';
}

sub Gedcom::Individual::possessive
{
	my $self = shift;

	my $rc = {
		'He' => 'His',
		'She' => 'Her',
		'They' => 'Their',
	};

	return $rc->{$self->pronoun()};
}

# FIXME: currently only finds ancestors
# TODO: find in-laws
# See http://www.myrelative.com/html/relationship.html for inspiration
sub Gedcom::Individual::relationship {
	my $self = shift;
	my $other = shift;

	return $self->relationship_up($other) || $self->relationship_down($other);
}

sub Gedcom::Individual::relationship_up
{
	my $self = shift;
	my $other = shift;

	unless(@myancestors) {
		@myancestors = $self->ancestors();
	}
	return unless @myancestors;

	my $sex = get_value({ person => $other, value => 'sex' });
	if((!defined($sex)) || ($sex !~ /[MF]/)) {
		if($opts{'f'}) {
			die "\n", $other->as_string(), ": unknown sex\n";
		}
		if($opts{'w'}) {
			red_warning({ person => $other, warning => 'unknown sex' });
		}
		return;
	}

	foreach my $person1(@myancestors) {
		die if($person1 eq $self);
		if($person1 eq $other) {
			# Direct ancestor
			my $steps = stepsabove($self, $other, 0);
			my $title = ($sex eq 'M') ? 'father' : 'mother';
			if($steps >= 5) {
				$steps -= 2;
				return "$steps times great-grand$title";
			} elsif($steps == 1) {
				return $title;
			} elsif($steps == 2) {
				return "grand$title";
			} elsif($steps == 3) {
				return "great-grand$title";
			} elsif($steps == 4) {
				return "great-great-grand$title";
			} elsif($steps <= 0) {
				if(my $spouse = $other->spouse()) {
					if(stepsabove($self, $spouse, 0)) {
						# The caller should now check
						# the spouse's relationship
						return;
					}
				}
				if($opts{'f'}) {
					die $other->as_string(), ": BUG - not a direct ancestor, steps = $steps";
				} else {
					warn colored($other->as_string() . ": BUG - not a direct ancestor, steps = $steps", 'red');
				}
			}
		}
	}

	my @ancestors2 = $other->ancestors();
	return unless(@ancestors2);

	foreach my $person1(@myancestors) {
		foreach my $person2(@ancestors2) {
			# print $person1->as_string(), '->', $person2->as_string(), "\n";
			# G::C is noisy
			# TODO - apparently fixed in Github, awaiting new version on CPAN
			# my $c = Gedcom::Comparison->new($person1, $person2);
			# if($c->identical($person2)) {
				# die 'match found';
			# }
			if($person1 eq $person2) {
				# Common ancestor is $person2
				my $steps1 = stepsabove($self, $person1, 0);
				return if($steps1 > 7);
				my $steps2 = stepsabove($other, $person2, 0);
				return if($steps2 > 7);

				# It would be nice to do this as an algorithm, but this will do
				# e.g. 2, 1 is uncle
				my %male_relationships = (
					1 << 8 | 1 => 'brother',
					1 << 8 | 2 => 'nephew',
					2 << 8 | 1 => 'uncle',
					3 << 8 | 1 => 'great-uncle',
					4 << 8 | 1 => 'great-great-uncle',
					2 << 8 | 2 => 'cousin',
					2 << 8 | 3 => 'first cousin once-removed',
					3 << 8 | 2 => 'first cousin once-removed',
					2 << 8 | 4 => 'first cousin twice-removed',
					3 << 8 | 3 => 'second cousin',
					3 << 8 | 4 => 'second cousin once-removed',
					4 << 8 | 2 => 'first cousin twice-removed',
					4 << 8 | 3 => 'second cousin once-removed',
					5 << 8 | 2 => 'first cousin three-times-removed',
					5 << 8 | 3 => 'second cousin twice-removed',
					5 << 8 | 4 => 'third cousin once-removed',
					6 << 8 | 3 => 'second cousin three-times-removed',
					6 << 8 | 4 => 'third cousin twice-removed',
					6 << 8 | 5 => 'fourth cousin once-removed',
					6 << 8 | 6 => 'fifth cousin',
					7 << 8 | 3 => 'second cousin four-times-removed',
					7 << 8 | 4 => 'third cousin three-times-removed',
					7 << 8 | 5 => 'fourth cousin twice-removed',
					7 << 8 | 6 => 'fifth cousin once-removed',
				);
				my %female_relationships = (
					1 << 8 | 1 => 'sister',
					1 << 8 | 2 => 'niece',
					2 << 8 | 1 => 'aunt',
					2 << 8 | 2 => 'cousin',
					2 << 8 | 3 => 'first cousin once-removed',
					2 << 8 | 4 => 'first cousin twice-removed',
					3 << 8 | 1 => 'great-aunt',
					3 << 8 | 2 => 'first cousin once-removed',
					3 << 8 | 3 => 'second cousin',
					3 << 8 | 5 => 'second cousin twice-removed',
					3 << 8 | 4 => 'second cousin once-removed',
					4 << 8 | 1 => 'great-great-aunt',
					4 << 8 | 2 => 'first cousin twice-removed',
					4 << 8 | 3 => 'second cousin once-removed',
					5 << 8 | 2 => 'first cousin three-times-removed',
					5 << 8 | 3 => 'second cousin twice-removed',
					5 << 8 | 4 => 'third cousin once-removed',
					6 << 8 | 3 => 'second cousin three-times-removed',
					6 << 8 | 4 => 'third cousin twice-removed',
					6 << 8 | 5 => 'fourth cousin once-removed',
					6 << 8 | 6 => 'fifth cousin',
					7 << 8 | 3 => 'second cousin four-times-removed',
					7 << 8 | 4 => 'third cousin three-times-removed',
					7 << 8 | 5 => 'fourth cousin twice-removed',
					7 << 8 | 6 => 'fifth cousin once-removed',
				);

				my $rc = ($sex eq 'M') ?
					$male_relationships{($steps1 << 8) | $steps2} :
					$female_relationships{($steps1 << 8) | $steps2};
				if(defined($rc) && ($rc =~ /cousin/)) {
					my $myfather = $self->father();
					my $mymother = $self->mother();
					if($myfather && (stepsabove($myfather, $person2, 0) > 0)) {
						$rc .= ' on your father\'s side';
					} elsif($mymother && (stepsabove($mymother, $person2, 0) > 0)) {
						$rc .= ' on your mother\'s side';
					}
				}
				# print "$steps1, $steps2\n" if(!defined($rc));

				return $rc;
			}
		}
	}
}

sub Gedcom::Individual::relationship_down
{
	my $self = shift;
	my $other = shift;

	unless(@mydescendents) {
		@mydescendents = $self->descendents();
	}
	return unless @mydescendents;

	my $sex = get_value({ person => $other, value => 'sex' });
	if((!defined($sex)) || ($sex !~ /[MF]/)) {
		if($opts{'f'}) {
			die "\n", $other->as_string(), ": unknown sex\n";
		}
		if($opts{'w'}) {
			red_warning({ person => $other, warning => 'unknown sex' });
		}
		return;
	}

	foreach my $person1(@mydescendents) {
		die if($person1 eq $self);
		if($person1 eq $other) {
			# Direct desendent
			my $steps = stepsabove($other, $self, 0);
			my $title = ($sex eq 'M') ? 'son' : 'daughter';
			if($steps >= 5) {
				$steps -= 2;
				return "$steps times great-grand$title";
			} elsif($steps == 1) {
				return $title;
			} elsif($steps == 2) {
				return "grand$title";
			} elsif($steps == 3) {
				return "great-grand$title";
			} elsif($steps == 4) {
				return "great-great-grand$title";
			} elsif($steps <= 0) {
				if(my $spouse = $other->spouse()) {
					if(stepsabove($self, $spouse, 0)) {
						# The caller should now check
						# the spouse's relationship
						return;
					}
				}
				if($opts{'f'}) {
					die $other->as_string(), ": BUG - not a direct ancestor, steps = $steps";
				} else {
					warn colored($other->as_string() . ": BUG - not a direct ancestor, steps = $steps", 'red');
				}
			}
		}
	}
}

sub stepsabove
{
	my $person = shift;
	my $target = shift;
	my $count = shift;

	return -1 if($count == -1);

	if($person eq $target) {
		return $count;
	}

	my @father = $person->father();
	if(my $father = $father[0]) {
		my $rc = stepsabove($father, $target, $count + 1);
		return $rc if($rc != -1);
	}

	my @mother = $person->mother();
	if(my $mother = $mother[0]) {
		return stepsabove($mother, $target, $count + 1);
	}

	return -1;
}

sub year
{
	my %params = (ref($_[0]) eq 'HASH') ? %{$_[0]} : @_;

	my $string = $params{'string'} || $params{'date'};

	if(!defined($string)) {
		$string = $params{'record'};
		return unless($string);

		if(ref($string) eq 'Gedcom::Record') {
			$string = $string->date();
			return unless($string);
		}
	}

	if($string =~ /^\d{3,4}$/) {
		return "in $string";
	}
	if($string =~ /^(Abt|ca?)\.?\s*(.+)/i) {
		if($params{'circa'}) {
			return $params{'circa'} . " $2";
		}
		return "c. $2";
	}
	if($string =~ /^bet (.+) and (.+)/i) {
		my $from = year({ %params, string => $1 });
		my $to = year({ %params, string => $2 });
		$from =~ s/^(in|on|c.) //;
		$to =~ s/^(in|on|c.) //;
		return "from $from to $to";
	}

	if($string =~ /(.+)\s(\d{4})\/\d{2}/) {
		my $year = $2 + 1;
		if($opts{'w'}) {
			my $person = $params{'person'};
			if($opts{'f'}) {
				die $person->as_string(), ": old-style date ($string) should be in $year";
			}
			red_warning({ person => $person, warning => "old-style date ($string) should be in $year" });
		}
		$string = "$1 $year";
	}

	if(($string =~ /^\d/) && ($string !~ /[a-z]$/i)) {
		my $person = $params{'person'};
		if($string =~ /^31 Nov/) {
			if($opts{'f'}) {
				die $person->as_string(), ": $string is invalid, there are only 30 days in November";
			}
			if($opts{'w'}) {
				red_warning({ person => $person, warning => "$string is invalid, there are only 30 days in November" });
			}
			return;
		}
		if(my $d = date_parser_cached(date => $string)) {
			$d = $dfn->parse_datetime($d->{'canonical'});
			if(my $must_postdate = $params{'must_postdate'}) {
				if($opts{'f'}) {
					die $person->as_string(), ": Something is wrong with the date $string which should be after ", $must_postdate->strftime('%x') if($d < $must_postdate);
				}
				if($opts{'w'}) {
					red_warning({ person => $person, warning => "something is wrong with the date $string which should be after " . $must_postdate->strftime('%x') }) if($d < $must_postdate);
				}
			}
			if(my $must_predate = $params{'must_predate'}) {
				if($opts{'f'}) {
					die $person->as_string(), ": Something is wrong with the date $string which should be before ", $must_predate->strftime('%x') if($d > $must_predate);
				}
				if($opts{'w'}) {
					red_warning({ person => $person, warning => "something is wrong with the date $string which should be before " . $must_predate->strftime('%x') }) if($d > $must_predate);
				}
			}
			return 'on ' . $d->strftime('%x');
		}
		if($@) {
			# RT 107354
			chomp $@;
			if($opts{'f'}) {
				if($person) {
					die $person->as_string() . ": $@";
				}
				die $@;
			}
			if($opts{'w'}) {
				red_warning({ person => $person, warning => $@ });
			}
		}
		return "on $string";
	}
	if($string =~ /^bef.? (\d{3,4})/i) {
		return "before $1";
	}
	if($string =~ /^by.? (\d{3,4})/i) {
		return "by $1";
	}
	if($string =~ /^By (\d{3,4})/i) {
		my $person = $params{'person'};
		if($opts{'f'}) {
			if($person) {
				die $person->as_string() . " says 'By' instead of 'Bef'";
			}
			die "Got 'By' instead of 'Bef'";
		}
		if($opts{'w'}) {
			if($person) {
				red_warning({ person => $person, warning => "says 'By' instead of 'Bef'" });
			} else {
				warn colored("Got 'By' instead of 'Bef'", 'red');
			}
		}
		return "before $1";
	}

	$string = ucfirst(lc($string));
	return ($string =~ /\d$/) ? "in $string" : "on $string";
}

sub place
{
	my %params = (ref($_[0]) eq 'HASH') ? %{$_[0]} : @_;

	my $place = $params{'place'};
	my $address = $params{'address'};

	if(!defined($place)) {
		$place = $params{'record'};
		return unless($place);

		if(ref($place) eq 'Gedcom::Record') {
			$address = $place->address();
			if(ref($address) eq 'Gedcom::Record') {
				$place = getaddress($address);
				$address = undef;
			} else {
				$place = $place->place();
			}
			return unless($place);
		}
	} elsif(ref($address) eq 'Gedcom::Record') {
		$place = getaddress($address);
		$address = undef;
	}

	if((!defined($address)) &&
	   ($place !~ /USA$/) && ($place !~ /United States$/) &&
	   ($place =~ /(.+),\s*(.+,\s*.+,\s*.+)$/)) {
		$address = $1;
		$place = $2;
	}

	# Google maps (and possibly others) sometimes works better with full names
	if($address) {
		if($address =~ /(.+)\sSt\.?$/) {
			$address = "$1 Street";
		} elsif($address =~ /(.+)\sAve\.?$/) {
			$address = "$1 Avenue";
		} elsif($address =~ /(.+)\sRd\.?$/) {
			$address = "$1 Road";
		}
	}

	my $there = $params{'there'};

	if($there && ($place eq $there)) {
		if($address) {
			if($place =~ /^(.+?),.+,/) {
				return " at $address, $1";
			}
		} else {
			return ' there';
		}
	}

	if($params{'person'}) {
		validate_place({ person => $params{'person'}, place => $place });
	}

	if($place =~ /^\d/) {
		if(my $places_printed = $params{'places_printed'}) {
			$places_printed->{" at$place"} = 1;
			if($place =~ /(.+),(.+?),(.+?),(.+?),(.+?)$/) {
				if($places_printed->{" in$3,$4,$5"}) {
					$places_printed->{"in $1,$2,$3"} = 1;
					return " at $1,$2,$3";
				}
			}
			if($place =~ /(.+),(.+?),(.+?),(.+?)$/) {
				$places_printed->{" in$2,$3,$4"} = 1;
			}
		}
		return " at $place";
	}

	if($place eq 'USA') {
		return ' in the USA';
	}

	if($address) {
		$place = " at $address, $place";
	} elsif($params{'nopreposition'}) {
		$place = " $place";
	} else {
		$place = " in $place";
	}

	# Only print the town if the location has already been printed
	if(my $places_printed = $params{'places_printed'}) {
		if($places_printed->{$place} && $place =~ /^(.+?),/) {
			return $1;
		}
		if($place =~ /(.+),(.+?),(.+?),(.+?)$/) {
			my $str = "$2,$3,$4";
			if($params{'person'}) {
				validate_place({ person => $params{'person'}, place => $place });
			}
			if($places_printed->{" in$str"}) {
				if(($4 eq ' USA') || ($4 eq ' Canada')) {
					return "$1,$3";
				}
				return $address ? "$1,$2" : "$1 in$2";
			}
			if($places_printed->{" at$str"}) {
				return "$1,$2";
			}
			$str = "$3,$4";
			if($places_printed->{" in$str"}) {
				return "$1,$2,$3";
			}
			if($places_printed->{" at$str"}) {
				return "$1,$2,$3";
			}
			$places_printed->{" in$str"} = 1;
			$places_printed->{" in$2,$3,$4"} = 1;
		} elsif($place =~ /(.+),(.+),(.+)$/) {
			if($places_printed->{" in$2,$3"}) {
				# We did place, county, country before, so just
				# return place, county
				return "$1,$2";
			}
			$places_printed->{" in$2,$3"} = 1;
		}
		$places_printed->{$place} = 1;
	}
	return $place;
}

sub getaddress {
	my $address = shift;

	my $rc;

	if(my $city = $address->city()) {
		$rc = $city;
	}
	if(my $state = $address->state()) {
		if($rc) {
			$rc .= ', ';
		}
		$rc .= $state;
	}
	if(my $country = $address->country()) {
		if($rc) {
			$rc .= ', ';
		}
		$rc .= $country;
	}

	return $rc;
}

sub notes
{
	my %params = (ref($_[0]) eq 'HASH') ? %{$_[0]} : @_;

	my $record = $params{'record'};
	my $paragraph = $params{'paragraph'};
	my @notes = $record->get_record('note');

	# my @deathnotes = get_value({ person => $person, value => 'death note' });
	# my @deathnotes = $person, value => 'death note' });
	my $rc = $record->get_value();
	$rc .= '.' if($rc && !scalar(@notes));

	foreach my $note(@notes) {
		if($note) {
			if(ref($note) eq 'Gedcom::Record') {
				if($note->cont()) {
					my $n = $note->value();
					$n =~ s/\r//g;
					$n =~ s/\.$//;
					foreach my $c($note->cont()) {
						if((!ref($c)) && length($c)) {
							$c =~ s/\s\s+/ /g;
							$c =~ s/\.$//;
							if($n =~ /[;:]$/) {
								$n .= " $c";
							} else {
								$n .= ".  $c";
							}
						}
					}
					$note = $n;
				} elsif($note->conc()) {
					my $n = $note->value();
					$n =~ s/\r//g;
					$n =~ s/\.$//;
					foreach my $c($note->conc()) {
						if((!ref($c)) && length($c)) {
							$c =~ s/\s\s+/ /g;
							$n .= $c;
						}
					}
					$note = $n;
				} else {
					$note = $note->value();
				}
			}
			$note =~ s/\r//g;
			$note =~ tr/\n/ /;
			$note =~ s/\.$//;
			if($paragraph) {
				if($rc) {
					$rc .= "\n";
				}
				if($opts{'B'}) {
					$rc .= '    ';
				} else {
					$rc .= "\t";
				}
				$rc .= "$note.";
			} else {
				if($rc) {
					$rc .= '  ';
				}
				$rc .= "$note.";
			}
		}
	}
	if($rc) {
		$rc =~ s/ $//;
		$rc =~ s/\xe2\x80\x9c/"/g;	# left quotation
		$rc =~ s/\xe2\x80\x9d/"/g;	# right quotation
		$rc =~ s/\xe2\x80\x99/'/g;
		$rc =~ s/[\x93\x94]/"/g;
		$rc =~ s/[\x91\x92]/'/g;

		if(defined($ENV{'LANG'})) {
			if($ENV{'LANG'} =~ /^en_US/) {
				$rc = Lingua::EN::ABC::b2a($rc);
			} elsif($ENV{'LANG'} =~ /^en_GB/) {
				$rc = Lingua::EN::ABC::a2b($rc);
			}
		}
	}
	return $rc;
}

sub validate_place
{
	my %params = (ref($_[0]) eq 'HASH') ? %{$_[0]} : @_;

	my $place = $params{'place'};
	die 'place is not optional' unless $place;

	$place =~ s/^\s+//;
	if($places{$place}) {
		return $places{$place};
	}

	# US and Canada are more logical, using city,county,state,country, than other countries
	if($opts{'w'} && (($place !~ /,.*,.*,.*/) || ($place =~ /USA|Canada/i))) {
		if($place =~ /(.*),\s*Independent Cities\s*(.*)/i) {
			$place = "$1$2";
		}
		$place =~ s/^(in|at)\s//;
		if($places{$place}) {
			return $places{$place};
		}
		# my $ap;
		# my $p = $place;
		# if(($place =~ /USA$/) || ($place =~ /United States$/)) {
			# $ap = Lingua::EN::AddressParse->new(country => 'US', auto_clean => 1, force_case => 1, force_post_code_flag => 0);
		# } elsif($place =~ /England$/) {
			# $ap = Lingua::EN::AddressParse->new(country => 'GB', auto_clean => 1, force_case => 1, force_post_code_flag => 0);
			# $p .= ', United Kingdom';
		# }
		# if($ap) {
			# my $error = $ap->parse("$address, $p");
			# print $ap->report();
		# }
		if(($place =~ /USA$/) || ($place =~ /United States$/)) {
			if(my $href = Geo::StreetAddress::US->parse_location($place)) {
				if($href->{'state'} && !$us->{code2state}{$href->{'state'}}) {
					my $person = $params{'person'};
					if($opts{'f'}) {
						die $person->as_string, ": Unknown state in $place";
					}
					red_warning({ person => $person, warning => "Unknown state in $place" });
				}
			}
		}

		my $town = $place;
		if($place =~ /,\s*(.+,.+,.+,.+)$/) {
			# Use only the town part
			$town = $1;
		}
		if($opts{'w'} && !$geocoder->geocode($town)) {
			# Don't die because there are many
			# false positives as locations
			# may no longer exist
			if(my $person = $params{'person'}) {
				if($opts{'W'}) {
					print STDERR $person->as_string({ include_years => 1 }), ": unknown location '$place'\n";
				} else {
					my @call_details = caller(0);
					warn colored($person->as_string({ include_years => 1 }) . ": unknown location '$place' at line " . $call_details[2], 'red');
				}
			} else {
				if($opts{'W'}) {
					print STDERR "Unknown location $place\n";
				} else {
					warn colored("Unknown location $place", 'red');
				}
			}
			$places{$place} = 0;
			$places{$town} = 0;
			return 0;
		}
		$places{$town} = 1;
	}
	$places{$place} = 1;
	return 1;
}

sub places_are_the_same
{
	my %params = (ref($_[0]) eq 'HASH') ? %{$_[0]} : @_;

	my $record1 = $params{'first'};
	my $record2 = $params{'second'};

	die 'first is not optional' unless $record1;
	die 'second is not optional' unless $record2;

	my $place1 = $record1->place();
	return 0 unless(defined($place1));
	my $place2 = $record2->place();
	return 0 unless(defined($place2));

	if(my $person = $params{'person'}) {
		validate_place({ person => $person, place => $place1 });
		validate_place({ person => $person, place => $place2 });
	}

	if(my $address = $record1->address()) {
		$place1 = "$address, $place1";
	}
	if(my $address = $record2->address()) {
		$place2 = "$address, $place2";
	}
	return $place1 eq $place2;
}

sub print_sibling_baptism
{
	my %params = (ref($_[0]) eq 'HASH') ? %{$_[0]} : @_;

	my $person = $params{'person'};
	my $siblings = $params{'siblings'};
	my $date = $params{'date'};
	my $birthdate = $params{'birthdate'};

	return '' if(scalar(@{$siblings}) == 0);

	my @onsameday;
	foreach my $sibling(@{$siblings}) {
		my $dateofsiblingbaptism = get_value({ person => $sibling, value => 'baptism date' });
		if($dateofsiblingbaptism && ($dateofsiblingbaptism eq $date)) {
			push @onsameday, $sibling;
		}
	}
	my $allsamesex = 1;
	if(scalar(@onsameday) > 1) {
		foreach my $sibling(@onsameday) {
			if($sibling->sex() ne $person->sex()) {
				$allsamesex = 0;
				last;
			}
		}
		if($allsamesex) {
			foreach my $sibling(@onsameday) {
				my $dateofsiblingbirth = get_value({ person => $sibling, value => 'birth date' });
				if($dateofsiblingbirth && $birthdate && ($dateofsiblingbirth eq $birthdate)) {
					$allsamesex = 0;	# Fudge to force special twin handler
				}
			}
		}
	} else {
		$allsamesex = 0;
	}

	if($allsamesex) {
		return ', the same day as ' . lcfirst($person->possessive()) . ' ' .
			($onsameday[0]->sex() eq 'M' ? 'brothers ' : 'sisters ') .
			Lingua::EN::Inflect::WORDLIST((map { $_->given_names() } @onsameday), {final_sep => ''});
	}
	my $count = 0;
	my $rc = '';
	foreach my $sibling(@onsameday) {
		if($count == 0) {
			$rc .= ', the same day as ';
		} elsif($count < (scalar(@onsameday) - 1)) {
			$rc .= ', ';
		} elsif($count == (scalar(@onsameday) - 1)) {
			$rc .= ' and ';
		}
		$rc .= lcfirst($person->possessive()) . ' ';
		my $dateofsiblingbirth = get_value({ person => $sibling, value => 'birth date' });
		if($dateofsiblingbirth && $birthdate && ($dateofsiblingbirth eq $birthdate)) {
			$rc .= 'twin ';
		}
		$rc .= ($sibling->sex() eq 'M' ? 'brother ' : 'sister ') .
			$sibling->given_names();
		$count++;
	}
	return $rc;
}

sub red_warning
{
	if($opts{'w'}) {
		my %params = (ref($_[0]) eq 'HASH') ? %{$_[0]} : @_;

		die "What do you want to say?" unless($params{'warning'});

		if($params{'person'}) {
			my @call_details = caller(0);
			if($opts{'W'}) {
				print STDERR $params{'person'}->as_string(middle_names => 1), ': ', $params{'warning'}, "\n";
			} else {
				warn colored(['red'], $params{'person'}->as_string(), ': ', $params{'warning'}, ' at line ', $call_details[2]);
			}
		} else {
			if($opts{'W'}) {
				print STDERR lcfirst($params{'warning'}), "\n";
			} else {
				warn colored(lcfirst($params{'warning'}), 'red');
			}
		}
		# my $i = 0;
		# while((my @call_details = (caller($i++)))) {
			# print STDERR "\t", colored($call_details[1] . ':' . $call_details[2] . ' calling function ' . $call_details[3], 'red'), "\n";
		# }
	}
}

# Cache gedcom values
sub get_value
{
	my %params = (ref($_[0]) eq 'HASH') ? %{$_[0]} : @_;

	if($fetcher) {
		my $args = {
			object => $params{'person'},
			message => 'get_value',
			arg => $params{'value'}
		};

		# Doesn't use the prefetching feature, but will automatically cache which is nice
		# $fetcher->prime($args);
		return $fetcher->get($args);
	}
	return $params{'person'}->get_value($params{'value'});
}

sub get_source
{
	my %params = (ref($_[0]) eq 'HASH') ? %{$_[0]} : @_;

	my $args = {
		object => $params{'gedcom'},
		message => 'get_source',
		arg => $params{'source'}
	};

	# Doesn't use the prefetching feature, but will automatically cache which is nice
	# $fetcher->prime($args);
	return $fetcher->get($args);
}

sub must_predate
{
	return unless($opts{'w'});

	my %params = (ref($_[0]) eq 'HASH') ? %{$_[0]} : @_;

	my $person = $params{'person'};
	my $date = $params{'date'};
	my $predate = $params{'predate'};

	return unless($params{'predate'} && $params{'date'});

	my $d1 = $dfn->parse_datetime($date);
	my $d2 = $dfn->parse_datetime($predate);

	if($d1->year() > $d2->year()) {
		if($opts{'f'}) {
			die $person->as_string(), ": Something is wrong with the date $date which should be before $predate";
		}
		red_warning({
			person => $person,
			warning => "something is wrong with the date $date which should be before $predate"
		});
	}
}

sub is_alive
{
	my %params = (ref($_[0]) eq 'HASH') ? %{$_[0]} : @_;

	my $person = $params{'person'};

	if($person->get_record('death') || get_value({ person => $person, value => 'death date' })) {
		return 0;
	}
	if($person->get_record('burial')) {
		return 0;
	}
	my $dob = get_value({ person => $person, value => 'birth date' });

	if(!defined($dob)) {
		return 0;	# Err on the side of caution
				# TODO: Look at children's lifespan for a clue
	}

	my $year = (localtime)[5];
	$year += 1900 if($year < 1900);

	if(($dob =~ /^\d{3,4}$/) && ($dob < ($year - 100))) {
		return 0;
	}
	if($dob =~ /^abt (\d{4})$/i) {
		$dob = $1;
	}
	if(($dob =~ /^\d/) && ($dob !~ /[a-z]$/i)) {
		if(my $d = date_parser_cached(date => $dob)) {
			$d = $dfn->parse_datetime($d->{'canonical'});
			if($d->strftime('%Y') < ($year - 120)) {
				return 0;
			}
		}
	}
	return 1;
}

sub make_filename_from_person
{
	my %params = (ref($_[0]) eq 'HASH') ? %{$_[0]} : @_;

	my $person = $params{'person'};

	my $rc = $person->as_string(include_years => 1);
	$rc =~ tr/ /-/s;
	$rc =~ tr/"/'/s;
	$rc =~ s/--+/-/g;
	# $rc =~ s/--/-/g;
	$rc =~ s/-$//;

	return "$rc.html";
}

# Genealogy::Gedcom::Date is expensive, so cache results
sub date_parser_cached
{
	my %params;

	if(ref($_[0]) eq 'HASH') {
		%params = %{$_[0]};
	} elsif(scalar(@_) % 2 == 0) {
		%params = @_;
	} else {
		$params{'date'} = shift;
	}

	my $date = $params{'date'};

	if($all_dates{$date}) {
		print "$date is already known\n" if($opts{'v'});
		return $all_dates{$date};
	}
	print "Parse date $date\n" if($opts{'v'});
	my $d;
	eval {
		$d = $date_parser->parse(date => $date);
	};
	if($d && (ref($d) eq 'ARRAY')) {
		$d = @{$d}[0];
		$all_dates{$date} = $d;
		return $d;
	}
}

sub date_to_datetime
{
	my %params;

	if(ref($_[0]) eq 'HASH') {
		%params = %{$_[0]};
	} elsif(scalar(@_) % 2 == 0) {
		%params = @_;
	} else {
		$params{'date'} = shift;
	}

	my $date = $params{'date'};
	if($date && ($date !~ /^\d{3,4}$/) && ($date =~ /^\d/)) {
		if(my $d = date_parser_cached($date)) {
			return $dfn->parse_datetime($d->{'canonical'});
		}
	}
}

sub descendents
{
	my $person = shift;
	my $l = shift;
	my @list = @{$l};

	my @children = $person->children();
	if(scalar(@children)) {
		foreach my $child(@children) {
			push @list, $child;
			my @spouses = $child->spouse();
			if(scalar(@spouses)) {
				push @list, @spouses;
			}
			@list = descendents($child, \@list);
		}
	}

	return @list;
}

sub ancestors
{
	my $person = shift;
	my $l = shift;
	my @list = @{$l};

	if(my $mother = $person->mother()) {
		push @list, $mother;
		@list = ancestors($mother, \@list);
		my @siblings = $mother->siblings();
		foreach my $sibling(@siblings) {
			push @list, $sibling;
			my @spouses = $sibling->spouse();
			if(scalar(@spouses)) {
				push @list, @spouses;
			}
			@list = descendents($sibling, \@list);
		}
	}
	if(my $father = $person->father()) {
		push @list, $father;
		@list = ancestors($father, \@list);
		my @siblings = $father->siblings();
		foreach my $sibling(@siblings) {
			push @list, $sibling;
			my @spouses = $sibling->spouse();
			if(scalar(@spouses)) {
				push @list, @spouses;
			}
			@list = descendents($sibling, \@list);
		}
	}

	return @list;
}

sub pdfprint
{
	my %params = (ref($_[0]) eq 'HASH') ? %{$_[0]} : @_;

	my $pdfpage = $params{'pdfpage'};

	die 'pdfprint: pdfpage is not optional' if(!defined($pdfpage));

	return 0 if($pdfpage->pagefull());

	my @lines = split(/\n/, wrap('    ', '', ($params{'string'})));

	if(scalar(@lines) >= $pdfpage->linesleft() - 1) {
		return 0;
	}

	my $text = $params{'text'};
	my $x = $params{'x'} || 40;

	foreach my $line (@lines) {
		$text->translate($x, $pdfpage->newline());
		if($params{'centre'}) {
			$text->text_center($line);
		} else {
			$text->text($line);
		}
	}
	return 1;
}

# Inspired by Tree::Family.  That module doesn't quite do what I want, so
# I've mercilessly re-used the ideas of what to do from it.
sub print_graphviz
{
	my %params = (ref($_[0]) eq 'HASH') ? %{$_[0]} : @_;

	my $fout = $params{'fout'};
	my $person = $params{'person'};
	my $colour = $params{'colour'};
	my $profile_image = $params{'profile_image'};

	if(!defined($colour)) {
		my $gender = get_value({ person => $person, value => 'sex' }) || $person->sex();
		if(defined($gender)) {
			$gender = $gender;
		} else {
			if($opts{'f'}) {
				die "\n", $person->as_string(), ": unknown sex\n";
			}
			if($opts{'w'}) {
				red_warning({ person => $person, warning => 'unknown sex' });
			}
			$gender = 'M';	# Avoid "Use of uninitialized value" in Tree::Family
		}
		$colour = ($gender eq 'M' ? '#093AB5' : '#C666B8');
	}

	print $fout $person->{'xref'}, ' [shape=box,fontsize="10",',
		"color=\"$colour\",";

	# if($params{'format'} eq 'dynamic') {
		# print $fout 'href="?page=people&entry=', $person->{'xref'}, '",';
	# } else {
		# print $fout 'href="', make_filename_from_person(person => $person), '",';
	# }

	my $label = $person->as_string();
	my $dob = get_value({ person => $person, value => 'birth date' });
	my $dod = get_value({ person => $person, value => 'death date' });

	my $thumbnail;

	# If you get 'Warning: No loadimage plugin for "jpeg:cairo"', do this
	# instead:
	# if(0) {
	if($profile_image && (defined($dod) || $opts{'l'})) {
		if(defined($dob)) {
			$dob .= "<TR><TD>b. $dob</TD></TR>";
		} else {
			$dob = '';
		}
		if(defined($dod)) {
			$dod .= "<TR><TD>d. $dod</TD></TR>";
		} else {
			$dod = '';
		}
		# Create a thumbnail
		my $image = Image::Magick->new();
		$image->read($profile_image);
		my ($thumb, $x, $y) = Image::Magick::Thumbnail::create($image, 100);
		my @thumbname = File::Basename::fileparse($profile_image);
		# use PNG to try to avoid
		#	'Warning: No loadimage plugin for "jpeg:cairo"'
		$thumbname[0] =~ s/\.jpg$/.png/;
		$thumbnail = "thumbs/$thumbname[0]";
		$thumb->Write($thumbnail);

		# FIXME: TABLE isn't supported by Graphviz
		print $fout "label=<<TABLE border=\"0\" cellborder=\"0\"><TR><TD><IMG SRC=\"thumbs/$thumbname[0]\" scale=\"true\"/></TD></TR><TR><TD>$label</TD></TR>$dob$dod</TABLE>>",
			",labelloc=b";

		# print $fout ",image=\"$profile_image\",labelloc=b";

		chmod 0444, $thumbnail;
	} elsif(defined($dod) || $opts{'l'}) {
		if(defined($dob)) {
			$label .= "\\nb. $dob";
		}
		if(defined($dod)) {
			$label .= "\\nd. $dod";
		}
		print $fout "label=\"$label\"";
	} else {
		print $fout "label=\"$label\"";
	}

	print $fout "];\n";

	return $thumbnail;
}

sub print_graphviz_generation
{
	my %params = (ref($_[0]) eq 'HASH') ? %{$_[0]} : @_;

	my $fout = $params{'fout'};
	my $person = $params{'person'};
	my $rank = $params{'rank'} + 1;
	$params{'rank'} = $rank;

	print $fout "} subgraph children$rank { rank=\"$rank\"; ";
	print_graphviz({ person => $person, fout => $fout, format => 'dynamic' });

	if(my $father = $person->father()) {
		print $fout $father->{'xref'}, ' -> ', $person->{'xref'}, ";\n";
	}

	if($person->sex() eq 'M') {
		# my @children = $person->children();
		my @children;
		foreach my $f($person->fams()) {
			@children = (@children, $f->children());
		}
		if(scalar(@children) > 0) {
			# TODO: sort by date of birth
			foreach my $child(@children) {
				if(!is_alive(person => $child)) {
					$params{'person'} = $child;
					print_graphviz_generation(\%params);
				}
			}
		}
	}
}

1;

package PDFPage;

our $pixelsperline = 16;	# point size 12

sub new
{
	my $class = shift;

	$pixelsperline = 16;

	return bless { y => 750, page => $pdf->page() }, $class;
}

sub newline
{
	my $self = shift;

	$self->{'y'} -= $pixelsperline;

	if($self->{'y'} <= 10) {
		my $i = 0;
		while((my @call_details = (caller($i++)))) {
			print STDERR "\t", $call_details[1], ':', $call_details[2], ' calling function ', $call_details[3], "\n";
		}
		die 'BUG: fallen too low vertically; y = ' . $self->{'y'};
	}

	return $self->{'y'};
}

sub pagefull
{
	my $self = shift;

	return $self->{'y'} <= $pixelsperline * 2;
}

sub linesleft
{
	my $self = shift;

	return ($self->{'y'} / $pixelsperline) - 1;	# round fractions down
}

sub y
{
	my $self = shift;
	my $y = shift;

	if($y) {
		if($y <= 10) {
			my $i = 0;
			while((my @call_details = (caller($i++)))) {
				print STDERR "\t", $call_details[1], ':', $call_details[2], ' calling function ', $call_details[3], "\n";
			}
			die "BUG: fallen too low vertically; y = $y";
		}

		$self->{'y'} = $y;
	}

	return $self->{'y'};
}

sub page
{
	my $self = shift;

	return $self->{'page'};
}

# TODO: DESTROY - add a page number
