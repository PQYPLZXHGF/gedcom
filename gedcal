#!/usr/bin/env perl

# Author Nigel Horne: njh@bandsman.co.uk
# Copyright (C) 2015-2016, Nigel Horne

# Usage is subject to licence terms.
# The licence terms of this software are as follows:
# Personal single user, single computer use: GPL2
# All other users (including Commercial, Charity, Educational, Government)
#	must apply in writing for a licence for use from Nigel Horne at the
#	above e-mail.

# FIXME: -a Goes through the entire file once for each day without remembering
#	anything
# TODO: add option to print in generations order rather than date order.
# TODO: make the colourisation of warnings optional
# TODO: write a post-processor to sort errors by type

# -a: all days otherwise just today
# -b: only print birthdays
# -c: Give citations on detailed listing
# -d: give a detailed lifetime information about the person
# -D: only print anniversaries of deaths
# -f: treat warnings as fatals, implies -w
# -H: Print an HTML calendar of this month
# -h: set the home person
# -m: month for -H calendar
# -l: include living people
# -p: print the biography of the given person
# -v: verbose - for debugging
# -w: print warning about unlikely data - a sort of lint for Gedcom files
# -y: year for -H calendar

use strict;
use warnings;
# use diagnostics;
# use warnings::unused;

use Gedcom;
use Genealogy::Gedcom::Date 2.01;
use Date::Parse;	# For strptime
use Getopt::Std;
use Geo::Coder::OSM;
use Term::ANSIColor;
use Lingua::EN::NameCase;
use Lingua::EN::NameParse;
use Lingua::EN::Numbers::Ordinate;
use DateTime::Duration;
use DateTime::Format::Natural;
use Tie::Static;
no lib '.';

my %opts;
getopts('abcdDfh:Hm:lp:wvy:', \%opts);
die "Usage: $0 [ -a ] [ -b ] [ -c ] [ -d ] [ -D ] [ -f ] [ -h home-person-name ] [ -H [ -m month ] [ -y year ] ] [ -l ] [ -p person-to-print ] [ -w ] filename [ filename2 ] \n" unless($ARGV[0]);

my $me;
my @myancestors;
my %warned;
my %printed;
my %places;

my $ged = Gedcom->new(gedcom_file => $ARGV[0], read_only => 1);
my $ged2;
if($ARGV[1]) {
	$ged2 = Gedcom->new(gedcom_file => $ARGV[1], read_only => 1);
}

if($opts{h}) {
	$me = $ged->get_individual($opts{h});
	unless($me) {
		die "$0: Can't find '$opts{h}' in $ARGV[0]";
	}
}

if($opts{'f'}) {
	$opts{'w'} = 1;
}

if($opts{'w'}) {
	die '-w option needs -d option' unless($opts{'d'});

	# Cache calls to openstreetmap
	require File::Spec;
	File::Spec->import();

	require HTTP::Cache::Transparent;
	HTTP::Cache::Transparent->import();

	my $cachedir = File::Spec->catfile(File::Spec->tmpdir(), 'cache', 'http-cache-transparent');

	HTTP::Cache::Transparent::init({
		BasePath => $cachedir,
		# Verbose => 1,
		NoUpdate => 60 * 60 * 24,
		MaxAge => 30 * 24
	}) || die "$0: $cachedir: $!";
}

my $date_parser = Genealogy::Gedcom::Date->new();
my $dfn = DateTime::Format::Natural->new();
my $geocoder = Geo::Coder::OSM->new();
my $nameparser = Lingua::EN::NameParse->new(extended_titles => 1, initials => 1);
my $ninemonths = DateTime::Duration->new(months => 9);

my @everyone;
unless($opts{'p'}) {
	@everyone = $ged->individuals();
}

if($opts{'c'} && !$opts{'d'}) {
	die '-c only makes sense with the -d option';
}
if($opts{'m'} && !$opts{'H'}) {
	die '-m only makes sense with the -H option';
}
if($opts{'y'} && !$opts{'H'}) {
	die '-y only makes sense with the -H option';
}

if($opts{'H'}) {
	die '-H only makes sense with the -d option' unless($opts{'d'});
	die '-a doesn\'t make sense with the -H option' if($opts{'a'});
	die '-h doesn\'t make sense with the -H option' if($opts{'h'});
	die '-p doesn\'t make sense with the -H option' if($opts{'p'});
	die '-H doesn\'t support citations' if($opts{'c'});

	require HTML::Table;

	my $dtl = DateTime::Locale->load($ENV{'LANG'});

	my @dow = @{$dtl->day_format_wide()};
	if($dtl->first_day_of_week() eq 7) {
		# e.g. US
		unshift @dow, pop @dow;
	}
	my $table = HTML::Table->new(-border => 1, -padding => 5, -head => \@dow);
	print '<html><body><font size="2">',
		'<style>table { empty-cells: show; }</style>';

	foreach my $day(0..6) {
		# $table->setCell(1, $day + 1, $days[$day]);
		$table->setColWidth($day, '14.29%');
		$table->setColVAlign($day, 'top');
	}

	my $month;
	if($opts{'m'}) {
		$month = $opts{'m'};
		if(($month =~ /\D/) || ($month < 1) || ($month > 12)) {
			die "$0: invalid month number $month";
		}
		$month--;
	} else {
		$month = (localtime)[4]; # 0..11
	}

	my $dt = DateTime->today();
	my $year;
	if($opts{'y'}) {
		$year = $opts{'y'};
		if($year !~ /\d{3,4}/) {
			die "$0: invalid year number $month";
		}
	} else {
		$year = $dt->year();
	}

	$dt = DateTime->last_day_of_month(month => $month + 1, year => $year);
	$dt->subtract(months => 1);
	$dt->add(days => 1);
	my $column = $dt->day_of_week();
	if($dtl->first_day_of_week() eq 7) {
		$column++;
		if($column == 8) {
			$column = 1;
		}
	}

	foreach my $column(1..7) {
		$table->setCell(2, $column, '&nbsp;');
	}

	my $row = 2;
	while($dt->month() == $month + 1) {
		$table->setCellVAlign($row, $column, 'top');
		$table->setCell($row, $column, '<font size="1">' . $dt->day());
		$dt->add(days => 1);
		if($dt->day() == 1) {
			last;
		}
		if($column == 7) {
			$row++;
			foreach my $column(1..7) {
				$table->setCell($row, $column, '&nbsp;');
			}
			$column = 1;
		} else {
			$column++;
		}
	}

	print "<center><h2>", @{$dtl->month_format_wide()}[$month], " $year</h2><center>";

	foreach my $day(1..29) {
		generate(day => $day, month => $month, year => $year, everyone => \@everyone, table => $table, dtl => $dtl);
	}
	if($month != 1) {
		generate(day => 30, month => $month, year => $year, everyone => \@everyone, table => $table, dtl => $dtl);
		if(($month == 0) || ($month == 2) || ($month == 4) || ($month == 6) || ($month == 7) || ($month == 9) || ($month == 11)) {
			generate(day => 31, month => $month, year => $year, everyone => \@everyone, table => $table, dtl => $dtl);
		}
	}
	$table->print();
	print '</font></body></html>';
} elsif($opts{a}) {
	die '-b and -a should not be given together' if($opts{'b'});
	die '-D and -a should not be given together' if($opts{'D'});
	die '-p and -a should not be given together' if($opts{'p'});

	foreach my $month(0..11) {
		foreach my $day(1..28) {
			generate(day => $day, month => $month, everyone => \@everyone);
		}
		if($month == 1) {
			if(($month % 100) == 0) {
				next if($month % 400);
			}
			next if($month % 4);
			generate(day => 29, month => $month, everyone => \@everyone);
			next;
		}
		generate(day => 29, month => $month, everyone => \@everyone);
		generate(day => 30, month => $month, everyone => \@everyone);
		if(($month == 0) || ($month == 2) || ($month == 4) || ($month == 6) || ($month == 7) || ($month == 9) || ($month == 11)) {
			generate(day => 31, month => $month, everyone => \@everyone);
		}
	}
	generate(day => -1, month => -1, everyone => \@everyone);
} elsif($opts{'b'}) {
	die '-b and -d should not be given together' if($opts{'d'});
	die '-b and -a should not be given together' if($opts{'a'});
	my($day, $month) = (localtime)[3,4];
	if($opts{'D'}) {
		print "Today's birthdays:\n";
	}
	generate(day => $day, month => $month, onlybirthdays => 1, onlydeaths => 0, everyone => \@everyone);
	if($opts{'D'}) {
		print "Today's anniversaries of deaths:\n";
		generate(day => $day, month => $month, onlybirthdays => 0, onlydeaths => 1, everyone => \@everyone);
	}
} elsif($opts{'D'}) {
	die '-D and -d should not be given together' if($opts{'d'});
	die '-D and -a should not be given together' if($opts{'a'});
	my($day, $month) = (localtime)[3,4];
	generate(day => $day, month => $month, onlybirthdays => 0, onlydeaths => 1, everyone => \@everyone);
} elsif($opts{'p'}) {
	die '-p and -D should not be given together' if($opts{'D'});
	die '-p and -b should not be given together' if($opts{'b'});

	my $person = $ged->get_individual($opts{p});
	if($person) {
		my($day, $month) = (localtime)[3,4];
		print_person(person => $person, day => $day, month => $month);
	} else {
		die "$0: Can't find '$opts{p}' in $ARGV[0]";
	}
} else {
	my($day, $month) = (localtime)[3,4];
	generate(day => $day, month => $month, everyone => \@everyone);
}

sub generate {
	my %params = (ref($_[0]) eq 'HASH') ? %{$_[0]} : @_;

	foreach my $person(@{$params{'everyone'}}) {
	# foreach my $person(sort { $a->get_value('last name') cmp $b->get_value('last name') } $ged->individuals()) {
		next if($me && ($person eq $me));

		if(!$printed{$person->{'xref'}}) {
			$params{'person'} = $person;
			print_person(\%params);
		}
	}
}

sub print_person
{
	my %params = (ref($_[0]) eq 'HASH') ? %{$_[0]} : @_;

	# Gather the information on this person
	my $person = $params{'person'};

	my $dob = get_value({ person => $person, value => 'birth date' });

	my $onlybirthdays = $params{'onlybirthdays'};
	my $onlydeaths = $params{'onlydeaths'};

	die "BUG: onlydeaths and onlybirths given" if($onlydeaths && $onlybirthdays);

	return if($onlybirthdays && !defined($dob));

	my $dod = get_value({ person => $person, value => 'death date' });

	return if($onlydeaths && !defined($dod));

	my $yod;	# Year of death
	if($dod && ($dod =~ /.*?(\d{3,4})/)) {
		$yod = $1;
	}

	my $yob;	# Year of birth
	if($dob && ($dob =~ /.*?(\d{3,4})/)) {
		$yob = $1;
	} elsif($dob) {
		if($opts{'w'} && !$warned{$person}) {
			if($opts{'f'}) {
				die $person->name(), ": invalid date of birth $dob\n";
			}
			warn $person->name(), ": invalid date of birth $dob\n";
			$warned{$person} = 1;
		}
	}

	if((!defined($opts{l})) && (!defined($yod)) && defined($yob) && ($yob > 1900)) {
		# Assuming living if we don't have a date of death and
		# they were born after 1900
		return;
	}

	unless($dob || $dod || $opts{'a'} || $opts{'p'}) {
		return;
	}

	print 'Checking ', $person->as_string({ include_years => 1 }), "\n" if($opts{'v'});

	my $print = 0;
	my $aob;
	my $aod;
	my $day = $params{'day'};
	my $month = $params{'month'};

	if($dob && ($dob !~ /^\d{4}$/)) {
		my @btime = strptime("$dob 12:00");
		if(defined($btime[3]) && ($btime[3] == $day) && ($btime[4] == $month) && $btime[5]) {
			$print = 1;
			if(!$opts{a}) {
				$aob = (localtime)[5] - $btime[5];
				if($aob <= 0) {
					$aob += 1900;
				}
			}
		}
	}
	return if($onlybirthdays && !defined($aob));

	if($dod && ($dod !~ /^\d{4}$/)) {
		my @dtime = strptime("$dod 12:00");
		if(defined($dtime[3]) && ($dtime[3] == $day) && ($dtime[4] == $month) && $dtime[5]) {
			$print = 1;
			if(!$opts{a}) {
				$aod = (localtime)[5] - $dtime[5];
				if($aod <= 0) {
					$aod += 1900;
				}
			}
		}
	}
	return if($onlydeaths && !defined($aod));

	return unless($print || ($day == -1) || $opts{'p'});

	if($opts{'w'} && !$person->validate_semantics()) {
		if($opts{'f'}) {
			die $person->as_string, ': failed consistency check';
		}
		red_warning({ person => $person, warning => 'failed consistency check' });
	}

	my @siblings = $person->siblings();
	my $mother = $person->mother();
	my $father = $person->father();
	my @spouses = $person->spouse();

	# TODO: Properly chart which spouse a child comes from
	# FIXME: This current algorithm misses children from all the marriages
	my $family;
	foreach my $f($person->fams()) {
		if($f->number_of_children()) {
			$family = $f;
			last;
		}
	}

	if($opts{'w'} && (!$family) && (scalar(@siblings) == 0) && (!$mother) && (!$father) && (scalar(@spouses) == 0)) {
		if($opts{'f'}) {
			die $person->as_string() . ': not connected to the tree';
		}
		red_warning({ person => $person, warning => 'not connected to the tree' });
	}

	my $year = $params{'year'} || (localtime)[5];
	$year += 1900 if($year < 1900);

	if($opts{'H'}) {
		my $start_of_month = DateTime->new(month => $month + 1, day => 1, year => $year);
		my $dt = DateTime->new(month => $month + 1, day => $day, year => $year);

		my $row = $dt->weekday_of_month();
		my $first_day_of_month = $start_of_month->day_of_week();
		if(($first_day_of_month < 7) && ($dt->day_of_week() < $first_day_of_month)) {
			$row++;
		}
		$row++;
		my $column = $dt->day_of_week();
		my $dtl = $params{'dtl'};

		if($dtl->first_day_of_week() eq 7) {
			$column++;
			if($column == 8) {
				$column = 1;
				$row++ unless($first_day_of_month == 7);
			}
		}
		die "BUG: row cannot be 8 or greater" if($row >= 8);

		my $table = $params{'table'};

		# print STDERR "$row, $column\n";
		my $str = $table->getCell($row, $column);
		if(index($str, $person->as_string()) != -1) {
			$printed{$person->{'xref'}} = 1;
			return;
		}
		$str .= '<br>' . $person->as_string();
		if($aob) {
			my $dob = get_value({ person => $person, value => 'birth date' });
			my $d = $date_parser->parse(date => $dob);
			if($d && (ref($d) eq 'ARRAY')) {
				$d = @{$d}[0];
				$d = $dfn->parse_datetime($d->{'canonical'});
				$str .= ' b' . $d->strftime('%Y');
			} else {
				red_warning({ person => $person, warning => "Can't parse date of birth '$dob'" });
			}
		}
		if($aod) {
			my $dod = get_value({ person => $person, value => 'death date' });
			my $d = $date_parser->parse(date => $dod);
			if($d && (ref($d) eq 'ARRAY')) {
				$d = @{$d}[0];
				$d = $dfn->parse_datetime($d->{'canonical'});
				$str .= ' d' . $d->strftime('%Y');
			} else {
				red_warning({ person => $person, warning => "Can't parse date of death '$dod'" });
			}
		}

		$table->setCell($row, $column, $str);
		$printed{$person->{'xref'}} = 1;
		return;
	}
	my $person2;
	if($ged2) {
		$person2 = $ged2->get_individual($person->as_string());
		if($opts{'w'}) {
			if(!defined($person2)) {
				if($opts{'f'}) {
					die $person->as_string() . ": not found in $ARGV[1]";
				}
				red_warning({
					person => $person,
					warning => "not found in $ARGV[1]"
				})
			}
		}
	}

	print $person->as_string({
		include_years => 1,
		nee => 1,
		middle_names => 1,
		title => 1,
	}), "\n";

	my $name = $person->name();
	$name =~ s/\///g;
	$nameparser->parse($name);
	my %name_components = $nameparser->components();
	my $firstname = $name_components{'given_name_1'};

	my ($birth_dt, $death_dt);
	my $birth = $person->get_record('birth');
	my $dateofbirth = get_value({ person => $person, value => 'birth date' });
	if((!$dateofbirth) && $birth) {
		$dateofbirth = $birth->date();
	}

	my $death = $person->get_record('death');
	my $dateofdeath = get_value({ person => $person, value => 'death date' });
	if((!$dateofdeath) && $death) {
		$dateofdeath = $death->date();
	}

	my %citations;
	my $citationcount = 0;
	my @birthcitations;
	my @deathcitations;
	if($opts{'c'}) {
		if($birth) {
			if($opts{'w'}) {
				foreach my $s($birth->source()) {
					if(!defined($ged->get_source($s))) {
						if($opts{'f'}) {
							die $person->as_string(), ': Citation is missing a source';
						}
						red_warning({ person => $person, warning => 'Citation is missing a source' });
					}
				}
			}
			my @s = sort { ($ged->get_source($a) && $ged->get_source($b)) ? $ged->get_source($a)->title() cmp $ged->get_source($b)->title() : 0 } $birth->source();
			my $previous;
			foreach my $src(@s) {
				$src = $ged->get_source($src) unless ref($src);
				if(defined($src) && $src->title()) {
					if($previous && ($src->title() eq $previous)) {
						next;
					}
					$previous = $src->title();
					push @birthcitations, ++$citationcount;
					$citations{$citationcount} = $src;
				}
			}
		}
		if($death) {
			my @s = $death->source();
			foreach my $src(@s) {
				$src = $ged->get_source($src) unless ref($src);
				my $seen;
				foreach my $bc(@birthcitations) {
					if($src eq $citations{$bc}) {
						push @deathcitations, $bc;
						$seen++;
						last;
					}
				}
				if(!$seen) {
					push @deathcitations, ++$citationcount;
					$citations{$citationcount} = $src;
				}
			}
		}
	}

	if($dateofbirth && ($dateofbirth !~ /^\d{4}$/) && ($dateofbirth =~ /^\d/)) {
		my $d;
		eval {
			$d = $date_parser->parse(date => $dateofbirth);
		};
		if($d) {
			$d = @{$d}[0];
			if($d) {
				$birth_dt = $dfn->parse_datetime($d->{'canonical'});
			}
		}
	}
	if($dateofdeath && ($dateofdeath !~ /^\d{4}$/) && ($dateofdeath =~ /^\d/)) {
		my $d;
		eval {
			$d = $date_parser->parse(date => $dateofdeath);
		};
		if($d) {
			$d = @{$d}[0];
			if($d) {
				$death_dt = $dfn->parse_datetime($d->{'canonical'});
			}
		}
	}
	if($opts{'d'}) {
		print "\t";

		my $placeofbirth = get_value({ person => $person, value => 'birth place' });
		if((!$placeofbirth) && $birth) {
			$placeofbirth = $birth->place();
		}

		my $baptism = $person->get_record('baptism');
		my $dateofbaptism = get_value({ person => $person, value => 'baptism date' });
		if((!$dateofbaptism) && $baptism) {
			$dateofbaptism = $baptism->date();
		}
		my $placeofbaptism = get_value({ person => $person, value => 'baptism place' });
		if((!$placeofbaptism) && $baptism) {
			$placeofbaptism = $baptism->place();
		}

		my $marriage = $person->get_record('marriage') || $person->get_record('fams marriage');
		if((!defined($marriage)) && scalar(@spouses)) {
			$marriage = $spouses[0]->get_record('marriage');
		}
		my $dateofmarriage = get_value({ person => $person, value => 'marriage date' });
		if((!$dateofmarriage) && $marriage) {
			$dateofmarriage = $marriage->date();
		}
		my $placeofmarriage = get_value({ person => $person, value => 'marriage place' });
		if((!$placeofmarriage) && $marriage) {
			$placeofmarriage = $marriage->place();
		}

		my $placeofdeath = get_value({ person => $person, value => 'death place' });
		if((!$placeofdeath) && $death) {
			$placeofdeath = $death->place();
		}

		my $burial = $person->get_record('burial');
		my $dateofburial = get_value({ person => $person, value => 'burial date' });
		if((!$dateofburial) && $burial) {
			$dateofburial = $burial->date();
		}
		my $placeofburial = get_value({ person => $person, value => 'burial place' });
		if((!$placeofburial) && $burial) {
			$placeofburial = $burial->place();
		}

		my $marriagecitation;
		my @burialcitations;
		if($opts{'c'}) {
			if($marriage) {
				my $src = $marriage->source();
				if($src) {
					$src = $ged->get_source($src) unless ref($src);
					if($birthcitations[0] && ($citations{$birthcitations[0]} eq $src)) {
						$marriagecitation = $birthcitations[0];
					} elsif($deathcitations[0] && ($citations{$deathcitations[0]} eq $src)) {
						$marriagecitation = $deathcitations[0];
					} else {
						$marriagecitation = ++$citationcount;
						$citations{$marriagecitation} = $src;
					}
				}
			}
			if($burial) {
				my @s = $burial->source();
				foreach my $src(@s) {
					$src = $ged->get_source($src) unless ref($src);
					my $seen;
					foreach my $dc(@deathcitations) {
						if($src eq $citations{$dc}) {
							push @burialcitations, $dc;
							$seen++;
							last;
						}
					}
					if(!$seen) {
						if($marriagecitation && ($citations{$marriagecitation} eq $src)) {
							push @burialcitations, $marriagecitation;
						} else {
							push @burialcitations, ++$citationcount;
							$citations{$citationcount} = $src;
						}
					}
				}
			}
		}

		my $pronoun = $person->pronoun();
		my $sex = $person->sex();
		my @occupations = $person->get_value('occupation');
		my @residences = $person->residence();

		my @children;
		my $numberofchildren = 0;
		if($family) {
			$numberofchildren = $family->number_of_children();
			@children = $family->children();
		}

		my $relationship;
		my $spouserelationship;
		my $spouse;
		my %places_printed;

		if($dateofbirth && $opts{'w'} && scalar(@siblings)) {
			foreach my $sibling(@siblings) {
				my $siblingbirth = get_value({ person => $sibling, value => 'birth date' });
				if($siblingbirth && ($siblingbirth eq $dateofbirth) && ($sibling->name() eq $person->name())) {
					if($opts{'f'}) {
						die $person->name(), ': Possible duplicate person';
					}
					red_warning({ person => $sibling, warning => 'possible duplicate person' });
				}
			}
		}

		if($me) {
			$relationship = $me->relationship($person, $father, $mother);
			if((!$relationship) && scalar(@spouses)) {
				foreach my $s(@spouses) {
					$spouserelationship = $me->relationship($s, $father, $mother);
					if($spouserelationship) {
						$spouse = $s;
						last;
					}
				}
			}
		}

		# TODO: print all occupations
		if($occupations[0]) {
			print 'A';
			if($occupations[0] =~ /^[aeiou]/i) {
				print 'n';
			}
			print ' ', lc($occupations[0]);
			if(!($father || $mother || $spouserelationship)) {
				print ', ';
			}
		}
		my $print_sibling_count = 0;
		if($father || $mother) {
			if(scalar(@occupations)) {
				print ' and the ';
			} else {
				print 'The ';
			}

			if($birth_dt) {
				if(scalar(@siblings)) {
					my $count = 1;
					$print_sibling_count = 1;
					foreach my $sibling(@siblings) {
						my $dob = get_value({ person => $sibling, value => 'birth date' });
						if($dob) {
							my $d;
							eval {
								$d = $date_parser->parse(date => $dob);
							};
							if($d) {
								$d = @{$d}[0];
							}
							if($d) {
								$d = $dfn->parse_datetime($d->{'canonical'});
								$count++ if($d && ($d < $birth_dt));
							} else {
								$print_sibling_count = 0;
								last;
							}
						}
					}
					if($print_sibling_count) {
						if((scalar(@siblings)) && ($count == (scalar(@siblings) + 1))) {
							print 'last';
						} else {
							print ordinate($count);
						}
						print ' of ', scalar(@siblings) + 1, ' children';
					} else {
						print 'child';
					}
				} else {
					# print ' only child of';
					print 'child';
				}
			} else {
				print 'child';
			}

			print ' of';

			if($father) {
				print ' ', $father->as_string();
				my @occupations = $father->get_value('occupation');
				# TODO: print all occupations
				if($occupations[0]) {
					print ' (a';
					if($occupations[0] =~ /^[aeiou]/i) {
						print 'n';
					}
					print ' ', lc($occupations[0]), ')';
				}
				if($mother) {
					print ' and';
				}
			}
			if($mother) {
				print ' ', $mother->as_string({ give_maidenname => 0 });
				my @occupations = $mother->get_value('occupation');
				# TODO: print all occupations
				if($occupations[0]) {
					print ' (a';
					if($occupations[0] =~ /^[aeiou]/i) {
						print 'n';
					}
					print ' ', lc($occupations[0]), ')';
				}
			}
			print ', ';
		}

		my $haveprintedspousename;
		if($relationship) {
			if($father || $mother || $occupations[0]) {
				print ', ' unless($father || $mother);
				print 'your';
			} else {
				print 'Your';
			}
			print " $relationship ";
		} elsif($spouserelationship) {
			if($father || $mother || $occupations[0]) {
				print ', ' unless($father || $mother);
				if($firstname) {
					print $firstname;
				} else {
					print $pronoun;
				}
				print ', the ';
			} else {
				print $person->as_string(), ', the ';
			}
			if($sex eq 'F') {
				print 'wife';
			} else {
				print 'husband';
			}
			print " of your $spouserelationship ",
				$spouse->as_string({ middle_names => 1, title => 1 }),
				',';
			$haveprintedspousename = 1;
		}

		if(!$spouserelationship) {
			if($firstname) {
				print $firstname;
			} else {
				print $pronoun;
			}
		}

		my $end_of_sentence = 0;
		if($aob && $aod) {
			print " was born $aob years and died $aod years ago today";
			print "[$_]" foreach(@birthcitations);
			print "[$_]" foreach(@deathcitations);
			print '.';
			$end_of_sentence = 1;
		} elsif($aob) {
			print " was born $aob ", ($aob == 1) ? 'year' : 'years', ' ago today';
			if($placeofbirth) {
				my $p = place({ person => $person, place => $placeofbirth });
				print $p;
				$places_printed{$p} = 1;
			}
			print "[$_]" foreach(@birthcitations);
			print '.';
			$end_of_sentence = 1;
		} elsif($aod) {
			print " died $aod ", ($aod == 1) ? 'year' : 'years', ' ago today';
			if($placeofdeath) {
				my $p = place({ person => $person, place => $placeofdeath });
				print $p;
				$places_printed{$p} = 1;
			}
			print "[$_]" foreach(@deathcitations);
			print '.';
			$end_of_sentence = 1;
		}

		if((!$aob) && ($dateofbirth || $dateofbaptism || $placeofbirth || $placeofbaptism)) {
			print "  $pronoun" if($aob || $aod);
			if($dateofbirth || $placeofbirth) {
				print ',' if($print_sibling_count && (!$opts{'a'}) && (!$aob) && (!$aod) && !$opts{'p'});

				print ' was born';
				if($placeofbirth) {
					if($aod && $placeofdeath && ($placeofbirth eq $placeofdeath)) {
						print ' there';
					} else {
						print place({ person => $person, place => $placeofbirth });
					}
				}
				if($dateofbirth) {
					print ' ', year({
						person => $person,
						date => $dateofbirth,
						must_predate => $death_dt
					});
				}
				print "[$_]" foreach(@birthcitations);
				if($opts{'w'} &&
				  ($death_dt || ($dateofdeath && ($dateofdeath =~ /^\d{4}$/)))) {
					# TODO: Add more checking
					my $yod;
					if($death_dt) {
						$yod = $death_dt->year();
					} elsif($dateofdeath =~ /^(\d{4})$/) {
						$yod = $1;
					} else {
						die "BUG: Impossible case";
					}
					foreach my $bc(@birthcitations) {
						my $citation = $citations{$bc};
						my $title = $citation->title();
						if($title =~ /^(\d{4})\s/) {
							if($1 > $yod) {
								if($opts{'f'}) {
									die $person->as_string(),
										": Year of citation of $title is after the death year of $yod"
								}
								red_warning({
									person => $person,
									warning => "Year of citation of $title is after the death year of $yod"
								});
							}
						}
					}
				}
				if($dateofbaptism || $placeofbaptism) {
					if(scalar(@spouses) && !($opts{'a'} || $opts{'p'})) {
						print ', was';
					} else {
						print ' and';
					}
				}
				$end_of_sentence = 0;
			}
			if($dateofbaptism || $placeofbaptism) {
				print ' ';
				unless($dateofbirth || $placeofbirth) {
					print 'was ';
				}
				if($ENV{'LANG'} =~ /^en_US/) {
					print 'baptized';
				} else {
					print 'baptised';
				}
				if($placeofbaptism) {
					if(($aod || $opts{'a'} || $opts{'p'}) && $placeofbirth && ($placeofbaptism eq $placeofbirth)) {
						print ' there';
					} else {
						my $p = place({ person => $person, place => $placeofbaptism });
						print $p;
						$places_printed{$p} = 1;
					}
				}
				if($dateofbaptism) {
					print ' ', year({
						person => $person,
						date => $dateofbaptism,
						must_postdate => $birth_dt,
						must_predate => $death_dt
					});
					if(!$death_dt) {
						must_predate({
							person => $person,
							date => $dateofbaptism,
							predate => $dateofdeath
						});
					}
					print_sibling_baptism({
						person => $person,
						siblings => \@siblings,
						date => $dateofbaptism,
						birthdate => $dateofbirth,
					});
					if($mother && $opts{'w'}) {
						if($dateofbaptism =~ /.*?(\d{3,4})/) {
							my $yobaptism = $1;
							my $motherdob = get_value({ person => $mother, value => 'birth date' });
							if($motherdob) {
								my $d = $date_parser->parse(date => $motherdob);
								if($d && (ref($d) eq 'ARRAY')) {
									$d = @{$d}[0];
									if(defined($d)) {
										$d = $dfn->parse_datetime($d->{'canonical'})->strftime('%Y');
										if($d > ($yobaptism - 13)) {
											if($opts{'f'}) {
												die "something is wrong with the date of baptism which is less than 13 years after the mother was born ($d)";
											}
											red_warning({
												person => $person,
												warning => "something is wrong with the date of baptism which is less than 13 years after the mother was born ($d)"
											});
										}
									}
								}
							}
						} else {
							if($opts{'f'}) {
								die $person->name(), ": invalid date of baptism $dateofbaptism\n";
							}
							warn $person->name(), ": invalid date of baptism $dateofbaptism\n";
							$warned{$person} = 1;
						}
					}
				}
				$end_of_sentence = 0;
			}
			if(scalar(@spouses)) {
				if($aod || $aob) {
					print ' and';
				} else {
					print '.';
					$end_of_sentence = 1;
				}
			} else {
				print '.';
				$end_of_sentence = 1;
			}
		} elsif($aob && ($dateofbaptism || $placeofbaptism)) {
			print "  $pronoun was ";

			if($ENV{'LANG'} =~ /^en_US/) {
				print 'baptized';
			} else {
				print 'baptised';
			}
			if($placeofbaptism) {
				if($placeofbirth && ($placeofbaptism eq $placeofbirth)) {
					if($aod) {
						print ' in ',
							lcfirst($person->possessive()),
							' home town';
					} else {
						print ' there';
					}
				} else {
					my $p = place({ person => $person, place => $placeofbaptism });
					print $p;
					$places_printed{$p} = 1;
				}
			}
			if($dateofbaptism) {
				print ' ', year({
					person => $person,
					date => $dateofbaptism,
					must_postdate => $birth_dt,
					must_predate => $death_dt
				});
				print_sibling_baptism({
					person => $person,
					siblings => \@siblings,
					date => $dateofbaptism,
					birthdate => $dateofbirth,
				});
			}
			if(scalar(@spouses)) {
				print ' and';
				$end_of_sentence = 0;
			} else {
				print '.';
				$end_of_sentence = 1;
			}
		}

		my $all_children_are_alive = 1;

		if($yob && ($year >= $yob + 150)) {
			$all_children_are_alive = 0;
		} else {
			foreach my $child(@children) {
				if($child->get_record('death') || get_value({ person => $child, value => 'death date' })) {
					$all_children_are_alive = 0;
					last;
				}
				if($child->get_record('burial')) {
					$all_children_are_alive = 0;
					last;
				}
				my $dob = get_value({ person => $child, value => 'birth date' });
				if($dob) {
					if(($dob =~ /^\d{4}$/) && ($dob < ($year - 100))) {
						$all_children_are_alive = 0;
						last;
					}
					if($dob =~ /^\d/) {
						my $d;
						eval {
							$d = $date_parser->parse(date => $dob);
						};
						if($d) {
							$d = @{$d}[0];
						}
						if($d) {
							$d = $dfn->parse_datetime($d->{'canonical'});
							if($d->strftime('%Y') < ($year - 120)) {
								$all_children_are_alive = 0;
								last;
							}
						}
					}
				}
			}
		}
		if(scalar(@spouses) &&
		   ((!$spouserelationship) || $placeofmarriage || $dateofmarriage)) {
			print "  $pronoun" if($end_of_sentence);

			if(scalar(@spouses) == 1) {
				if($placeofmarriage || $dateofmarriage) {
					print ' married ';
				} else {
					print ' was married to ';
				}
				if($haveprintedspousename) {
					$nameparser->parse($spouses[0]->name());

					my %name_components = $nameparser->components();
					print $name_components{'given_name_1'};
				} else {
					print $spouses[0]->as_string();
					$haveprintedspousename = 1;
				}
				if($numberofchildren) {
					print ', with whom ', lcfirst($pronoun);
					if((!$all_children_are_alive) || (!$opts{'l'}) || ($yob && ($year > $yob + 100))) {
						print ' had ';
					} elsif((!$dateofdeath) && (!$dateofburial) && ($spouses[0]) && !$spouses[0]->death()) {
						print ' has had ';
					} else {
						print $dateofdeath || $dateofburial ? ' had ' : ' has ';
					}
					if($numberofchildren == 1) {
						if($all_children_are_alive) {
							print '1 surviving child, ';
						} else {
							print '1 child, ';
						}
					} else {
						if($all_children_are_alive) {
							print "$numberofchildren surviving children, ";
						} else {
							print "$numberofchildren children, ";
						}
					}
					if($numberofchildren == 1) {
						print $children[0]->given_names();
					} elsif($numberofchildren > 1) {
						my $childnames = join(', ', map { $_->given_names() } @children);
						substr($childnames, rindex($childnames, ', '), 2, ' and ');
						print $childnames;
					}
				}
				print ',' if(($dateofmarriage || $placeofmarriage) && $numberofchildren);
				if($placeofmarriage && $dateofmarriage &&
				   (($placeofbaptism and ($placeofmarriage eq $placeofbaptism)) ||
				    ($aod && $placeofbirth && ($placeofmarriage eq $placeofbirth)))) {
					print ' there ',
						year(person => $person, string => $dateofmarriage, must_postdate => $birth_dt, must_predate => $death_dt);
				} else {
					print ' ', year(person => $person, string => $dateofmarriage, must_postdate => $birth_dt, must_predate => $death_dt) if($dateofmarriage);
					if($placeofmarriage) {
						my $p = place({ place => $placeofmarriage, person => $person, places_printed => \%places_printed });
						print $p;
						$places_printed{$p} = 1;
					}
				}
				print "[$marriagecitation]" if($marriagecitation);
			} else {
				print ' was married ';
				if(scalar(@spouses) == 2) {
					print 'twice';
				} else {
					print scalar(@spouses), ' times';
				}
				my $names = join(', ', map { $_->as_string() } @spouses);
				substr($names, rindex($names, ', '), 2, ' and ');
				print ", to $names";
				print "[$marriagecitation]" if($marriagecitation);
				# TODO: print the date and places of the marriages
				if($numberofchildren) {
					print ".  $pronoun ",
						$all_children_are_alive ? 'has ' : 'had ';
					if($numberofchildren == 1) {
						if($all_children_are_alive) {
							print '1 surviving child, ';
						} else {
							print '1 child, ';
						}
						print $children[0]->given_names();
					} else {
						if($all_children_are_alive) {
							print "$numberofchildren surviving children, ";
						} else {
							print "$numberofchildren children, ";
						}
						if($numberofchildren > 1) {
							my $childnames = join(', ', map { $_->given_names() } @children);
							substr($childnames, rindex($childnames, ', '), 2, ' and ');
							print $childnames;
						}
					}
				}
			}
			$end_of_sentence = 0;
		} elsif($numberofchildren) {
			if($end_of_sentence) {
				print "  $pronoun";
			}
			print ' had ',
				($numberofchildren == 1) ? '1 child, ' : "$numberofchildren children, ";
			if($numberofchildren == 1) {
				print $children[0]->given_names();
			} elsif($numberofchildren > 1) {
				my $childnames = join(', ', map { $_->given_names() } @children);
				substr($childnames, rindex($childnames, ', '), 2, ' and ');
				print $childnames;
			}
			$end_of_sentence = 0;
		}

		my $printed_residence;
		my %residencecitations;
		if(scalar(@residences)) {
			# FIXME, handle duplicate locations better
			my @residencelist;

			# This is an attempt to handle
			# https://github.com/pjcj/Gedcom.pm/issues/13
			foreach my $residence(@residences) {
				if(ref($residence) eq 'Gedcom::Record') {
					my $place = $residence->place();
					if(defined($place) &&
					  ((!$placeofbirth) || ($place ne $placeofbirth)) &&
					  ((!$placeofmarriage) || ($place ne $placeofmarriage))) {
						push @residencelist, $residence;
						my $src = $residence->source();
						if($src) {
							$src = $ged->get_source($src) unless ref($src);
							foreach my $c(@birthcitations) {
								if($src eq $citations{$c}) {
									$residencecitations{$residence} = $c;
									last;
								}
							}
							unless($residencecitations{$residence}) {
								if($deathcitations[0] && ($src eq $citations{$deathcitations[0]})) {
									$residencecitations{$residence} = $deathcitations[0];
								} else {
									$residencecitations{$residence} = ++$citationcount;
									$citations{$citationcount} = $src;
								}
							}
						}
					} elsif(!defined($place)) {
						red_warning({ person => $person, warning => 'Residence record contains no location' });
					}
				}
			}

			# FIXME: This messes citations
			# TODO: See RT110333
			# @residencelist = sort { $a->date() && $b->date() ? $a->date() <=> $b->date() : $a->title() cmp $b->title() } @residencelist;

			my $count = 0;
			foreach my $residence(@residencelist) {
				if($count == 0) {
					print '.' unless($end_of_sentence);
					print '  During ',
						lc($person->possessive()),
						' life ', lcfirst($pronoun), ' lived';
				}
				if(($count == 0) || ($residencelist[$count - 1]->place() ne $residence->place())) {
					print place({ person => $person, record => $residence });
				}
				my $date = $residence->date();
				if($date) {
					print ' ', year({ person => $person, date => $date });
				}
				if($residencecitations{$residence}) {
					print '[', $residencecitations{$residence}, ']';
				}
				if($residence->place() &&
				  ($count <= (scalar(@residencelist) - 1)) &&
				  ($residencecitations{$residence})) {
					my $peek = $residencelist[$count + 1];
					if($peek && $peek->place() && ($peek->place() eq $residence->place())) {
						if($residencecitations{$peek}) {
							print '[', $residencecitations{$peek}, ']';
						}
					}
				}
				$count++;
				if($count < (scalar(@residencelist) - 1)) {
					print ';';
				} elsif($count == (scalar(@residencelist) - 1)) {
					print '; and';
				}
				$printed_residence = 1;
			}
			if($printed_residence) {
				print '.';
				$end_of_sentence = 1;
			}
		}

		if($placeofburial || $dateofburial) {
			if($aod || ((!$dateofdeath) && !$placeofdeath)) {
				print '.' if((!$end_of_sentence) && (scalar(@spouses) || $numberofchildren));
				if($dateofburial) {
					print "  $pronoun was buried";
					if($placeofburial) {
						if($placeofbirth && ($placeofburial eq $placeofbirth)) {
							print ' in ',
								lcfirst($person->possessive()),
								' home town of ';
							my $city = $placeofburial;
							if($city =~ /^(.+?),/) {
								print $1;
							} else {
								print place({ person => $person, place => $placeofburial });
							}
						} else {
							print place({ person => $person, place => $placeofburial, there => $placeofdeath, places_printed => \%places_printed, must_postdate => $birth_dt });
						}
					}
					print ' ', year({ person => $person, date => $dateofburial });
				} elsif($placeofbirth && ($placeofburial eq $placeofbirth)) {
					print "  $pronoun was buried in ",
						lcfirst($person->possessive()),
						' home town of ';
					my $city = $placeofburial;
					if($city =~ /^(.+?),/) {
						print $1;
					} else {
						print place({ person => $person, place => $placeofburial });
					}
				} else {
					my $p = place({ person => $person, place => $placeofburial, places_printed => \%places_printed, there => $placeofmarriage });
					print "  $pronoun is buried$p";
				}
				$end_of_sentence = 0;
			} elsif($dateofdeath || $placeofdeath) {
				print '.' if(!$end_of_sentence);
				print "  $pronoun died";
				if($dateofdeath) {
					print ' ', year({ person => $person, date => $dateofdeath, must_postdate => $birth_dt });
					if($placeofdeath) {
						print place({ person => $person, place => $placeofdeath });
					}
				} else {
					print place({ person => $person, place => $placeofdeath });
				}
				print "[$_]" foreach(@deathcitations);
				# Print notes about the death, if any
				my $d = get_value({ person => $person, value => 'death' });
				if($d) {
					$d =~ tr/\r//;
					print " ($d)";
				}
				if($dateofburial) {
					print ' and was buried';
					if($placeofburial) {
						print place({ person => $person, place => $placeofburial, there => $placeofdeath, places_printed => \%places_printed, must_postdate => $birth_dt });
					}
					print ' ', year({ person => $person, date => $dateofburial });
				} else {
					print ' and is buried',
						place({ person => $person, place => $placeofburial, there => $placeofdeath });
				}
				$end_of_sentence = 0;
			}
			print "[$_]" foreach(@burialcitations);
		} elsif((!$aod) && ($placeofdeath || $dateofdeath)) {
			# TODO - extract marriage banns information
			if($person->marb()) {
				# die 'foo';
			}
			if($placeofdeath && $placeofmarriage && ($placeofdeath eq $placeofmarriage) && !$printed_residence) {
				print ', which is also where ', lcfirst($pronoun);
			} elsif($aob && scalar(@spouses) && ($numberofchildren == 0)) {
				if($end_of_sentence) {
					print "  $pronoun";
				} else {
					print ' and';
				}
			} else {
				print '.' if(!$end_of_sentence);
				print "  $pronoun";
			}
			print ' died';
			if($dateofdeath) {
				if($placeofdeath && $placeofmarriage && ($placeofdeath eq $placeofmarriage) && !$printed_residence) {
					print ' ', year({ person => $person, date => $dateofdeath, must_postdate => $birth_dt });
				} elsif($placeofbirth && $placeofdeath && ($placeofdeath eq $placeofbirth) && ($placeofdeath =~ /^(.+?),.*/) && !$printed_residence) {
					print "in $1 ",
						year({ person => $person, date => $dateofdeath, must_postdate => $birth_dt });
				} else {
					print ' ', year({ person => $person, date => $dateofdeath, must_postdate => $birth_dt });
					if($placeofdeath && ((!$placeofmarriage) || ($placeofdeath ne $placeofmarriage) || $printed_residence)) {
						print place({ person => $person, place => $placeofdeath });
					}
				}
			} elsif((!$placeofmarriage) || ($placeofdeath ne $placeofmarriage)) {
				print place({ person => $person, place => $placeofdeath });
			}
			print "[$_]" foreach(@deathcitations);
			my $d = get_value({ person => $person, value => 'death' });
			if($d) {
				$d =~ tr/\r//;
				print " ($d)";
			}
			$end_of_sentence = 0;
		}
		print '.' if(!$end_of_sentence);

		my @events = $person->event();
		if((scalar(@events) == 2) &&
		   (ref($events[0]) eq 'Gedcom::Record') &&
		   (ref($events[1]) eq 'Gedcom::Record') &&
		   ((($events[0]->type() eq 'Arrival') && ($events[1]->type() eq 'Departure')) ||
		    (($events[1]->type() eq 'Arrival') && ($events[0]->type() eq 'Departure')))) {
		    	# Simple case - one journey made
		    	print '  ';

			my $arrival = ($events[0]->type() eq 'Arrival') ? $events[0] : $events[1];
			my $departure = ($events[0]->type() eq 'Departure') ? $events[0] : $events[1];
			my $yod;
			my $yoa;
			my $dod = $departure->date();
			my $doa = $arrival->date();
			if($doa && $dod && ($doa =~ /(\d{4})/)) {
				$yoa = $1;
				$doa =~ s/\s?\d{4}//;
				if($dod =~ /(\d{4})/) {
					$yod = $1;
					$dod =~ s/\s?\d{4}//;
					if($dod =~ /^\d/) {
						$dod = "on $dod";
					} else {
						$dod = "during $dod";
					}
					if($doa =~ /^\d/) {
						$doa = "on $doa";
					} else {
						$doa = "during $doa";
					}
				}
			}
			if($yod && $yoa && ($yod == $yoa)) {
				print "During $yod ", lc($person->pronoun());
			} else {
				print $person->pronoun();

				$yod = year({ person => $person, record => $departure });
				$yoa = year({ person => $person, record => $arrival });
			}

			if($ENV{'LANG'} =~ /^en_US/) {
				print ' traveled';
			} else {
				print ' travelled';
			}

			print ' from ',
				$departure->place(),
				' to ',
				$arrival->place();

			if(defined($dod)) {
				print ", departing $dod and";
			}

			print " arriving $doa.";
			$end_of_sentence = 1;
		}
		print "\n";

		if($person->get_value('note')) {
			print "\t";
			my @notes = $person->get_value('note');
			print join("\n\t", @notes);
		}

		foreach my $child(@children) {
			my $dob = get_value({ person => $child, value => 'birth date' });
			if($dob) {
				print "\t", $child->given_names(),
					' was born ',
					year({ person => $child, date => $dob });
				if($opts{'w'} && ($birth_dt || $death_dt) && ($dob =~ /^\d/)) {
					my $d;
					eval {
						$d = $date_parser->parse(date => $dob);
					};
					if($d) {
						$d = @{$d}[0];
					}
					if($d) {
						$d = $dfn->parse_datetime($d->{'canonical'});
						if($birth_dt && ($d <= $birth_dt)) {
							if($opts{'f'}) {
								die $child->name(), ': Born before parent was born';
							}
							red_warning({ person => $child, warning => 'born before parent was born' });
						}
						if($sex eq 'F') {
							if($death_dt && ($d > $death_dt)) {
								if($opts{'f'}) {
									die $child->name(), ': Born after mother died';
								}
								red_warning({ person => $child, warning => 'born after mother died' });
							}
						} elsif($death_dt && ($d > ($death_dt + $ninemonths))) {
							# Allow the child to be
							# born up to 9 months
							# after the death of the
							# father
							if($opts{'f'}) {
								die $child->name(), ': Born more than 9 months after father died';
							}
							red_warning({ person => $child, warning => 'born more than 9 months after father died' });
						}
					}
				}
				print ".\n";
			} elsif(get_value({ person => $child, value => 'baptism date' })) {
				print "\t", $child->given_names(),
					' was born c',
					get_value({ person => $child, value => 'baptism date' }),
					".\n";
			}
		}
		if($opts{'c'}) {
			foreach my $citation(1..$citationcount) {
				print "[$citation]: ", $citations{$citation}->title(), "\n";
				# TODO - print NOTE
			}
		}
		print '-' x 80, "\n";
	} else {
		my ($dob, $dod);
		eval {
			$dob = $person->get_value('birth date');
			$dod = $person->get_value('death date');
		};
		if($@) {
			my $lastname = $name_components{'surname_1'};
			warn "Can't parse record for $firstname $lastname";
			return;
		}

		if(defined($dob) && (!$onlydeaths) && !$onlybirthdays) {
			my $d;
			if(($dob !~ /^\d{4}$/) && ($dob =~ /^\d/)) {
				eval {
					$d = $date_parser->parse(date => $dob);
				};
			}
			if($d) {
				$d = @{$d}[0];
				$birth_dt = $dfn->parse_datetime($d->{'canonical'});
				print "\tBorn: ", $birth_dt->strftime('%x');
			} else {
				if($@) {
					if($opts{'f'}) {
						die $@;
					}
					if($opts{'w'}) {
						red_warning({ person => $person, warning => $@ });
					}
				}
				print "\tBorn: $dob";
			}
			print "\n";
		}
		if(defined($dod) && (!$onlydeaths) && !$onlybirthdays) {
			my $d;
			if(($dod !~ /^\d{4}$/) && ($dod =~ /^\d/)) {
				eval {
					$d = $date_parser->parse(date => $dod);
				};
			}
			if($d) {
				$d = @{$d}[0];
				$death_dt = $dfn->parse_datetime($d->{'canonical'});
				print "\tDied: ", $death_dt->strftime('%x');
			} else {
				if($@) {
					if($opts{'f'}) {
						die $@;
					}
					if($opts{'w'}) {
						red_warning({ person => $person, warning => $@ });
					}
				}
				print "\tDied: $dod\n";
			}
			print "\n";
		}
	}
	$printed{$person->{'xref'}} = 1;
}

sub Gedcom::Individual::as_string
{
	my $self = shift;
	my %args = (ref($_[0]) eq 'HASH') ? %{$_[0]} : @_;

	my $name = $self->name();

	$name =~ s/\///g;
	$nameparser->parse($name);

	my %name_components = $nameparser->components();
	my $first_name = $name_components{'given_name_1'};
	my $middle_name = $name_components{'middle_name'};
	my $surname = $name_components{'surname_1'};
	if($name_components{'surname_2'}) {
		$surname .= ' ' . $name_components{'surname_2'};
	}

	if($name_components{'non_matching'}) {
		if($name =~ /(\w{2,})\s(\w)\s(\w)\s(\w{2,})/) {
			# Name parser doesn't parse names like this very well
			$first_name = $1;
			$middle_name = "$2 $3";
			$surname = $4;
		} else {
			if($surname) {
				$surname .= ' ';
			}
			$surname .= $name_components{'non_matching'};
		}
	} elsif(!defined($surname)) {
		$surname = $self->surname();
	}
	my $suffix = $name_components{'suffix'};

	my $has_maiden_name;
	if($args{'nee'}) {
		my $sex = get_value({ person => $self, value => 'sex' });
		if(defined($sex) && ($sex eq 'F')) {
			my $husband = $self->husband();
			if(defined($husband)) {
				$surname = $husband->surname();
				$has_maiden_name = 1;
			}
		}
	}

	my $rc;

	if($args{'title'}) {
		$rc = $name_components{'title_1'};
		if($rc) {
			$rc .= ' ';
		}
	}

	if($first_name) {
		$rc .= $first_name;
	} else {
		$rc .= $self->given_names();
	}

	if($args{'middle_names'}) {
		if($middle_name) {
			$rc .= " $middle_name";
		} elsif($name =~ /\s([A-Z])\s.+/) {
			# Just an initial has been given
			$rc .= " $1";
		}
	}

	if($surname) {
		if($rc) {
			$rc .= ' ';
		}
		$rc .= normalize_name($surname);
		if($suffix) {
			$rc .= " $suffix";
		}
	}

	if($has_maiden_name && $self->surname()) {
		$rc .= ' (nee ' . normalize_name($self->surname()) . ')';
	}

	if(!defined($rc)) {
		if($opts{'f'}) {
			die "Can't determine name of this person";
		}
		if($opts{'w'}) {
			red_warning({ warning => "Can't determine name of this person" });
			$args{'include_years'} = 1;
			$rc = 'Unknown person ';
		}
	}
	if($args{'include_years'}) {
		my $dob = get_value({ person => $self, value => 'birth date' });

		my $yob;	# Year of birth
		if($dob && ($dob =~ /.*?(\d{3,4})/)) {
			if($dob =~ /^(Abt|ca?)\.?\s*(.+)/i) {
				$yob = "c$2";
			} else {
				$yob = $1;
			}
		} else {
			$dob = get_value({ person => $self, value => 'baptism date' });
			if($dob && ($dob =~ /.*?(\d{3,4})/)) {
				$yob = "c$1";
			}
		}

		my $dod = get_value({ person => $self, value => 'death date' });

		my $yod;	# Year of death
		if($dod && ($dod =~ /.*?(\d{3,4})/)) {
			$yod = $1;
		} else {
			$dod = get_value({ person => $self, value => 'burial date' });
			if($dod && ($dod =~ /.*?(\d{3,4})/)) {
				$yod = "c$1";
			}
		}

		$rc .= ' ' if($yob || $yod);

		if($yob) {
			$rc .= $yob;
		}

		$rc .= ' -' if($yob || $yod);

		if($yod) {
			return "$rc $yod";
		}
	}

	return $rc;
}

sub normalize_name
{
	# my $name = shift;

	# my $rc;
	# foreach my $word(split(/-| |'/, lc($name))) {
		# $rc .= '-' if($rc && ($name =~ /-/));
		# $rc .= "'" if($rc && ($name =~ /'/));
		# $rc .= ' ' if($rc && ($name =~ / /));
		# $rc .= ucfirst($word);
	# }

	# return $rc;

	return Lingua::EN::NameCase::nc(shift);
}

sub Gedcom::Individual::pronoun
{
	my $self = shift;

	my $sex = get_value({ person => $self, value => 'sex' });

	if(defined($sex)) {
		if($sex eq 'F') {
			return 'She';
		}
		if($sex eq 'M') {
			return 'He';
		}
	}
	return 'They';
}

sub Gedcom::Individual::possessive
{
	my $self = shift;

	my $rc = {
		'He' => 'His',
		'She' => 'Her',
		'They' => 'Their',
	};

	return $rc->{$self->pronoun()};
}

# FIXME: currently only finds ancestors
# TODO: find in-laws
# See http://www.myrelative.com/html/relationship.html for inspiration
sub Gedcom::Individual::relationship
{
	my $self = shift;
	my $other = shift;
	my $father = shift;
	my $mother = shift;

	unless(@myancestors) {
		@myancestors = $self->ancestors();
	}
	return unless @myancestors;

	my $sex = get_value({ person => $other, value => 'sex' });
	if((!defined($sex)) || ($sex !~ /[MF]/)) {
		if($opts{'f'}) {
			die "\n", $other->as_string(), ": unknown sex\n";
		}
		if($opts{'w'}) {
			red_warning({ person => $other, warning => 'unknown sex' });
		}
		return;
	}

	foreach my $person1(@myancestors) {
		if($person1 eq $other) {
			# Direct ancestor
			my $steps = stepsabove($self, $other, 0);
			my $title = ($sex eq 'M') ? 'father' : 'mother';
			if($steps >= 5) {
				$steps -= 2;
				return "$steps times great-grand$title";
			} elsif($steps == 1) {
				return $title;
			} elsif($steps == 2) {
				return "grand$title";
			} elsif($steps == 3) {
				return "great-grand$title";
			} elsif($steps == 4) {
				return "great-great-grand$title";
			} elsif($steps <= 0) {
				if($opts{'f'}) {
					die $other->as_string(), ": BUG - not a direct ancestor, steps = $steps";
				} else {
					warn colored($other->as_string() . ": BUG - not a direct ancestor, steps = $steps", 'red');
				}
			}
		}
	}

	my @ancestors2 = $other->ancestors();
	return unless(@ancestors2);

	foreach my $person1(@myancestors) {
		foreach my $person2(@ancestors2) {
			# print $person1->as_string(), '->', $person2->as_string(), "\n";
			# G::C is noisy
			# my $c = Gedcom::Comparison->new($person1, $person2);
			# if($c->identical($person2)) {
				# die 'match found';
			# }
			if($person1 eq $person2) {
				# Common ancestor is $person2
				my $steps1 = stepsabove($self, $person1, 0);
				return if($steps1 > 7);
				my $steps2 = stepsabove($other, $person2, 0);
				return if($steps2 > 7);

				# It would be nice to do this as an algorithm, but this will do
				# e.g. 2, 1 is uncle
				my %male_relationships = (
					1 << 8 | 1 => 'brother',
					1 << 8 | 2 => 'nephew',
					2 << 8 | 1 => 'uncle',
					3 << 8 | 1 => 'great-uncle',
					4 << 8 | 1 => 'great-great-uncle',
					2 << 8 | 2 => 'cousin',
					2 << 8 | 3 => 'first cousin once-removed',
					3 << 8 | 2 => 'first cousin once-removed',
					2 << 8 | 4 => 'first cousin twice-removed',
					3 << 8 | 3 => 'second cousin',
					3 << 8 | 4 => 'second cousin once-removed',
					4 << 8 | 2 => 'first cousin twice-removed',
					5 << 8 | 2 => 'first cousin three-times-removed',
					5 << 8 | 3 => 'second cousin twice-removed',
					6 << 8 | 3 => 'second cousin three-times-removed',
					6 << 8 | 4 => 'third cousin twice-removed',
					6 << 8 | 5 => 'fourth cousin once-removed',
					7 << 8 | 5 => 'fourth cousin twice-removed',
				);
				my %female_relationships = (
					1 << 8 | 1 => 'sister',
					1 << 8 | 2 => 'niece',
					2 << 8 | 1 => 'aunt',
					2 << 8 | 2 => 'cousin',
					2 << 8 | 3 => 'first cousin once-removed',
					2 << 8 | 4 => 'first cousin twice-removed',
					3 << 8 | 1 => 'great-aunt',
					3 << 8 | 2 => 'first cousin once-removed',
					3 << 8 | 3 => 'second cousin',
					3 << 8 | 5 => 'second cousin twice-removed',
					3 << 8 | 4 => 'second cousin once-removed',
					4 << 8 | 1 => 'great-great-aunt',
					4 << 8 | 2 => 'first cousin twice-removed',
					5 << 8 | 2 => 'first cousin three-times-removed',
					5 << 8 | 3 => 'second cousin twice-removed',
					6 << 8 | 3 => 'second cousin three-times-removed',
					6 << 8 | 4 => 'third cousin twice-removed',
					6 << 8 | 5 => 'fourth cousin once-removed',
					7 << 8 | 5 => 'fourth cousin twice-removed',
				);

				my $rc = ($sex eq 'M') ?
					$male_relationships{($steps1 << 8) | $steps2} :
					$female_relationships{($steps1 << 8) | $steps2};
				if(defined($rc) && ($rc =~ /cousin/)) {
					my $myfather = $self->father();
					my $mymother = $self->mother();
					if($myfather && (stepsabove($myfather, $person2, 0) > 0)) {
						$rc .= ' on your father\'s side';
					} elsif($mymother && (stepsabove($mymother, $person2, 0) > 0)) {
						$rc .= ' on your mother\'s side';
					}
				}
				# print "$steps1, $steps2\n" if(!defined($rc));

				return $rc;
			}
		}
	}
}

sub stepsabove
{
	my $person = shift;
	my $target = shift;
	my $count = shift;

	return -1 if($count == -1);

	if($person eq $target) {
		return $count;
	}
	my @father = $person->father();
	my $father = $father[0];
	my @mother = $person->mother();
	my $mother = $mother[0];

	if($father) {
		my $rc = stepsabove($father, $target, $count + 1);
		return $rc if($rc != -1);
	}
	if($mother) {
		return stepsabove($mother, $target, $count + 1);
	}
	return -1;
}

sub year
{
	my %params = (ref($_[0]) eq 'HASH') ? %{$_[0]} : @_;

	my $string = $params{'string'} || $params{'date'};

	if(!defined($string)) {
		$string = $params{'record'};
		return unless($string);

		$string = $string->date();
		return unless($string);
	}

	if($string =~ /^\d{4}$/) {
		return "in $string";
	}
	if($string =~ /^(Abt|ca?)\.?\s*(.+)/i) {
		return "c. $2";
	}
	if($string =~ /^\d/) {
		my $person = $params{'person'};
		my $d;
		eval {
			$d = $date_parser->parse(date => $string);
		};
		if($d) {
			$d = @{$d}[0];
		}
		if($d) {
			$d = $dfn->parse_datetime($d->{'canonical'});
			my $must_postdate = $params{'must_postdate'};
			if($must_postdate) {
				if($opts{'f'}) {
					die $person->as_string(), ": Something is wrong with the date $string which should be after ", $must_postdate->strftime('%x') if($d < $must_postdate);
				}
				if($opts{'w'}) {
					red_warning({ person => $person, warning => "something is wrong with the date $string which should be after " . $must_postdate->strftime('%x') }) if($d < $must_postdate);
				}
			}
			my $must_predate = $params{'must_predate'};
			if($must_predate) {
				if($opts{'f'}) {
					die $person->as_string(), ": Something is wrong with the date $string which should be before ", $must_predate->strftime('%x') if($d > $must_predate);
				}
				if($opts{'w'}) {
					red_warning({ person => $person, warning => "something is wrong with the date $string which should be before " . $must_predate->strftime('%x') }) if($d > $must_predate);
				}
			}
			return 'on ', $d->strftime('%x');
		}
		if($@) {
			# RT 107354
			chomp $@;
			if($opts{'f'}) {
				if($person) {
					die $person->as_string() . ": $@";
				} else {
					die $@;
				}
			}
			if($opts{'w'}) {
				red_warning({ person => $person, warning => $@ });
			}
		}
		return "on $string";
	}
	if($string =~ /^bef.? (\d{4})/i) {
		return "before $1";
	}
	if($string =~ /^by.? (\d{4})/i) {
		return "by $1";
	}
	if($string =~ /^By (\d{4})/i) {
		my $person = $params{'person'};
		if($opts{'f'}) {
			if($person) {
				die $person->as_string() . " says 'By' instead of 'Bef'";
			} else {
				die "Got 'By' instead of 'Bef'";
			}
		}
		if($opts{'w'}) {
			if($person) {
				red_warning({ person => $person, warning => "says 'By' instead of 'Bef'" });
			} else {
				warn colored("Got 'By' instead of 'Bef'", 'red');
			}
		}
		return "before $1";
	}

	return "in $string";
}

sub place
{
	my %params = (ref($_[0]) eq 'HASH') ? %{$_[0]} : @_;

	my $place = $params{'place'};
	if(!defined($place)) {
		$place = $params{'record'};
		return unless($place);

		$place = $place->place();
		return unless($place);
	}

	my $there = $params{'there'};

	if($there && ($place eq $there)) {
		return ' there';
	}

	validate_place({ person => $params{'person'}, place => $place });

	if($place =~ /^\d/) {
		return " at $place";
	}
	if($place eq 'USA') {
		return ' in the USA';
	}
	$place = " in $place";

	# Only print the town if the location has already been printed
	my $places_printed = $params{'places_printed'};
	if($places_printed && $places_printed->{$place} && $place =~ /^(.+?),/) {
		return $1;
	}
	return $place;
}

sub validate_place
{
	my %params = (ref($_[0]) eq 'HASH') ? %{$_[0]} : @_;

	my $place = $params{'place'};
	die 'place is not optional' unless $place;

	if($places{$place}) {
		return $places{$place};
	}

	# US and Canada are more logical, using city,county,state,country, than other countries
	if($opts{'w'} && (($place !~ /,.*,.*,.*/) || ($place =~ /USA|Canada/i))) {
		if($place =~ /(.*),\s*Independent Cities\s*(.*)/i) {
			$place = "$1$2";
		}
		if($place =~ /,\s*(.+,.+,.+,.+)$/) {
			# Use only the town part
			$place = $1;
		}
		if(!$geocoder->geocode($place)) {
			# Don't die because there are many
			# false positives as locations
			# may no longer exist
			my $person = $params{'person'};
			if($person) {
				warn colored($person->as_string({ include_dates => 1 }) . ": unknown location $place", 'red');
			} else {
				warn colored("Unknown location $place", 'red');
			}
			$places{$place} = 0;
			return 0;
		}
	}
	$places{$place} = 1;
	return 1;
}

sub print_sibling_baptism
{
	my %params = (ref($_[0]) eq 'HASH') ? %{$_[0]} : @_;

	my $person = $params{'person'};
	my $siblings = $params{'siblings'};
	my $date = $params{'date'};
	my $birthdate = $params{'birthdate'};

	my @onsameday;
	foreach my $sibling(@{$siblings}) {
		my $dateofsiblingbaptism = get_value({ person => $sibling, value => 'baptism date' });
		if($dateofsiblingbaptism && ($dateofsiblingbaptism eq $date)) {
			push @onsameday, $sibling;
		}
	}
	my $count = 0;
	foreach my $sibling(@onsameday) {
		if($count == 0) {
			print ', the same day as ';
		} elsif($count < (scalar(@onsameday) - 1)) {
			print ', ';
		} elsif($count == (scalar(@onsameday) - 1)) {
			print ' and ';
		}
		print lcfirst($person->possessive()), ' ';
		my $dateofsiblingbirth = get_value({ person => $sibling, value => 'birth date' });
		if($dateofsiblingbirth && $birthdate && ($dateofsiblingbirth eq $birthdate)) {
			print 'twin ';
		}
		print $sibling->sex() eq 'M' ? 'brother ' : 'sister ',
			$sibling->given_names();
		$count++;
	}
}

sub red_warning
{
	if($opts{'w'}) {
		my %params = (ref($_[0]) eq 'HASH') ? %{$_[0]} : @_;

		die "What do you want to say?" unless($params{'warning'});

		if($params{'person'}) {
			warn colored($params{'person'}->as_string() . ': ' . $params{'warning'}, 'red');
		} else {
			warn colored(lcfirst($params{'warning'}), 'red');
		}
		# my $i = 0;
		# while((my @call_details = (caller($i++)))) {
			# print STDERR "\t", colored($call_details[1] . ':' . $call_details[2] . ' calling function ' . $call_details[0] . ':' . $call_details[3], 'red'), "\n";
		# }
	}
}

# Cache gedcom values
sub get_value
{
	my %params = (ref($_[0]) eq 'HASH') ? %{$_[0]} : @_;

	my $person = $params{'person'};
	my $value = $params{'value'};

	my $xref = $person->{'xref'};
	tie (my %values, 'Tie::Static');

	if(defined($values{$xref}{$value})) {
		return $values{$xref}{$value};
	}

	my $rc = $person->get_value($value);
	$values{$xref}{$value} = $rc;
	return $rc;
}

sub must_predate
{
	return unless($opts{'w'});

	my %params = (ref($_[0]) eq 'HASH') ? %{$_[0]} : @_;

	my $person = $params{'person'};
	my $date = $params{'date'};
	my $predate = $params{'predate'};

	return unless($params{'predate'} && $params{'date'});

	my $d1 = $dfn->parse_datetime($date);
	my $d2 = $dfn->parse_datetime($predate);

	if($d1->year() > $d2->year()) {
		if($opts{'f'}) {
			die $person->as_string(), ": Something is wrong with the date $date which should be before $predate";
		}
		red_warning({
			person => $person,
			warning => "something is wrong with the date $date which should be before $predate"
		});
	}
}
